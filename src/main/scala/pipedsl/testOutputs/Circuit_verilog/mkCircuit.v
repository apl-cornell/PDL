//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// _inthg_req                     O     3 reg
// RDY__inthg_req                 O     1
// RDY__inthg_resp                O     1 reg
// _inthg_checkHandle             O     1
// RDY__inthg_checkHandle         O     1 reg
// _inthg_peek                    O     1 reg
// RDY__inthg_peek                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _inthg_req_counter             I    10
// _inthg_checkHandle_handle      I     3
// EN__inthg_resp                 I     1
// EN__inthg_req                  I     1
//
// Combinational paths from inputs to outputs:
//   _inthg_checkHandle_handle -> _inthg_checkHandle
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCircuit(CLK,
		 RST_N,

		 _inthg_req_counter,
		 EN__inthg_req,
		 _inthg_req,
		 RDY__inthg_req,

		 EN__inthg_resp,
		 RDY__inthg_resp,

		 _inthg_checkHandle_handle,
		 _inthg_checkHandle,
		 RDY__inthg_checkHandle,

		 _inthg_peek,
		 RDY__inthg_peek);
  input  CLK;
  input  RST_N;

  // actionvalue method _inthg_req
  input  [9 : 0] _inthg_req_counter;
  input  EN__inthg_req;
  output [2 : 0] _inthg_req;
  output RDY__inthg_req;

  // action method _inthg_resp
  input  EN__inthg_resp;
  output RDY__inthg_resp;

  // value method _inthg_checkHandle
  input  [2 : 0] _inthg_checkHandle_handle;
  output _inthg_checkHandle;
  output RDY__inthg_checkHandle;

  // value method _inthg_peek
  output _inthg_peek;
  output RDY__inthg_peek;

  // signals for module outputs
  wire [2 : 0] _inthg_req;
  wire RDY__inthg_checkHandle,
       RDY__inthg_peek,
       RDY__inthg_req,
       RDY__inthg_resp,
       _inthg_checkHandle,
       _inthg_peek;

  // register hg
  reg [2 : 0] hg;
  wire [2 : 0] hg$D_IN;
  wire hg$EN;

  // register hg_busyReg
  reg hg_busyReg;
  wire hg_busyReg$D_IN, hg_busyReg$EN;

  // register hg_feature_lock_entryVec_0
  reg [10 : 0] hg_feature_lock_entryVec_0;
  wire [10 : 0] hg_feature_lock_entryVec_0$D_IN;
  wire hg_feature_lock_entryVec_0$EN;

  // register hg_feature_lock_entryVec_1
  reg [10 : 0] hg_feature_lock_entryVec_1;
  wire [10 : 0] hg_feature_lock_entryVec_1$D_IN;
  wire hg_feature_lock_entryVec_1$EN;

  // register hg_feature_lock_entryVec_2
  reg [10 : 0] hg_feature_lock_entryVec_2;
  wire [10 : 0] hg_feature_lock_entryVec_2$D_IN;
  wire hg_feature_lock_entryVec_2$EN;

  // register hg_feature_lock_entryVec_3
  reg [10 : 0] hg_feature_lock_entryVec_3;
  wire [10 : 0] hg_feature_lock_entryVec_3$D_IN;
  wire hg_feature_lock_entryVec_3$EN;

  // register hg_feature_lock_lockVec_0_cnt
  reg [1 : 0] hg_feature_lock_lockVec_0_cnt;
  wire [1 : 0] hg_feature_lock_lockVec_0_cnt$D_IN;
  wire hg_feature_lock_lockVec_0_cnt$EN;

  // register hg_feature_lock_lockVec_0_nextId
  reg [1 : 0] hg_feature_lock_lockVec_0_nextId;
  wire [1 : 0] hg_feature_lock_lockVec_0_nextId$D_IN;
  wire hg_feature_lock_lockVec_0_nextId$EN;

  // register hg_feature_lock_lockVec_1_cnt
  reg [1 : 0] hg_feature_lock_lockVec_1_cnt;
  wire [1 : 0] hg_feature_lock_lockVec_1_cnt$D_IN;
  wire hg_feature_lock_lockVec_1_cnt$EN;

  // register hg_feature_lock_lockVec_1_nextId
  reg [1 : 0] hg_feature_lock_lockVec_1_nextId;
  wire [1 : 0] hg_feature_lock_lockVec_1_nextId$D_IN;
  wire hg_feature_lock_lockVec_1_nextId$EN;

  // register hg_feature_lock_lockVec_2_cnt
  reg [1 : 0] hg_feature_lock_lockVec_2_cnt;
  wire [1 : 0] hg_feature_lock_lockVec_2_cnt$D_IN;
  wire hg_feature_lock_lockVec_2_cnt$EN;

  // register hg_feature_lock_lockVec_2_nextId
  reg [1 : 0] hg_feature_lock_lockVec_2_nextId;
  wire [1 : 0] hg_feature_lock_lockVec_2_nextId$D_IN;
  wire hg_feature_lock_lockVec_2_nextId$EN;

  // register hg_feature_lock_lockVec_3_cnt
  reg [1 : 0] hg_feature_lock_lockVec_3_cnt;
  wire [1 : 0] hg_feature_lock_lockVec_3_cnt$D_IN;
  wire hg_feature_lock_lockVec_3_cnt$EN;

  // register hg_feature_lock_lockVec_3_nextId
  reg [1 : 0] hg_feature_lock_lockVec_3_nextId;
  wire [1 : 0] hg_feature_lock_lockVec_3_nextId$D_IN;
  wire hg_feature_lock_lockVec_3_nextId$EN;

  // register hg_feature_lock_region
  reg hg_feature_lock_region;
  wire hg_feature_lock_region$D_IN, hg_feature_lock_region$EN;

  // register hg_h_lock_entryVec_0
  reg [10 : 0] hg_h_lock_entryVec_0;
  wire [10 : 0] hg_h_lock_entryVec_0$D_IN;
  wire hg_h_lock_entryVec_0$EN;

  // register hg_h_lock_entryVec_1
  reg [10 : 0] hg_h_lock_entryVec_1;
  wire [10 : 0] hg_h_lock_entryVec_1$D_IN;
  wire hg_h_lock_entryVec_1$EN;

  // register hg_h_lock_entryVec_2
  reg [10 : 0] hg_h_lock_entryVec_2;
  wire [10 : 0] hg_h_lock_entryVec_2$D_IN;
  wire hg_h_lock_entryVec_2$EN;

  // register hg_h_lock_entryVec_3
  reg [10 : 0] hg_h_lock_entryVec_3;
  wire [10 : 0] hg_h_lock_entryVec_3$D_IN;
  wire hg_h_lock_entryVec_3$EN;

  // register hg_h_lock_lockVec_0_cnt
  reg [1 : 0] hg_h_lock_lockVec_0_cnt;
  wire [1 : 0] hg_h_lock_lockVec_0_cnt$D_IN;
  wire hg_h_lock_lockVec_0_cnt$EN;

  // register hg_h_lock_lockVec_0_nextId
  reg [1 : 0] hg_h_lock_lockVec_0_nextId;
  wire [1 : 0] hg_h_lock_lockVec_0_nextId$D_IN;
  wire hg_h_lock_lockVec_0_nextId$EN;

  // register hg_h_lock_lockVec_1_cnt
  reg [1 : 0] hg_h_lock_lockVec_1_cnt;
  wire [1 : 0] hg_h_lock_lockVec_1_cnt$D_IN;
  wire hg_h_lock_lockVec_1_cnt$EN;

  // register hg_h_lock_lockVec_1_nextId
  reg [1 : 0] hg_h_lock_lockVec_1_nextId;
  wire [1 : 0] hg_h_lock_lockVec_1_nextId$D_IN;
  wire hg_h_lock_lockVec_1_nextId$EN;

  // register hg_h_lock_lockVec_2_cnt
  reg [1 : 0] hg_h_lock_lockVec_2_cnt;
  wire [1 : 0] hg_h_lock_lockVec_2_cnt$D_IN;
  wire hg_h_lock_lockVec_2_cnt$EN;

  // register hg_h_lock_lockVec_2_nextId
  reg [1 : 0] hg_h_lock_lockVec_2_nextId;
  wire [1 : 0] hg_h_lock_lockVec_2_nextId$D_IN;
  wire hg_h_lock_lockVec_2_nextId$EN;

  // register hg_h_lock_lockVec_3_cnt
  reg [1 : 0] hg_h_lock_lockVec_3_cnt;
  wire [1 : 0] hg_h_lock_lockVec_3_cnt$D_IN;
  wire hg_h_lock_lockVec_3_cnt$EN;

  // register hg_h_lock_lockVec_3_nextId
  reg [1 : 0] hg_h_lock_lockVec_3_nextId;
  wire [1 : 0] hg_h_lock_lockVec_3_nextId$D_IN;
  wire hg_h_lock_lockVec_3_nextId$EN;

  // register hg_h_lock_region
  reg hg_h_lock_region;
  wire hg_h_lock_region$D_IN, hg_h_lock_region$EN;

  // register hg_weight_lock_entryVec_0
  reg [10 : 0] hg_weight_lock_entryVec_0;
  wire [10 : 0] hg_weight_lock_entryVec_0$D_IN;
  wire hg_weight_lock_entryVec_0$EN;

  // register hg_weight_lock_entryVec_1
  reg [10 : 0] hg_weight_lock_entryVec_1;
  wire [10 : 0] hg_weight_lock_entryVec_1$D_IN;
  wire hg_weight_lock_entryVec_1$EN;

  // register hg_weight_lock_entryVec_2
  reg [10 : 0] hg_weight_lock_entryVec_2;
  wire [10 : 0] hg_weight_lock_entryVec_2$D_IN;
  wire hg_weight_lock_entryVec_2$EN;

  // register hg_weight_lock_entryVec_3
  reg [10 : 0] hg_weight_lock_entryVec_3;
  wire [10 : 0] hg_weight_lock_entryVec_3$D_IN;
  wire hg_weight_lock_entryVec_3$EN;

  // register hg_weight_lock_lockVec_0_cnt
  reg [1 : 0] hg_weight_lock_lockVec_0_cnt;
  wire [1 : 0] hg_weight_lock_lockVec_0_cnt$D_IN;
  wire hg_weight_lock_lockVec_0_cnt$EN;

  // register hg_weight_lock_lockVec_0_nextId
  reg [1 : 0] hg_weight_lock_lockVec_0_nextId;
  wire [1 : 0] hg_weight_lock_lockVec_0_nextId$D_IN;
  wire hg_weight_lock_lockVec_0_nextId$EN;

  // register hg_weight_lock_lockVec_1_cnt
  reg [1 : 0] hg_weight_lock_lockVec_1_cnt;
  wire [1 : 0] hg_weight_lock_lockVec_1_cnt$D_IN;
  wire hg_weight_lock_lockVec_1_cnt$EN;

  // register hg_weight_lock_lockVec_1_nextId
  reg [1 : 0] hg_weight_lock_lockVec_1_nextId;
  wire [1 : 0] hg_weight_lock_lockVec_1_nextId$D_IN;
  wire hg_weight_lock_lockVec_1_nextId$EN;

  // register hg_weight_lock_lockVec_2_cnt
  reg [1 : 0] hg_weight_lock_lockVec_2_cnt;
  wire [1 : 0] hg_weight_lock_lockVec_2_cnt$D_IN;
  wire hg_weight_lock_lockVec_2_cnt$EN;

  // register hg_weight_lock_lockVec_2_nextId
  reg [1 : 0] hg_weight_lock_lockVec_2_nextId;
  wire [1 : 0] hg_weight_lock_lockVec_2_nextId$D_IN;
  wire hg_weight_lock_lockVec_2_nextId$EN;

  // register hg_weight_lock_lockVec_3_cnt
  reg [1 : 0] hg_weight_lock_lockVec_3_cnt;
  wire [1 : 0] hg_weight_lock_lockVec_3_cnt$D_IN;
  wire hg_weight_lock_lockVec_3_cnt$EN;

  // register hg_weight_lock_lockVec_3_nextId
  reg [1 : 0] hg_weight_lock_lockVec_3_nextId;
  wire [1 : 0] hg_weight_lock_lockVec_3_nextId$D_IN;
  wire hg_weight_lock_lockVec_3_nextId$EN;

  // register hg_weight_lock_region
  reg hg_weight_lock_region;
  wire hg_weight_lock_region$D_IN, hg_weight_lock_region$EN;

  // ports of submodule f_rf
  wire [9 : 0] f_rf$ADDR_1,
	       f_rf$ADDR_2,
	       f_rf$ADDR_3,
	       f_rf$ADDR_4,
	       f_rf$ADDR_5,
	       f_rf$ADDR_IN,
	       f_rf$D_IN,
	       f_rf$D_OUT_1;
  wire f_rf$WE;

  // ports of submodule h_rf
  wire [31 : 0] h_rf$D_IN, h_rf$D_OUT_1;
  wire [9 : 0] h_rf$ADDR_1,
	       h_rf$ADDR_2,
	       h_rf$ADDR_3,
	       h_rf$ADDR_4,
	       h_rf$ADDR_5,
	       h_rf$ADDR_IN;
  wire h_rf$WE;

  // ports of submodule hg_feature_lock_lockVec_0_held
  wire [1 : 0] hg_feature_lock_lockVec_0_held$D_IN;
  wire hg_feature_lock_lockVec_0_held$CLR,
       hg_feature_lock_lockVec_0_held$DEQ,
       hg_feature_lock_lockVec_0_held$EMPTY_N,
       hg_feature_lock_lockVec_0_held$ENQ;

  // ports of submodule hg_feature_lock_lockVec_1_held
  wire [1 : 0] hg_feature_lock_lockVec_1_held$D_IN;
  wire hg_feature_lock_lockVec_1_held$CLR,
       hg_feature_lock_lockVec_1_held$DEQ,
       hg_feature_lock_lockVec_1_held$EMPTY_N,
       hg_feature_lock_lockVec_1_held$ENQ;

  // ports of submodule hg_feature_lock_lockVec_2_held
  wire [1 : 0] hg_feature_lock_lockVec_2_held$D_IN;
  wire hg_feature_lock_lockVec_2_held$CLR,
       hg_feature_lock_lockVec_2_held$DEQ,
       hg_feature_lock_lockVec_2_held$EMPTY_N,
       hg_feature_lock_lockVec_2_held$ENQ;

  // ports of submodule hg_feature_lock_lockVec_3_held
  wire [1 : 0] hg_feature_lock_lockVec_3_held$D_IN;
  wire hg_feature_lock_lockVec_3_held$CLR,
       hg_feature_lock_lockVec_3_held$DEQ,
       hg_feature_lock_lockVec_3_held$EMPTY_N,
       hg_feature_lock_lockVec_3_held$ENQ;

  // ports of submodule hg_fifo_Stage__1_TO_Stage__2
  wire [47 : 0] hg_fifo_Stage__1_TO_Stage__2$D_IN,
		hg_fifo_Stage__1_TO_Stage__2$D_OUT;
  wire hg_fifo_Stage__1_TO_Stage__2$CLR,
       hg_fifo_Stage__1_TO_Stage__2$DEQ,
       hg_fifo_Stage__1_TO_Stage__2$EMPTY_N,
       hg_fifo_Stage__1_TO_Stage__2$ENQ,
       hg_fifo_Stage__1_TO_Stage__2$FULL_N;

  // ports of submodule hg_fifo_Stage__2_TO_Stage__3
  wire [2 : 0] hg_fifo_Stage__2_TO_Stage__3$D_IN;
  wire hg_fifo_Stage__2_TO_Stage__3$CLR,
       hg_fifo_Stage__2_TO_Stage__3$DEQ,
       hg_fifo_Stage__2_TO_Stage__3$EMPTY_N,
       hg_fifo_Stage__2_TO_Stage__3$ENQ,
       hg_fifo_Stage__2_TO_Stage__3$FULL_N;

  // ports of submodule hg_fifo_Start_TO_Stage__1
  wire [44 : 0] hg_fifo_Start_TO_Stage__1$D_IN,
		hg_fifo_Start_TO_Stage__1$D_OUT;
  wire hg_fifo_Start_TO_Stage__1$CLR,
       hg_fifo_Start_TO_Stage__1$DEQ,
       hg_fifo_Start_TO_Stage__1$EMPTY_N,
       hg_fifo_Start_TO_Stage__1$ENQ,
       hg_fifo_Start_TO_Stage__1$FULL_N;

  // ports of submodule hg_fifo__input__TO_Start
  wire [12 : 0] hg_fifo__input__TO_Start$D_IN, hg_fifo__input__TO_Start$D_OUT;
  wire hg_fifo__input__TO_Start$CLR,
       hg_fifo__input__TO_Start$DEQ,
       hg_fifo__input__TO_Start$EMPTY_N,
       hg_fifo__input__TO_Start$ENQ,
       hg_fifo__input__TO_Start$FULL_N;

  // ports of submodule hg_h_lock_lockVec_0_held
  wire [1 : 0] hg_h_lock_lockVec_0_held$D_IN, hg_h_lock_lockVec_0_held$D_OUT;
  wire hg_h_lock_lockVec_0_held$CLR,
       hg_h_lock_lockVec_0_held$DEQ,
       hg_h_lock_lockVec_0_held$EMPTY_N,
       hg_h_lock_lockVec_0_held$ENQ,
       hg_h_lock_lockVec_0_held$FULL_N;

  // ports of submodule hg_h_lock_lockVec_1_held
  wire [1 : 0] hg_h_lock_lockVec_1_held$D_IN, hg_h_lock_lockVec_1_held$D_OUT;
  wire hg_h_lock_lockVec_1_held$CLR,
       hg_h_lock_lockVec_1_held$DEQ,
       hg_h_lock_lockVec_1_held$EMPTY_N,
       hg_h_lock_lockVec_1_held$ENQ,
       hg_h_lock_lockVec_1_held$FULL_N;

  // ports of submodule hg_h_lock_lockVec_2_held
  wire [1 : 0] hg_h_lock_lockVec_2_held$D_IN, hg_h_lock_lockVec_2_held$D_OUT;
  wire hg_h_lock_lockVec_2_held$CLR,
       hg_h_lock_lockVec_2_held$DEQ,
       hg_h_lock_lockVec_2_held$EMPTY_N,
       hg_h_lock_lockVec_2_held$ENQ,
       hg_h_lock_lockVec_2_held$FULL_N;

  // ports of submodule hg_h_lock_lockVec_3_held
  wire [1 : 0] hg_h_lock_lockVec_3_held$D_IN, hg_h_lock_lockVec_3_held$D_OUT;
  wire hg_h_lock_lockVec_3_held$CLR,
       hg_h_lock_lockVec_3_held$DEQ,
       hg_h_lock_lockVec_3_held$EMPTY_N,
       hg_h_lock_lockVec_3_held$ENQ,
       hg_h_lock_lockVec_3_held$FULL_N;

  // ports of submodule hg_outputQueue
  wire [3 : 0] hg_outputQueue$D_IN, hg_outputQueue$D_OUT;
  wire hg_outputQueue$CLR,
       hg_outputQueue$DEQ,
       hg_outputQueue$EMPTY_N,
       hg_outputQueue$ENQ,
       hg_outputQueue$FULL_N;

  // ports of submodule hg_weight_lock_lockVec_0_held
  wire [1 : 0] hg_weight_lock_lockVec_0_held$D_IN;
  wire hg_weight_lock_lockVec_0_held$CLR,
       hg_weight_lock_lockVec_0_held$DEQ,
       hg_weight_lock_lockVec_0_held$EMPTY_N,
       hg_weight_lock_lockVec_0_held$ENQ;

  // ports of submodule hg_weight_lock_lockVec_1_held
  wire [1 : 0] hg_weight_lock_lockVec_1_held$D_IN;
  wire hg_weight_lock_lockVec_1_held$CLR,
       hg_weight_lock_lockVec_1_held$DEQ,
       hg_weight_lock_lockVec_1_held$EMPTY_N,
       hg_weight_lock_lockVec_1_held$ENQ;

  // ports of submodule hg_weight_lock_lockVec_2_held
  wire [1 : 0] hg_weight_lock_lockVec_2_held$D_IN;
  wire hg_weight_lock_lockVec_2_held$CLR,
       hg_weight_lock_lockVec_2_held$DEQ,
       hg_weight_lock_lockVec_2_held$EMPTY_N,
       hg_weight_lock_lockVec_2_held$ENQ;

  // ports of submodule hg_weight_lock_lockVec_3_held
  wire [1 : 0] hg_weight_lock_lockVec_3_held$D_IN;
  wire hg_weight_lock_lockVec_3_held$CLR,
       hg_weight_lock_lockVec_3_held$DEQ,
       hg_weight_lock_lockVec_3_held$EMPTY_N,
       hg_weight_lock_lockVec_3_held$ENQ;

  // ports of submodule w_rf
  wire [31 : 0] w_rf$D_IN, w_rf$D_OUT_1;
  wire [9 : 0] w_rf$ADDR_1,
	       w_rf$ADDR_2,
	       w_rf$ADDR_3,
	       w_rf$ADDR_4,
	       w_rf$ADDR_5,
	       w_rf$ADDR_IN;
  wire w_rf$WE;

  // rule scheduling signals
  wire CAN_FIRE_RL_hg_s_Start_execute,
       WILL_FIRE_RL_hg_h_lock_freelock,
       WILL_FIRE_RL_hg_s_Stage__1_execute,
       WILL_FIRE_RL_hg_s_Stage__2_execute,
       WILL_FIRE_RL_hg_s_Start_execute;

  // inputs to muxes for submodule ports
  wire [12 : 0] MUX_hg_fifo__input__TO_Start$enq_1__VAL_1,
		MUX_hg_fifo__input__TO_Start$enq_1__VAL_2;
  wire [10 : 0] MUX_hg_h_lock_entryVec_0$write_1__VAL_2;
  wire MUX_hg_busyReg$write_1__SEL_1,
       MUX_hg_fifo__input__TO_Start$enq_1__SEL_1,
       MUX_hg_h_lock_entryVec_0$write_1__SEL_1,
       MUX_hg_h_lock_entryVec_1$write_1__SEL_1,
       MUX_hg_h_lock_entryVec_2$write_1__SEL_1,
       MUX_hg_h_lock_entryVec_3$write_1__SEL_1;

  // remaining internal signals
  reg [1 : 0] SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d275,
	      SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d276;
  reg CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d205,
      CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d313,
      CASE_IF_hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_ETC___d216,
      SEL_ARR_NOT_hg_feature_lock_lockVec_0_held_not_ETC___d108,
      SEL_ARR_NOT_hg_h_lock_lockVec_0_held_notEmpty__ETC___d229,
      SEL_ARR_NOT_hg_weight_lock_lockVec_0_held_notE_ETC___d149;
  wire [31 : 0] h_rf_sub_hg_fifo_Start_TO_Stage__1_first__68_B_ETC___d235;
  wire [1 : 0] IF_NOT_hg_feature_lock_entryVec_0_BIT_10_7_OR__ETC___d105,
	       IF_NOT_hg_h_lock_entryVec_0_4_BIT_10_5_90_OR_N_ETC___d198,
	       IF_NOT_hg_h_lock_entryVec_0_4_BIT_10_5_90_OR_N_ETC___d306,
	       IF_NOT_hg_weight_lock_entryVec_0_4_BIT_10_5_38_ETC___d146,
	       IF_hg_fifo_Stage__1_TO_Stage__2_first__83_BIT__ETC___d321,
	       IF_hg_h_lock_entryVec_1_9_BIT_10_0_AND_hg_h_lo_ETC___d214,
	       IF_hg_h_lock_entryVec_3_9_BIT_10_0_AND_hg_h_lo_ETC___d277,
	       x__h10519,
	       x__h7468,
	       x__h7932,
	       x__h8976,
	       x__h9842;
  wire IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d238,
       IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d244,
       IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d250,
       IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d256,
       IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d328,
       IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d333,
       IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d338,
       IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d343,
       IF_hg_fifo__input__TO_Start_first__3_BITS_12_T_ETC___d70,
       IF_hg_h_lock_entryVec_3_9_BIT_10_0_AND_hg_h_lo_ETC___d218,
       IF_hg_h_lock_entryVec_3_9_BIT_10_0_AND_hg_h_lo_ETC___d230,
       NOT_hg_feature_lock_entryVec_1_BIT_10_0_4_OR_N_ETC___d103,
       NOT_hg_feature_lock_entryVec_2_4_BIT_10_5_1_OR_ETC___d101,
       NOT_hg_fifo__input__TO_Start_first__3_BITS_12__ETC___d114,
       NOT_hg_fifo__input__TO_Start_first__3_BITS_12__ETC___d155,
       NOT_hg_h_lock_entryVec_1_9_BIT_10_0_87_OR_NOT__ETC___d196,
       NOT_hg_h_lock_entryVec_1_9_BIT_10_0_87_OR_NOT__ETC___d303,
       NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_NOT__ETC___d194,
       NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_NOT__ETC___d298,
       NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d226,
       NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265,
       NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d314,
       NOT_hg_weight_lock_entryVec_1_9_BIT_10_0_35_OR_ETC___d144,
       NOT_hg_weight_lock_entryVec_2_4_BIT_10_5_32_OR_ETC___d142,
       hg_feature_lock_entryVec_0_BITS_9_TO_0_4_EQ_hg_ETC___d85,
       hg_feature_lock_entryVec_1_BITS_9_TO_0_1_EQ_hg_ETC___d82,
       hg_feature_lock_entryVec_2_4_BITS_9_TO_0_8_EQ__ETC___d79,
       hg_feature_lock_entryVec_2_4_BIT_10_5_AND_hg_f_ETC___d88,
       hg_fifo__input__TO_Start_first__3_BITS_12_TO_3_ETC___d65,
       hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d179,
       hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d294,
       hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d176,
       hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d291,
       hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d173,
       hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d288,
       hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d182,
       hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d326,
       hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170,
       hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d285,
       hg_weight_lock_entryVec_0_4_BITS_9_TO_0_25_EQ__ETC___d126,
       hg_weight_lock_entryVec_1_9_BITS_9_TO_0_22_EQ__ETC___d123,
       hg_weight_lock_entryVec_2_4_BITS_9_TO_0_19_EQ__ETC___d120,
       hg_weight_lock_entryVec_2_4_BIT_10_5_AND_hg_we_ETC___d129;

  // actionvalue method _inthg_req
  assign _inthg_req = hg ;
  assign RDY__inthg_req = !hg_busyReg && hg_fifo__input__TO_Start$FULL_N ;

  // action method _inthg_resp
  assign RDY__inthg_resp = hg_outputQueue$EMPTY_N ;

  // value method _inthg_checkHandle
  assign _inthg_checkHandle =
	     _inthg_checkHandle_handle == hg_outputQueue$D_OUT[3:1] ;
  assign RDY__inthg_checkHandle = hg_outputQueue$EMPTY_N ;

  // value method _inthg_peek
  assign _inthg_peek = hg_outputQueue$D_OUT[0] ;
  assign RDY__inthg_peek = hg_outputQueue$EMPTY_N ;

  // submodule f_rf
  RegFileLoad #(.file("f"),
		.addr_width(32'd10),
		.data_width(32'd10),
		.lo(10'h0),
		.hi(10'd1023),
		.binary(1'd0)) f_rf(.CLK(CLK),
				    .ADDR_1(f_rf$ADDR_1),
				    .ADDR_2(f_rf$ADDR_2),
				    .ADDR_3(f_rf$ADDR_3),
				    .ADDR_4(f_rf$ADDR_4),
				    .ADDR_5(f_rf$ADDR_5),
				    .ADDR_IN(f_rf$ADDR_IN),
				    .D_IN(f_rf$D_IN),
				    .WE(f_rf$WE),
				    .D_OUT_1(f_rf$D_OUT_1),
				    .D_OUT_2(),
				    .D_OUT_3(),
				    .D_OUT_4(),
				    .D_OUT_5());

  // submodule h_rf
  RegFileLoad #(.file("h"),
		.addr_width(32'd10),
		.data_width(32'd32),
		.lo(10'h0),
		.hi(10'd1023),
		.binary(1'd0)) h_rf(.CLK(CLK),
				    .ADDR_1(h_rf$ADDR_1),
				    .ADDR_2(h_rf$ADDR_2),
				    .ADDR_3(h_rf$ADDR_3),
				    .ADDR_4(h_rf$ADDR_4),
				    .ADDR_5(h_rf$ADDR_5),
				    .ADDR_IN(h_rf$ADDR_IN),
				    .D_IN(h_rf$D_IN),
				    .WE(h_rf$WE),
				    .D_OUT_1(h_rf$D_OUT_1),
				    .D_OUT_2(),
				    .D_OUT_3(),
				    .D_OUT_4(),
				    .D_OUT_5());

  // submodule hg_feature_lock_lockVec_0_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_feature_lock_lockVec_0_held(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hg_feature_lock_lockVec_0_held$D_IN),
							      .ENQ(hg_feature_lock_lockVec_0_held$ENQ),
							      .DEQ(hg_feature_lock_lockVec_0_held$DEQ),
							      .CLR(hg_feature_lock_lockVec_0_held$CLR),
							      .D_OUT(),
							      .FULL_N(),
							      .EMPTY_N(hg_feature_lock_lockVec_0_held$EMPTY_N));

  // submodule hg_feature_lock_lockVec_1_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_feature_lock_lockVec_1_held(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hg_feature_lock_lockVec_1_held$D_IN),
							      .ENQ(hg_feature_lock_lockVec_1_held$ENQ),
							      .DEQ(hg_feature_lock_lockVec_1_held$DEQ),
							      .CLR(hg_feature_lock_lockVec_1_held$CLR),
							      .D_OUT(),
							      .FULL_N(),
							      .EMPTY_N(hg_feature_lock_lockVec_1_held$EMPTY_N));

  // submodule hg_feature_lock_lockVec_2_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_feature_lock_lockVec_2_held(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hg_feature_lock_lockVec_2_held$D_IN),
							      .ENQ(hg_feature_lock_lockVec_2_held$ENQ),
							      .DEQ(hg_feature_lock_lockVec_2_held$DEQ),
							      .CLR(hg_feature_lock_lockVec_2_held$CLR),
							      .D_OUT(),
							      .FULL_N(),
							      .EMPTY_N(hg_feature_lock_lockVec_2_held$EMPTY_N));

  // submodule hg_feature_lock_lockVec_3_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_feature_lock_lockVec_3_held(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hg_feature_lock_lockVec_3_held$D_IN),
							      .ENQ(hg_feature_lock_lockVec_3_held$ENQ),
							      .DEQ(hg_feature_lock_lockVec_3_held$DEQ),
							      .CLR(hg_feature_lock_lockVec_3_held$CLR),
							      .D_OUT(),
							      .FULL_N(),
							      .EMPTY_N(hg_feature_lock_lockVec_3_held$EMPTY_N));

  // submodule hg_fifo_Stage__1_TO_Stage__2
  FIFO2 #(.width(32'd48),
	  .guarded(32'd1)) hg_fifo_Stage__1_TO_Stage__2(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hg_fifo_Stage__1_TO_Stage__2$D_IN),
							.ENQ(hg_fifo_Stage__1_TO_Stage__2$ENQ),
							.DEQ(hg_fifo_Stage__1_TO_Stage__2$DEQ),
							.CLR(hg_fifo_Stage__1_TO_Stage__2$CLR),
							.D_OUT(hg_fifo_Stage__1_TO_Stage__2$D_OUT),
							.FULL_N(hg_fifo_Stage__1_TO_Stage__2$FULL_N),
							.EMPTY_N(hg_fifo_Stage__1_TO_Stage__2$EMPTY_N));

  // submodule hg_fifo_Stage__2_TO_Stage__3
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) hg_fifo_Stage__2_TO_Stage__3(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hg_fifo_Stage__2_TO_Stage__3$D_IN),
							.ENQ(hg_fifo_Stage__2_TO_Stage__3$ENQ),
							.DEQ(hg_fifo_Stage__2_TO_Stage__3$DEQ),
							.CLR(hg_fifo_Stage__2_TO_Stage__3$CLR),
							.D_OUT(),
							.FULL_N(hg_fifo_Stage__2_TO_Stage__3$FULL_N),
							.EMPTY_N(hg_fifo_Stage__2_TO_Stage__3$EMPTY_N));

  // submodule hg_fifo_Start_TO_Stage__1
  FIFO2 #(.width(32'd45),
	  .guarded(32'd1)) hg_fifo_Start_TO_Stage__1(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(hg_fifo_Start_TO_Stage__1$D_IN),
						     .ENQ(hg_fifo_Start_TO_Stage__1$ENQ),
						     .DEQ(hg_fifo_Start_TO_Stage__1$DEQ),
						     .CLR(hg_fifo_Start_TO_Stage__1$CLR),
						     .D_OUT(hg_fifo_Start_TO_Stage__1$D_OUT),
						     .FULL_N(hg_fifo_Start_TO_Stage__1$FULL_N),
						     .EMPTY_N(hg_fifo_Start_TO_Stage__1$EMPTY_N));

  // submodule hg_fifo__input__TO_Start
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) hg_fifo__input__TO_Start(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(hg_fifo__input__TO_Start$D_IN),
						    .ENQ(hg_fifo__input__TO_Start$ENQ),
						    .DEQ(hg_fifo__input__TO_Start$DEQ),
						    .CLR(hg_fifo__input__TO_Start$CLR),
						    .D_OUT(hg_fifo__input__TO_Start$D_OUT),
						    .FULL_N(hg_fifo__input__TO_Start$FULL_N),
						    .EMPTY_N(hg_fifo__input__TO_Start$EMPTY_N));

  // submodule hg_h_lock_lockVec_0_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_h_lock_lockVec_0_held(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hg_h_lock_lockVec_0_held$D_IN),
							.ENQ(hg_h_lock_lockVec_0_held$ENQ),
							.DEQ(hg_h_lock_lockVec_0_held$DEQ),
							.CLR(hg_h_lock_lockVec_0_held$CLR),
							.D_OUT(hg_h_lock_lockVec_0_held$D_OUT),
							.FULL_N(hg_h_lock_lockVec_0_held$FULL_N),
							.EMPTY_N(hg_h_lock_lockVec_0_held$EMPTY_N));

  // submodule hg_h_lock_lockVec_1_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_h_lock_lockVec_1_held(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hg_h_lock_lockVec_1_held$D_IN),
							.ENQ(hg_h_lock_lockVec_1_held$ENQ),
							.DEQ(hg_h_lock_lockVec_1_held$DEQ),
							.CLR(hg_h_lock_lockVec_1_held$CLR),
							.D_OUT(hg_h_lock_lockVec_1_held$D_OUT),
							.FULL_N(hg_h_lock_lockVec_1_held$FULL_N),
							.EMPTY_N(hg_h_lock_lockVec_1_held$EMPTY_N));

  // submodule hg_h_lock_lockVec_2_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_h_lock_lockVec_2_held(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hg_h_lock_lockVec_2_held$D_IN),
							.ENQ(hg_h_lock_lockVec_2_held$ENQ),
							.DEQ(hg_h_lock_lockVec_2_held$DEQ),
							.CLR(hg_h_lock_lockVec_2_held$CLR),
							.D_OUT(hg_h_lock_lockVec_2_held$D_OUT),
							.FULL_N(hg_h_lock_lockVec_2_held$FULL_N),
							.EMPTY_N(hg_h_lock_lockVec_2_held$EMPTY_N));

  // submodule hg_h_lock_lockVec_3_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_h_lock_lockVec_3_held(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hg_h_lock_lockVec_3_held$D_IN),
							.ENQ(hg_h_lock_lockVec_3_held$ENQ),
							.DEQ(hg_h_lock_lockVec_3_held$DEQ),
							.CLR(hg_h_lock_lockVec_3_held$CLR),
							.D_OUT(hg_h_lock_lockVec_3_held$D_OUT),
							.FULL_N(hg_h_lock_lockVec_3_held$FULL_N),
							.EMPTY_N(hg_h_lock_lockVec_3_held$EMPTY_N));

  // submodule hg_outputQueue
  FIFO2 #(.width(32'd4), .guarded(32'd1)) hg_outputQueue(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(hg_outputQueue$D_IN),
							 .ENQ(hg_outputQueue$ENQ),
							 .DEQ(hg_outputQueue$DEQ),
							 .CLR(hg_outputQueue$CLR),
							 .D_OUT(hg_outputQueue$D_OUT),
							 .FULL_N(hg_outputQueue$FULL_N),
							 .EMPTY_N(hg_outputQueue$EMPTY_N));

  // submodule hg_weight_lock_lockVec_0_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_weight_lock_lockVec_0_held(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(hg_weight_lock_lockVec_0_held$D_IN),
							     .ENQ(hg_weight_lock_lockVec_0_held$ENQ),
							     .DEQ(hg_weight_lock_lockVec_0_held$DEQ),
							     .CLR(hg_weight_lock_lockVec_0_held$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N(hg_weight_lock_lockVec_0_held$EMPTY_N));

  // submodule hg_weight_lock_lockVec_1_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_weight_lock_lockVec_1_held(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(hg_weight_lock_lockVec_1_held$D_IN),
							     .ENQ(hg_weight_lock_lockVec_1_held$ENQ),
							     .DEQ(hg_weight_lock_lockVec_1_held$DEQ),
							     .CLR(hg_weight_lock_lockVec_1_held$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N(hg_weight_lock_lockVec_1_held$EMPTY_N));

  // submodule hg_weight_lock_lockVec_2_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_weight_lock_lockVec_2_held(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(hg_weight_lock_lockVec_2_held$D_IN),
							     .ENQ(hg_weight_lock_lockVec_2_held$ENQ),
							     .DEQ(hg_weight_lock_lockVec_2_held$DEQ),
							     .CLR(hg_weight_lock_lockVec_2_held$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N(hg_weight_lock_lockVec_2_held$EMPTY_N));

  // submodule hg_weight_lock_lockVec_3_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) hg_weight_lock_lockVec_3_held(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(hg_weight_lock_lockVec_3_held$D_IN),
							     .ENQ(hg_weight_lock_lockVec_3_held$ENQ),
							     .DEQ(hg_weight_lock_lockVec_3_held$DEQ),
							     .CLR(hg_weight_lock_lockVec_3_held$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N(hg_weight_lock_lockVec_3_held$EMPTY_N));

  // submodule w_rf
  RegFileLoad #(.file("w"),
		.addr_width(32'd10),
		.data_width(32'd32),
		.lo(10'h0),
		.hi(10'd1023),
		.binary(1'd0)) w_rf(.CLK(CLK),
				    .ADDR_1(w_rf$ADDR_1),
				    .ADDR_2(w_rf$ADDR_2),
				    .ADDR_3(w_rf$ADDR_3),
				    .ADDR_4(w_rf$ADDR_4),
				    .ADDR_5(w_rf$ADDR_5),
				    .ADDR_IN(w_rf$ADDR_IN),
				    .D_IN(w_rf$D_IN),
				    .WE(w_rf$WE),
				    .D_OUT_1(w_rf$D_OUT_1),
				    .D_OUT_2(),
				    .D_OUT_3(),
				    .D_OUT_4(),
				    .D_OUT_5());

  // rule RL_hg_s_Start_execute
  assign CAN_FIRE_RL_hg_s_Start_execute =
	     hg_fifo__input__TO_Start$EMPTY_N &&
	     IF_hg_fifo__input__TO_Start_first__3_BITS_12_T_ETC___d70 &&
	     (hg_fifo__input__TO_Start_first__3_BITS_12_TO_3_ETC___d65 ||
	      hg_busyReg) &&
	     NOT_hg_fifo__input__TO_Start_first__3_BITS_12__ETC___d114 &&
	     NOT_hg_fifo__input__TO_Start_first__3_BITS_12__ETC___d155 ;
  assign WILL_FIRE_RL_hg_s_Start_execute =
	     CAN_FIRE_RL_hg_s_Start_execute && !EN__inthg_req ;

  // rule RL_hg_s_Stage__1_execute
  assign WILL_FIRE_RL_hg_s_Stage__1_execute =
	     hg_fifo_Start_TO_Stage__1$EMPTY_N &&
	     hg_fifo_Stage__1_TO_Stage__2$FULL_N &&
	     IF_hg_h_lock_entryVec_3_9_BIT_10_0_AND_hg_h_lo_ETC___d218 &&
	     (hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170 ||
	      hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d173 ||
	      hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d176 ||
	      hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d179 ||
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d226) &&
	     IF_hg_h_lock_entryVec_3_9_BIT_10_0_AND_hg_h_lo_ETC___d230 ;

  // rule RL_hg_s_Stage__2_execute
  assign WILL_FIRE_RL_hg_s_Stage__2_execute =
	     hg_fifo_Stage__1_TO_Stage__2$EMPTY_N &&
	     hg_fifo_Stage__2_TO_Stage__3$FULL_N &&
	     NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d314 &&
	     !WILL_FIRE_RL_hg_s_Stage__1_execute ;

  // rule RL_hg_h_lock_freelock
  assign WILL_FIRE_RL_hg_h_lock_freelock =
	     !WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     !WILL_FIRE_RL_hg_s_Stage__1_execute ;

  // inputs to muxes for submodule ports
  assign MUX_hg_busyReg$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Start_execute &&
	     !hg_fifo__input__TO_Start_first__3_BITS_12_TO_3_ETC___d65 ;
  assign MUX_hg_fifo__input__TO_Start$enq_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Start_execute &&
	     hg_fifo__input__TO_Start_first__3_BITS_12_TO_3_ETC___d65 ;
  assign MUX_hg_h_lock_entryVec_0$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_h_lock_freelock &&
	     !hg_h_lock_lockVec_0_held$EMPTY_N &&
	     hg_h_lock_entryVec_0[10] ;
  assign MUX_hg_h_lock_entryVec_1$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_h_lock_freelock &&
	     !hg_h_lock_lockVec_1_held$EMPTY_N &&
	     hg_h_lock_entryVec_1[10] ;
  assign MUX_hg_h_lock_entryVec_2$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_h_lock_freelock &&
	     !hg_h_lock_lockVec_2_held$EMPTY_N &&
	     hg_h_lock_entryVec_2[10] ;
  assign MUX_hg_h_lock_entryVec_3$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_h_lock_freelock &&
	     !hg_h_lock_lockVec_3_held$EMPTY_N &&
	     hg_h_lock_entryVec_3[10] ;
  assign MUX_hg_fifo__input__TO_Start$enq_1__VAL_1 =
	     { hg_fifo__input__TO_Start$D_OUT[12:3] + 10'd1,
	       hg_fifo__input__TO_Start$D_OUT[2:0] } ;
  assign MUX_hg_fifo__input__TO_Start$enq_1__VAL_2 =
	     { _inthg_req_counter, hg } ;
  assign MUX_hg_h_lock_entryVec_0$write_1__VAL_2 =
	     { 1'd1, hg_fifo_Start_TO_Stage__1$D_OUT[44:35] } ;

  // register hg
  assign hg$D_IN = hg + 3'd1 ;
  assign hg$EN = EN__inthg_req ;

  // register hg_busyReg
  assign hg_busyReg$D_IN = !MUX_hg_busyReg$write_1__SEL_1 ;
  assign hg_busyReg$EN =
	     WILL_FIRE_RL_hg_s_Start_execute &&
	     !hg_fifo__input__TO_Start_first__3_BITS_12_TO_3_ETC___d65 ||
	     EN__inthg_req ;

  // register hg_feature_lock_entryVec_0
  assign hg_feature_lock_entryVec_0$D_IN = 11'd682 ;
  assign hg_feature_lock_entryVec_0$EN =
	     !hg_feature_lock_lockVec_0_held$EMPTY_N &&
	     hg_feature_lock_entryVec_0[10] ;

  // register hg_feature_lock_entryVec_1
  assign hg_feature_lock_entryVec_1$D_IN = 11'd682 ;
  assign hg_feature_lock_entryVec_1$EN =
	     !hg_feature_lock_lockVec_1_held$EMPTY_N &&
	     hg_feature_lock_entryVec_1[10] ;

  // register hg_feature_lock_entryVec_2
  assign hg_feature_lock_entryVec_2$D_IN = 11'd682 ;
  assign hg_feature_lock_entryVec_2$EN =
	     !hg_feature_lock_lockVec_2_held$EMPTY_N &&
	     hg_feature_lock_entryVec_2[10] ;

  // register hg_feature_lock_entryVec_3
  assign hg_feature_lock_entryVec_3$D_IN = 11'd682 ;
  assign hg_feature_lock_entryVec_3$EN =
	     !hg_feature_lock_lockVec_3_held$EMPTY_N &&
	     hg_feature_lock_entryVec_3[10] ;

  // register hg_feature_lock_lockVec_0_cnt
  assign hg_feature_lock_lockVec_0_cnt$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_0_cnt$EN = 1'b0 ;

  // register hg_feature_lock_lockVec_0_nextId
  assign hg_feature_lock_lockVec_0_nextId$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_0_nextId$EN = 1'b0 ;

  // register hg_feature_lock_lockVec_1_cnt
  assign hg_feature_lock_lockVec_1_cnt$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_1_cnt$EN = 1'b0 ;

  // register hg_feature_lock_lockVec_1_nextId
  assign hg_feature_lock_lockVec_1_nextId$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_1_nextId$EN = 1'b0 ;

  // register hg_feature_lock_lockVec_2_cnt
  assign hg_feature_lock_lockVec_2_cnt$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_2_cnt$EN = 1'b0 ;

  // register hg_feature_lock_lockVec_2_nextId
  assign hg_feature_lock_lockVec_2_nextId$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_2_nextId$EN = 1'b0 ;

  // register hg_feature_lock_lockVec_3_cnt
  assign hg_feature_lock_lockVec_3_cnt$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_3_cnt$EN = 1'b0 ;

  // register hg_feature_lock_lockVec_3_nextId
  assign hg_feature_lock_lockVec_3_nextId$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_3_nextId$EN = 1'b0 ;

  // register hg_feature_lock_region
  assign hg_feature_lock_region$D_IN = 1'b0 ;
  assign hg_feature_lock_region$EN = 1'b0 ;

  // register hg_h_lock_entryVec_0
  assign hg_h_lock_entryVec_0$D_IN =
	     MUX_hg_h_lock_entryVec_0$write_1__SEL_1 ?
	       11'd682 :
	       MUX_hg_h_lock_entryVec_0$write_1__VAL_2 ;
  assign hg_h_lock_entryVec_0$EN =
	     WILL_FIRE_RL_hg_h_lock_freelock &&
	     !hg_h_lock_lockVec_0_held$EMPTY_N &&
	     hg_h_lock_entryVec_0[10] ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h9842 == 2'd0 &&
	     NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265 ;

  // register hg_h_lock_entryVec_1
  assign hg_h_lock_entryVec_1$D_IN =
	     MUX_hg_h_lock_entryVec_1$write_1__SEL_1 ?
	       11'd682 :
	       MUX_hg_h_lock_entryVec_0$write_1__VAL_2 ;
  assign hg_h_lock_entryVec_1$EN =
	     WILL_FIRE_RL_hg_h_lock_freelock &&
	     !hg_h_lock_lockVec_1_held$EMPTY_N &&
	     hg_h_lock_entryVec_1[10] ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h9842 == 2'd1 &&
	     NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265 ;

  // register hg_h_lock_entryVec_2
  assign hg_h_lock_entryVec_2$D_IN =
	     MUX_hg_h_lock_entryVec_2$write_1__SEL_1 ?
	       11'd682 :
	       MUX_hg_h_lock_entryVec_0$write_1__VAL_2 ;
  assign hg_h_lock_entryVec_2$EN =
	     WILL_FIRE_RL_hg_h_lock_freelock &&
	     !hg_h_lock_lockVec_2_held$EMPTY_N &&
	     hg_h_lock_entryVec_2[10] ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h9842 == 2'd2 &&
	     NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265 ;

  // register hg_h_lock_entryVec_3
  assign hg_h_lock_entryVec_3$D_IN =
	     MUX_hg_h_lock_entryVec_3$write_1__SEL_1 ?
	       11'd682 :
	       MUX_hg_h_lock_entryVec_0$write_1__VAL_2 ;
  assign hg_h_lock_entryVec_3$EN =
	     WILL_FIRE_RL_hg_h_lock_freelock &&
	     !hg_h_lock_lockVec_3_held$EMPTY_N &&
	     hg_h_lock_entryVec_3[10] ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h9842 == 2'd3 &&
	     NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265 ;

  // register hg_h_lock_lockVec_0_cnt
  assign hg_h_lock_lockVec_0_cnt$D_IN = hg_h_lock_lockVec_0_cnt + 2'd1 ;
  assign hg_h_lock_lockVec_0_cnt$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d238 ||
	      x__h9842 == 2'd0 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;

  // register hg_h_lock_lockVec_0_nextId
  assign hg_h_lock_lockVec_0_nextId$D_IN = hg_h_lock_lockVec_0_nextId + 2'd1 ;
  assign hg_h_lock_lockVec_0_nextId$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d238 ||
	      x__h9842 == 2'd0 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;

  // register hg_h_lock_lockVec_1_cnt
  assign hg_h_lock_lockVec_1_cnt$D_IN = hg_h_lock_lockVec_1_cnt + 2'd1 ;
  assign hg_h_lock_lockVec_1_cnt$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d244 ||
	      x__h9842 == 2'd1 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;

  // register hg_h_lock_lockVec_1_nextId
  assign hg_h_lock_lockVec_1_nextId$D_IN = hg_h_lock_lockVec_1_nextId + 2'd1 ;
  assign hg_h_lock_lockVec_1_nextId$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d244 ||
	      x__h9842 == 2'd1 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;

  // register hg_h_lock_lockVec_2_cnt
  assign hg_h_lock_lockVec_2_cnt$D_IN = hg_h_lock_lockVec_2_cnt + 2'd1 ;
  assign hg_h_lock_lockVec_2_cnt$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d250 ||
	      x__h9842 == 2'd2 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;

  // register hg_h_lock_lockVec_2_nextId
  assign hg_h_lock_lockVec_2_nextId$D_IN = hg_h_lock_lockVec_2_nextId + 2'd1 ;
  assign hg_h_lock_lockVec_2_nextId$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d250 ||
	      x__h9842 == 2'd2 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;

  // register hg_h_lock_lockVec_3_cnt
  assign hg_h_lock_lockVec_3_cnt$D_IN = hg_h_lock_lockVec_3_cnt + 2'd1 ;
  assign hg_h_lock_lockVec_3_cnt$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d256 ||
	      x__h9842 == 2'd3 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;

  // register hg_h_lock_lockVec_3_nextId
  assign hg_h_lock_lockVec_3_nextId$D_IN = hg_h_lock_lockVec_3_nextId + 2'd1 ;
  assign hg_h_lock_lockVec_3_nextId$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d256 ||
	      x__h9842 == 2'd3 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;

  // register hg_h_lock_region
  assign hg_h_lock_region$D_IN = 1'b0 ;
  assign hg_h_lock_region$EN = 1'b0 ;

  // register hg_weight_lock_entryVec_0
  assign hg_weight_lock_entryVec_0$D_IN = 11'd682 ;
  assign hg_weight_lock_entryVec_0$EN =
	     !hg_weight_lock_lockVec_0_held$EMPTY_N &&
	     hg_weight_lock_entryVec_0[10] ;

  // register hg_weight_lock_entryVec_1
  assign hg_weight_lock_entryVec_1$D_IN = 11'd682 ;
  assign hg_weight_lock_entryVec_1$EN =
	     !hg_weight_lock_lockVec_1_held$EMPTY_N &&
	     hg_weight_lock_entryVec_1[10] ;

  // register hg_weight_lock_entryVec_2
  assign hg_weight_lock_entryVec_2$D_IN = 11'd682 ;
  assign hg_weight_lock_entryVec_2$EN =
	     !hg_weight_lock_lockVec_2_held$EMPTY_N &&
	     hg_weight_lock_entryVec_2[10] ;

  // register hg_weight_lock_entryVec_3
  assign hg_weight_lock_entryVec_3$D_IN = 11'd682 ;
  assign hg_weight_lock_entryVec_3$EN =
	     !hg_weight_lock_lockVec_3_held$EMPTY_N &&
	     hg_weight_lock_entryVec_3[10] ;

  // register hg_weight_lock_lockVec_0_cnt
  assign hg_weight_lock_lockVec_0_cnt$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_0_cnt$EN = 1'b0 ;

  // register hg_weight_lock_lockVec_0_nextId
  assign hg_weight_lock_lockVec_0_nextId$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_0_nextId$EN = 1'b0 ;

  // register hg_weight_lock_lockVec_1_cnt
  assign hg_weight_lock_lockVec_1_cnt$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_1_cnt$EN = 1'b0 ;

  // register hg_weight_lock_lockVec_1_nextId
  assign hg_weight_lock_lockVec_1_nextId$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_1_nextId$EN = 1'b0 ;

  // register hg_weight_lock_lockVec_2_cnt
  assign hg_weight_lock_lockVec_2_cnt$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_2_cnt$EN = 1'b0 ;

  // register hg_weight_lock_lockVec_2_nextId
  assign hg_weight_lock_lockVec_2_nextId$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_2_nextId$EN = 1'b0 ;

  // register hg_weight_lock_lockVec_3_cnt
  assign hg_weight_lock_lockVec_3_cnt$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_3_cnt$EN = 1'b0 ;

  // register hg_weight_lock_lockVec_3_nextId
  assign hg_weight_lock_lockVec_3_nextId$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_3_nextId$EN = 1'b0 ;

  // register hg_weight_lock_region
  assign hg_weight_lock_region$D_IN = 1'b0 ;
  assign hg_weight_lock_region$EN = 1'b0 ;

  // submodule f_rf
  assign f_rf$ADDR_1 = hg_fifo__input__TO_Start$D_OUT[12:3] ;
  assign f_rf$ADDR_2 = 10'h0 ;
  assign f_rf$ADDR_3 = 10'h0 ;
  assign f_rf$ADDR_4 = 10'h0 ;
  assign f_rf$ADDR_5 = 10'h0 ;
  assign f_rf$ADDR_IN = 10'h0 ;
  assign f_rf$D_IN = 10'h0 ;
  assign f_rf$WE = 1'b0 ;

  // submodule h_rf
  assign h_rf$ADDR_1 = hg_fifo_Start_TO_Stage__1$D_OUT[44:35] ;
  assign h_rf$ADDR_2 = 10'h0 ;
  assign h_rf$ADDR_3 = 10'h0 ;
  assign h_rf$ADDR_4 = 10'h0 ;
  assign h_rf$ADDR_5 = 10'h0 ;
  assign h_rf$ADDR_IN = hg_fifo_Stage__1_TO_Stage__2$D_OUT[47:38] ;
  assign h_rf$D_IN = hg_fifo_Stage__1_TO_Stage__2$D_OUT[37:6] ;
  assign h_rf$WE = WILL_FIRE_RL_hg_s_Stage__2_execute ;

  // submodule hg_feature_lock_lockVec_0_held
  assign hg_feature_lock_lockVec_0_held$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_0_held$ENQ = 1'b0 ;
  assign hg_feature_lock_lockVec_0_held$DEQ = 1'b0 ;
  assign hg_feature_lock_lockVec_0_held$CLR = 1'b0 ;

  // submodule hg_feature_lock_lockVec_1_held
  assign hg_feature_lock_lockVec_1_held$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_1_held$ENQ = 1'b0 ;
  assign hg_feature_lock_lockVec_1_held$DEQ = 1'b0 ;
  assign hg_feature_lock_lockVec_1_held$CLR = 1'b0 ;

  // submodule hg_feature_lock_lockVec_2_held
  assign hg_feature_lock_lockVec_2_held$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_2_held$ENQ = 1'b0 ;
  assign hg_feature_lock_lockVec_2_held$DEQ = 1'b0 ;
  assign hg_feature_lock_lockVec_2_held$CLR = 1'b0 ;

  // submodule hg_feature_lock_lockVec_3_held
  assign hg_feature_lock_lockVec_3_held$D_IN = 2'h0 ;
  assign hg_feature_lock_lockVec_3_held$ENQ = 1'b0 ;
  assign hg_feature_lock_lockVec_3_held$DEQ = 1'b0 ;
  assign hg_feature_lock_lockVec_3_held$CLR = 1'b0 ;

  // submodule hg_fifo_Stage__1_TO_Stage__2
  assign hg_fifo_Stage__1_TO_Stage__2$D_IN =
	     { hg_fifo_Start_TO_Stage__1$D_OUT[44:35],
	       h_rf_sub_hg_fifo_Start_TO_Stage__1_first__68_B_ETC___d235,
	       1'd1,
	       IF_hg_h_lock_entryVec_3_9_BIT_10_0_AND_hg_h_lo_ETC___d277,
	       hg_fifo_Start_TO_Stage__1$D_OUT[2:0] } ;
  assign hg_fifo_Stage__1_TO_Stage__2$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute ;
  assign hg_fifo_Stage__1_TO_Stage__2$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute ;
  assign hg_fifo_Stage__1_TO_Stage__2$CLR = 1'b0 ;

  // submodule hg_fifo_Stage__2_TO_Stage__3
  assign hg_fifo_Stage__2_TO_Stage__3$D_IN =
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[2:0] ;
  assign hg_fifo_Stage__2_TO_Stage__3$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute ;
  assign hg_fifo_Stage__2_TO_Stage__3$DEQ =
	     hg_fifo_Stage__2_TO_Stage__3$EMPTY_N ;
  assign hg_fifo_Stage__2_TO_Stage__3$CLR = 1'b0 ;

  // submodule hg_fifo_Start_TO_Stage__1
  assign hg_fifo_Start_TO_Stage__1$D_IN =
	     { f_rf$D_OUT_1,
	       w_rf$D_OUT_1,
	       hg_fifo__input__TO_Start$D_OUT[2:0] } ;
  assign hg_fifo_Start_TO_Stage__1$ENQ =
	     MUX_hg_fifo__input__TO_Start$enq_1__SEL_1 ;
  assign hg_fifo_Start_TO_Stage__1$DEQ = WILL_FIRE_RL_hg_s_Stage__1_execute ;
  assign hg_fifo_Start_TO_Stage__1$CLR = 1'b0 ;

  // submodule hg_fifo__input__TO_Start
  assign hg_fifo__input__TO_Start$D_IN =
	     MUX_hg_fifo__input__TO_Start$enq_1__SEL_1 ?
	       MUX_hg_fifo__input__TO_Start$enq_1__VAL_1 :
	       MUX_hg_fifo__input__TO_Start$enq_1__VAL_2 ;
  assign hg_fifo__input__TO_Start$ENQ =
	     WILL_FIRE_RL_hg_s_Start_execute &&
	     hg_fifo__input__TO_Start_first__3_BITS_12_TO_3_ETC___d65 ||
	     EN__inthg_req ;
  assign hg_fifo__input__TO_Start$DEQ = WILL_FIRE_RL_hg_s_Start_execute ;
  assign hg_fifo__input__TO_Start$CLR = 1'b0 ;

  // submodule hg_h_lock_lockVec_0_held
  assign hg_h_lock_lockVec_0_held$D_IN = hg_h_lock_lockVec_0_nextId ;
  assign hg_h_lock_lockVec_0_held$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d238 ||
	      x__h9842 == 2'd0 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;
  assign hg_h_lock_lockVec_0_held$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_h_lock_lockVec_0_held$D_OUT ==
	     IF_hg_fifo_Stage__1_TO_Stage__2_first__83_BIT__ETC___d321 &&
	     IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d328 ;
  assign hg_h_lock_lockVec_0_held$CLR = 1'b0 ;

  // submodule hg_h_lock_lockVec_1_held
  assign hg_h_lock_lockVec_1_held$D_IN = hg_h_lock_lockVec_1_nextId ;
  assign hg_h_lock_lockVec_1_held$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d244 ||
	      x__h9842 == 2'd1 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;
  assign hg_h_lock_lockVec_1_held$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_h_lock_lockVec_1_held$D_OUT ==
	     IF_hg_fifo_Stage__1_TO_Stage__2_first__83_BIT__ETC___d321 &&
	     IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d333 ;
  assign hg_h_lock_lockVec_1_held$CLR = 1'b0 ;

  // submodule hg_h_lock_lockVec_2_held
  assign hg_h_lock_lockVec_2_held$D_IN = hg_h_lock_lockVec_2_nextId ;
  assign hg_h_lock_lockVec_2_held$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d250 ||
	      x__h9842 == 2'd2 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;
  assign hg_h_lock_lockVec_2_held$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_h_lock_lockVec_2_held$D_OUT ==
	     IF_hg_fifo_Stage__1_TO_Stage__2_first__83_BIT__ETC___d321 &&
	     IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d338 ;
  assign hg_h_lock_lockVec_2_held$CLR = 1'b0 ;

  // submodule hg_h_lock_lockVec_3_held
  assign hg_h_lock_lockVec_3_held$D_IN = hg_h_lock_lockVec_3_nextId ;
  assign hg_h_lock_lockVec_3_held$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d256 ||
	      x__h9842 == 2'd3 &&
	      NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265) ;
  assign hg_h_lock_lockVec_3_held$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_h_lock_lockVec_3_held$D_OUT ==
	     IF_hg_fifo_Stage__1_TO_Stage__2_first__83_BIT__ETC___d321 &&
	     IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d343 ;
  assign hg_h_lock_lockVec_3_held$CLR = 1'b0 ;

  // submodule hg_outputQueue
  assign hg_outputQueue$D_IN = { hg_fifo__input__TO_Start$D_OUT[2:0], 1'd1 } ;
  assign hg_outputQueue$ENQ = MUX_hg_busyReg$write_1__SEL_1 ;
  assign hg_outputQueue$DEQ = EN__inthg_resp ;
  assign hg_outputQueue$CLR = 1'b0 ;

  // submodule hg_weight_lock_lockVec_0_held
  assign hg_weight_lock_lockVec_0_held$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_0_held$ENQ = 1'b0 ;
  assign hg_weight_lock_lockVec_0_held$DEQ = 1'b0 ;
  assign hg_weight_lock_lockVec_0_held$CLR = 1'b0 ;

  // submodule hg_weight_lock_lockVec_1_held
  assign hg_weight_lock_lockVec_1_held$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_1_held$ENQ = 1'b0 ;
  assign hg_weight_lock_lockVec_1_held$DEQ = 1'b0 ;
  assign hg_weight_lock_lockVec_1_held$CLR = 1'b0 ;

  // submodule hg_weight_lock_lockVec_2_held
  assign hg_weight_lock_lockVec_2_held$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_2_held$ENQ = 1'b0 ;
  assign hg_weight_lock_lockVec_2_held$DEQ = 1'b0 ;
  assign hg_weight_lock_lockVec_2_held$CLR = 1'b0 ;

  // submodule hg_weight_lock_lockVec_3_held
  assign hg_weight_lock_lockVec_3_held$D_IN = 2'h0 ;
  assign hg_weight_lock_lockVec_3_held$ENQ = 1'b0 ;
  assign hg_weight_lock_lockVec_3_held$DEQ = 1'b0 ;
  assign hg_weight_lock_lockVec_3_held$CLR = 1'b0 ;

  // submodule w_rf
  assign w_rf$ADDR_1 = hg_fifo__input__TO_Start$D_OUT[12:3] ;
  assign w_rf$ADDR_2 = 10'h0 ;
  assign w_rf$ADDR_3 = 10'h0 ;
  assign w_rf$ADDR_4 = 10'h0 ;
  assign w_rf$ADDR_5 = 10'h0 ;
  assign w_rf$ADDR_IN = 10'h0 ;
  assign w_rf$D_IN = 32'h0 ;
  assign w_rf$WE = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_hg_feature_lock_entryVec_0_BIT_10_7_OR__ETC___d105 =
	     ((!hg_feature_lock_entryVec_0[10] ||
	       !hg_feature_lock_entryVec_0_BITS_9_TO_0_4_EQ_hg_ETC___d85) &&
	      hg_feature_lock_entryVec_1[10] &&
	      hg_feature_lock_entryVec_1_BITS_9_TO_0_1_EQ_hg_ETC___d82) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_hg_h_lock_entryVec_0_4_BIT_10_5_90_OR_N_ETC___d198 =
	     ((!hg_h_lock_entryVec_0[10] ||
	       !hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d179) &&
	      hg_h_lock_entryVec_1[10] &&
	      hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d176) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_hg_h_lock_entryVec_0_4_BIT_10_5_90_OR_N_ETC___d306 =
	     ((!hg_h_lock_entryVec_0[10] ||
	       !hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d294) &&
	      hg_h_lock_entryVec_1[10] &&
	      hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d291) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d238 =
	     x__h8976 == 2'd0 &&
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d182) ;
  assign IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d244 =
	     x__h8976 == 2'd1 &&
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d182) ;
  assign IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d250 =
	     x__h8976 == 2'd2 &&
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d182) ;
  assign IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d256 =
	     x__h8976 == 2'd3 &&
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d182) ;
  assign IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d328 =
	     x__h10519 == 2'd0 &&
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d285 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d326) ;
  assign IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d333 =
	     x__h10519 == 2'd1 &&
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d285 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d326) ;
  assign IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d338 =
	     x__h10519 == 2'd2 &&
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d285 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d326) ;
  assign IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_N_ETC___d343 =
	     x__h10519 == 2'd3 &&
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d285 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d326) ;
  assign IF_NOT_hg_weight_lock_entryVec_0_4_BIT_10_5_38_ETC___d146 =
	     ((!hg_weight_lock_entryVec_0[10] ||
	       !hg_weight_lock_entryVec_0_4_BITS_9_TO_0_25_EQ__ETC___d126) &&
	      hg_weight_lock_entryVec_1[10] &&
	      hg_weight_lock_entryVec_1_9_BITS_9_TO_0_22_EQ__ETC___d123) ?
	       2'd1 :
	       2'd0 ;
  assign IF_hg_fifo_Stage__1_TO_Stage__2_first__83_BIT__ETC___d321 =
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[5] ?
	       hg_fifo_Stage__1_TO_Stage__2$D_OUT[4:3] :
	       2'd0 ;
  assign IF_hg_fifo__input__TO_Start_first__3_BITS_12_T_ETC___d70 =
	     hg_fifo__input__TO_Start_first__3_BITS_12_TO_3_ETC___d65 ?
	       hg_fifo__input__TO_Start$FULL_N &&
	       hg_fifo_Start_TO_Stage__1$FULL_N :
	       hg_outputQueue$FULL_N ;
  assign IF_hg_h_lock_entryVec_1_9_BIT_10_0_AND_hg_h_lo_ETC___d214 =
	     (hg_h_lock_entryVec_1[10] && hg_h_lock_entryVec_0[10] &&
	      !hg_h_lock_entryVec_2[10]) ?
	       2'd2 :
	       ((hg_h_lock_entryVec_0[10] && !hg_h_lock_entryVec_1[10]) ?
		  2'd1 :
		  2'd0) ;
  assign IF_hg_h_lock_entryVec_3_9_BIT_10_0_AND_hg_h_lo_ETC___d218 =
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d182) ?
	       CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d205 :
	       hg_h_lock_entryVec_3[10] && hg_h_lock_entryVec_2[10] &&
	       hg_h_lock_entryVec_1[10] &&
	       hg_h_lock_entryVec_0[10] ||
	       CASE_IF_hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_ETC___d216 ;
  assign IF_hg_h_lock_entryVec_3_9_BIT_10_0_AND_hg_h_lo_ETC___d230 =
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d182) ?
	       SEL_ARR_NOT_hg_h_lock_lockVec_0_held_notEmpty__ETC___d229 :
	       NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d226 ;
  assign IF_hg_h_lock_entryVec_3_9_BIT_10_0_AND_hg_h_lo_ETC___d277 =
	     (hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170 ||
	      hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d182) ?
	       SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d275 :
	       SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d276 ;
  assign NOT_hg_feature_lock_entryVec_1_BIT_10_0_4_OR_N_ETC___d103 =
	     (!hg_feature_lock_entryVec_1[10] ||
	      !hg_feature_lock_entryVec_1_BITS_9_TO_0_1_EQ_hg_ETC___d82) &&
	     (!hg_feature_lock_entryVec_0[10] ||
	      !hg_feature_lock_entryVec_0_BITS_9_TO_0_4_EQ_hg_ETC___d85) &&
	     hg_feature_lock_entryVec_2[10] &&
	     hg_feature_lock_entryVec_2_4_BITS_9_TO_0_8_EQ__ETC___d79 ;
  assign NOT_hg_feature_lock_entryVec_2_4_BIT_10_5_1_OR_ETC___d101 =
	     (!hg_feature_lock_entryVec_2[10] ||
	      !hg_feature_lock_entryVec_2_4_BITS_9_TO_0_8_EQ__ETC___d79) &&
	     (!hg_feature_lock_entryVec_1[10] ||
	      !hg_feature_lock_entryVec_1_BITS_9_TO_0_1_EQ_hg_ETC___d82) &&
	     (!hg_feature_lock_entryVec_0[10] ||
	      !hg_feature_lock_entryVec_0_BITS_9_TO_0_4_EQ_hg_ETC___d85) ;
  assign NOT_hg_fifo__input__TO_Start_first__3_BITS_12__ETC___d114 =
	     !hg_fifo__input__TO_Start_first__3_BITS_12_TO_3_ETC___d65 ||
	     ((hg_feature_lock_entryVec_3[10] &&
	       hg_feature_lock_entryVec_3[9:0] ==
	       hg_fifo__input__TO_Start$D_OUT[12:3] ||
	       hg_feature_lock_entryVec_2_4_BIT_10_5_AND_hg_f_ETC___d88) ?
		SEL_ARR_NOT_hg_feature_lock_lockVec_0_held_not_ETC___d108 :
		!hg_feature_lock_entryVec_3[10] ||
		!hg_feature_lock_entryVec_2[10] ||
		!hg_feature_lock_entryVec_1[10] ||
		!hg_feature_lock_entryVec_0[10]) ;
  assign NOT_hg_fifo__input__TO_Start_first__3_BITS_12__ETC___d155 =
	     !hg_fifo__input__TO_Start_first__3_BITS_12_TO_3_ETC___d65 ||
	     ((hg_weight_lock_entryVec_3[10] &&
	       hg_weight_lock_entryVec_3[9:0] ==
	       hg_fifo__input__TO_Start$D_OUT[12:3] ||
	       hg_weight_lock_entryVec_2_4_BIT_10_5_AND_hg_we_ETC___d129) ?
		SEL_ARR_NOT_hg_weight_lock_lockVec_0_held_notE_ETC___d149 :
		!hg_weight_lock_entryVec_3[10] ||
		!hg_weight_lock_entryVec_2[10] ||
		!hg_weight_lock_entryVec_1[10] ||
		!hg_weight_lock_entryVec_0[10]) ;
  assign NOT_hg_h_lock_entryVec_1_9_BIT_10_0_87_OR_NOT__ETC___d196 =
	     (!hg_h_lock_entryVec_1[10] ||
	      !hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d176) &&
	     (!hg_h_lock_entryVec_0[10] ||
	      !hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d179) &&
	     hg_h_lock_entryVec_2[10] &&
	     hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d173 ;
  assign NOT_hg_h_lock_entryVec_1_9_BIT_10_0_87_OR_NOT__ETC___d303 =
	     (!hg_h_lock_entryVec_1[10] ||
	      !hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d291) &&
	     (!hg_h_lock_entryVec_0[10] ||
	      !hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d294) &&
	     hg_h_lock_entryVec_2[10] &&
	     hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d288 ;
  assign NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_NOT__ETC___d194 =
	     (!hg_h_lock_entryVec_2[10] ||
	      !hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d173) &&
	     (!hg_h_lock_entryVec_1[10] ||
	      !hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d176) &&
	     (!hg_h_lock_entryVec_0[10] ||
	      !hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d179) ;
  assign NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_NOT__ETC___d298 =
	     (!hg_h_lock_entryVec_2[10] ||
	      !hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d288) &&
	     (!hg_h_lock_entryVec_1[10] ||
	      !hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d291) &&
	     (!hg_h_lock_entryVec_0[10] ||
	      !hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d294) ;
  assign NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d226 =
	     !hg_h_lock_entryVec_3[10] || !hg_h_lock_entryVec_2[10] ||
	     !hg_h_lock_entryVec_1[10] ||
	     !hg_h_lock_entryVec_0[10] ;
  assign NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d265 =
	     (!hg_h_lock_entryVec_3[10] ||
	      !hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170) &&
	     NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_NOT__ETC___d194 &&
	     NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d226 ;
  assign NOT_hg_h_lock_entryVec_3_9_BIT_10_0_09_OR_NOT__ETC___d314 =
	     (!hg_h_lock_entryVec_3[10] ||
	      !hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d285) &&
	     NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_NOT__ETC___d298 ||
	     CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d313 ;
  assign NOT_hg_weight_lock_entryVec_1_9_BIT_10_0_35_OR_ETC___d144 =
	     (!hg_weight_lock_entryVec_1[10] ||
	      !hg_weight_lock_entryVec_1_9_BITS_9_TO_0_22_EQ__ETC___d123) &&
	     (!hg_weight_lock_entryVec_0[10] ||
	      !hg_weight_lock_entryVec_0_4_BITS_9_TO_0_25_EQ__ETC___d126) &&
	     hg_weight_lock_entryVec_2[10] &&
	     hg_weight_lock_entryVec_2_4_BITS_9_TO_0_19_EQ__ETC___d120 ;
  assign NOT_hg_weight_lock_entryVec_2_4_BIT_10_5_32_OR_ETC___d142 =
	     (!hg_weight_lock_entryVec_2[10] ||
	      !hg_weight_lock_entryVec_2_4_BITS_9_TO_0_19_EQ__ETC___d120) &&
	     (!hg_weight_lock_entryVec_1[10] ||
	      !hg_weight_lock_entryVec_1_9_BITS_9_TO_0_22_EQ__ETC___d123) &&
	     (!hg_weight_lock_entryVec_0[10] ||
	      !hg_weight_lock_entryVec_0_4_BITS_9_TO_0_25_EQ__ETC___d126) ;
  assign h_rf_sub_hg_fifo_Start_TO_Stage__1_first__68_B_ETC___d235 =
	     h_rf$D_OUT_1 + hg_fifo_Start_TO_Stage__1$D_OUT[34:3] ;
  assign hg_feature_lock_entryVec_0_BITS_9_TO_0_4_EQ_hg_ETC___d85 =
	     hg_feature_lock_entryVec_0[9:0] ==
	     hg_fifo__input__TO_Start$D_OUT[12:3] ;
  assign hg_feature_lock_entryVec_1_BITS_9_TO_0_1_EQ_hg_ETC___d82 =
	     hg_feature_lock_entryVec_1[9:0] ==
	     hg_fifo__input__TO_Start$D_OUT[12:3] ;
  assign hg_feature_lock_entryVec_2_4_BITS_9_TO_0_8_EQ__ETC___d79 =
	     hg_feature_lock_entryVec_2[9:0] ==
	     hg_fifo__input__TO_Start$D_OUT[12:3] ;
  assign hg_feature_lock_entryVec_2_4_BIT_10_5_AND_hg_f_ETC___d88 =
	     hg_feature_lock_entryVec_2[10] &&
	     hg_feature_lock_entryVec_2_4_BITS_9_TO_0_8_EQ__ETC___d79 ||
	     hg_feature_lock_entryVec_1[10] &&
	     hg_feature_lock_entryVec_1_BITS_9_TO_0_1_EQ_hg_ETC___d82 ||
	     hg_feature_lock_entryVec_0[10] &&
	     hg_feature_lock_entryVec_0_BITS_9_TO_0_4_EQ_hg_ETC___d85 ;
  assign hg_fifo__input__TO_Start_first__3_BITS_12_TO_3_ETC___d65 =
	     hg_fifo__input__TO_Start$D_OUT[12:3] < 10'd1000 ;
  assign hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d179 =
	     hg_h_lock_entryVec_0[9:0] ==
	     hg_fifo_Start_TO_Stage__1$D_OUT[44:35] ;
  assign hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d294 =
	     hg_h_lock_entryVec_0[9:0] ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[47:38] ;
  assign hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d176 =
	     hg_h_lock_entryVec_1[9:0] ==
	     hg_fifo_Start_TO_Stage__1$D_OUT[44:35] ;
  assign hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d291 =
	     hg_h_lock_entryVec_1[9:0] ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[47:38] ;
  assign hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d173 =
	     hg_h_lock_entryVec_2[9:0] ==
	     hg_fifo_Start_TO_Stage__1$D_OUT[44:35] ;
  assign hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d288 =
	     hg_h_lock_entryVec_2[9:0] ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[47:38] ;
  assign hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d182 =
	     hg_h_lock_entryVec_2[10] &&
	     hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d173 ||
	     hg_h_lock_entryVec_1[10] &&
	     hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d176 ||
	     hg_h_lock_entryVec_0[10] &&
	     hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d179 ;
  assign hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_h_lock__ETC___d326 =
	     hg_h_lock_entryVec_2[10] &&
	     hg_h_lock_entryVec_2_4_BITS_9_TO_0_72_EQ_hg_fi_ETC___d288 ||
	     hg_h_lock_entryVec_1[10] &&
	     hg_h_lock_entryVec_1_9_BITS_9_TO_0_75_EQ_hg_fi_ETC___d291 ||
	     hg_h_lock_entryVec_0[10] &&
	     hg_h_lock_entryVec_0_4_BITS_9_TO_0_78_EQ_hg_fi_ETC___d294 ;
  assign hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170 =
	     hg_h_lock_entryVec_3[9:0] ==
	     hg_fifo_Start_TO_Stage__1$D_OUT[44:35] ;
  assign hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d285 =
	     hg_h_lock_entryVec_3[9:0] ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[47:38] ;
  assign hg_weight_lock_entryVec_0_4_BITS_9_TO_0_25_EQ__ETC___d126 =
	     hg_weight_lock_entryVec_0[9:0] ==
	     hg_fifo__input__TO_Start$D_OUT[12:3] ;
  assign hg_weight_lock_entryVec_1_9_BITS_9_TO_0_22_EQ__ETC___d123 =
	     hg_weight_lock_entryVec_1[9:0] ==
	     hg_fifo__input__TO_Start$D_OUT[12:3] ;
  assign hg_weight_lock_entryVec_2_4_BITS_9_TO_0_19_EQ__ETC___d120 =
	     hg_weight_lock_entryVec_2[9:0] ==
	     hg_fifo__input__TO_Start$D_OUT[12:3] ;
  assign hg_weight_lock_entryVec_2_4_BIT_10_5_AND_hg_we_ETC___d129 =
	     hg_weight_lock_entryVec_2[10] &&
	     hg_weight_lock_entryVec_2_4_BITS_9_TO_0_19_EQ__ETC___d120 ||
	     hg_weight_lock_entryVec_1[10] &&
	     hg_weight_lock_entryVec_1_9_BITS_9_TO_0_22_EQ__ETC___d123 ||
	     hg_weight_lock_entryVec_0[10] &&
	     hg_weight_lock_entryVec_0_4_BITS_9_TO_0_25_EQ__ETC___d126 ;
  assign x__h10519 =
	     (NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_NOT__ETC___d298 &&
	      hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d285) ?
	       2'd3 :
	       (NOT_hg_h_lock_entryVec_1_9_BIT_10_0_87_OR_NOT__ETC___d303 ?
		  2'd2 :
		  IF_NOT_hg_h_lock_entryVec_0_4_BIT_10_5_90_OR_N_ETC___d306) ;
  assign x__h7468 =
	     (NOT_hg_feature_lock_entryVec_2_4_BIT_10_5_1_OR_ETC___d101 &&
	      hg_feature_lock_entryVec_3[10] &&
	      hg_feature_lock_entryVec_3[9:0] ==
	      hg_fifo__input__TO_Start$D_OUT[12:3]) ?
	       2'd3 :
	       (NOT_hg_feature_lock_entryVec_1_BIT_10_0_4_OR_N_ETC___d103 ?
		  2'd2 :
		  IF_NOT_hg_feature_lock_entryVec_0_BIT_10_7_OR__ETC___d105) ;
  assign x__h7932 =
	     (NOT_hg_weight_lock_entryVec_2_4_BIT_10_5_32_OR_ETC___d142 &&
	      hg_weight_lock_entryVec_3[10] &&
	      hg_weight_lock_entryVec_3[9:0] ==
	      hg_fifo__input__TO_Start$D_OUT[12:3]) ?
	       2'd3 :
	       (NOT_hg_weight_lock_entryVec_1_9_BIT_10_0_35_OR_ETC___d144 ?
		  2'd2 :
		  IF_NOT_hg_weight_lock_entryVec_0_4_BIT_10_5_38_ETC___d146) ;
  assign x__h8976 =
	     (NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_OR_NOT__ETC___d194 &&
	      hg_h_lock_entryVec_3[10] &&
	      hg_h_lock_entryVec_3_9_BITS_9_TO_0_67_EQ_hg_fi_ETC___d170) ?
	       2'd3 :
	       (NOT_hg_h_lock_entryVec_1_9_BIT_10_0_87_OR_NOT__ETC___d196 ?
		  2'd2 :
		  IF_NOT_hg_h_lock_entryVec_0_4_BIT_10_5_90_OR_N_ETC___d198) ;
  assign x__h9842 =
	     (hg_h_lock_entryVec_2[10] && hg_h_lock_entryVec_1[10] &&
	      hg_h_lock_entryVec_0[10] &&
	      !hg_h_lock_entryVec_3[10]) ?
	       2'd3 :
	       IF_hg_h_lock_entryVec_1_9_BIT_10_0_AND_hg_h_lo_ETC___d214 ;
  always@(x__h7932 or
	  hg_weight_lock_lockVec_0_held$EMPTY_N or
	  hg_weight_lock_lockVec_1_held$EMPTY_N or
	  hg_weight_lock_lockVec_2_held$EMPTY_N or
	  hg_weight_lock_lockVec_3_held$EMPTY_N)
  begin
    case (x__h7932)
      2'd0:
	  SEL_ARR_NOT_hg_weight_lock_lockVec_0_held_notE_ETC___d149 =
	      !hg_weight_lock_lockVec_0_held$EMPTY_N;
      2'd1:
	  SEL_ARR_NOT_hg_weight_lock_lockVec_0_held_notE_ETC___d149 =
	      !hg_weight_lock_lockVec_1_held$EMPTY_N;
      2'd2:
	  SEL_ARR_NOT_hg_weight_lock_lockVec_0_held_notE_ETC___d149 =
	      !hg_weight_lock_lockVec_2_held$EMPTY_N;
      2'd3:
	  SEL_ARR_NOT_hg_weight_lock_lockVec_0_held_notE_ETC___d149 =
	      !hg_weight_lock_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(x__h7468 or
	  hg_feature_lock_lockVec_0_held$EMPTY_N or
	  hg_feature_lock_lockVec_1_held$EMPTY_N or
	  hg_feature_lock_lockVec_2_held$EMPTY_N or
	  hg_feature_lock_lockVec_3_held$EMPTY_N)
  begin
    case (x__h7468)
      2'd0:
	  SEL_ARR_NOT_hg_feature_lock_lockVec_0_held_not_ETC___d108 =
	      !hg_feature_lock_lockVec_0_held$EMPTY_N;
      2'd1:
	  SEL_ARR_NOT_hg_feature_lock_lockVec_0_held_not_ETC___d108 =
	      !hg_feature_lock_lockVec_1_held$EMPTY_N;
      2'd2:
	  SEL_ARR_NOT_hg_feature_lock_lockVec_0_held_not_ETC___d108 =
	      !hg_feature_lock_lockVec_2_held$EMPTY_N;
      2'd3:
	  SEL_ARR_NOT_hg_feature_lock_lockVec_0_held_not_ETC___d108 =
	      !hg_feature_lock_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(x__h8976 or
	  hg_h_lock_lockVec_0_held$EMPTY_N or
	  hg_h_lock_lockVec_1_held$EMPTY_N or
	  hg_h_lock_lockVec_2_held$EMPTY_N or
	  hg_h_lock_lockVec_3_held$EMPTY_N)
  begin
    case (x__h8976)
      2'd0:
	  SEL_ARR_NOT_hg_h_lock_lockVec_0_held_notEmpty__ETC___d229 =
	      !hg_h_lock_lockVec_0_held$EMPTY_N;
      2'd1:
	  SEL_ARR_NOT_hg_h_lock_lockVec_0_held_notEmpty__ETC___d229 =
	      !hg_h_lock_lockVec_1_held$EMPTY_N;
      2'd2:
	  SEL_ARR_NOT_hg_h_lock_lockVec_0_held_notEmpty__ETC___d229 =
	      !hg_h_lock_lockVec_2_held$EMPTY_N;
      2'd3:
	  SEL_ARR_NOT_hg_h_lock_lockVec_0_held_notEmpty__ETC___d229 =
	      !hg_h_lock_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(x__h8976 or
	  hg_h_lock_lockVec_0_held$FULL_N or
	  hg_h_lock_lockVec_1_held$FULL_N or
	  hg_h_lock_lockVec_2_held$FULL_N or hg_h_lock_lockVec_3_held$FULL_N)
  begin
    case (x__h8976)
      2'd0:
	  CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d205 =
	      hg_h_lock_lockVec_0_held$FULL_N;
      2'd1:
	  CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d205 =
	      hg_h_lock_lockVec_1_held$FULL_N;
      2'd2:
	  CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d205 =
	      hg_h_lock_lockVec_2_held$FULL_N;
      2'd3:
	  CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d205 =
	      hg_h_lock_lockVec_3_held$FULL_N;
    endcase
  end
  always@(x__h9842 or
	  hg_h_lock_lockVec_0_held$FULL_N or
	  hg_h_lock_lockVec_1_held$FULL_N or
	  hg_h_lock_lockVec_2_held$FULL_N or hg_h_lock_lockVec_3_held$FULL_N)
  begin
    case (x__h9842)
      2'd0:
	  CASE_IF_hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_ETC___d216 =
	      hg_h_lock_lockVec_0_held$FULL_N;
      2'd1:
	  CASE_IF_hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_ETC___d216 =
	      hg_h_lock_lockVec_1_held$FULL_N;
      2'd2:
	  CASE_IF_hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_ETC___d216 =
	      hg_h_lock_lockVec_2_held$FULL_N;
      2'd3:
	  CASE_IF_hg_h_lock_entryVec_2_4_BIT_10_5_AND_hg_ETC___d216 =
	      hg_h_lock_lockVec_3_held$FULL_N;
    endcase
  end
  always@(x__h10519 or
	  hg_h_lock_lockVec_0_held$EMPTY_N or
	  hg_h_lock_lockVec_1_held$EMPTY_N or
	  hg_h_lock_lockVec_2_held$EMPTY_N or
	  hg_h_lock_lockVec_3_held$EMPTY_N)
  begin
    case (x__h10519)
      2'd0:
	  CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d313 =
	      hg_h_lock_lockVec_0_held$EMPTY_N;
      2'd1:
	  CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d313 =
	      hg_h_lock_lockVec_1_held$EMPTY_N;
      2'd2:
	  CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d313 =
	      hg_h_lock_lockVec_2_held$EMPTY_N;
      2'd3:
	  CASE_IF_NOT_hg_h_lock_entryVec_2_4_BIT_10_5_84_ETC___d313 =
	      hg_h_lock_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(x__h8976 or
	  hg_h_lock_lockVec_0_nextId or
	  hg_h_lock_lockVec_1_nextId or
	  hg_h_lock_lockVec_2_nextId or hg_h_lock_lockVec_3_nextId)
  begin
    case (x__h8976)
      2'd0:
	  SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d275 =
	      hg_h_lock_lockVec_0_nextId;
      2'd1:
	  SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d275 =
	      hg_h_lock_lockVec_1_nextId;
      2'd2:
	  SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d275 =
	      hg_h_lock_lockVec_2_nextId;
      2'd3:
	  SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d275 =
	      hg_h_lock_lockVec_3_nextId;
    endcase
  end
  always@(x__h9842 or
	  hg_h_lock_lockVec_0_nextId or
	  hg_h_lock_lockVec_1_nextId or
	  hg_h_lock_lockVec_2_nextId or hg_h_lock_lockVec_3_nextId)
  begin
    case (x__h9842)
      2'd0:
	  SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d276 =
	      hg_h_lock_lockVec_0_nextId;
      2'd1:
	  SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d276 =
	      hg_h_lock_lockVec_1_nextId;
      2'd2:
	  SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d276 =
	      hg_h_lock_lockVec_2_nextId;
      2'd3:
	  SEL_ARR_hg_h_lock_lockVec_0_nextId_39_hg_h_loc_ETC___d276 =
	      hg_h_lock_lockVec_3_nextId;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        hg <= `BSV_ASSIGNMENT_DELAY 3'd0;
	hg_busyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hg_feature_lock_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_feature_lock_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_feature_lock_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_feature_lock_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_feature_lock_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_feature_lock_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_feature_lock_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_feature_lock_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_feature_lock_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_feature_lock_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_feature_lock_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_feature_lock_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_feature_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	hg_h_lock_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_h_lock_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_h_lock_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_h_lock_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_h_lock_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_h_lock_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_h_lock_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_h_lock_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_h_lock_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_h_lock_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_h_lock_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_h_lock_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_h_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	hg_weight_lock_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_weight_lock_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_weight_lock_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_weight_lock_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	hg_weight_lock_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_weight_lock_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_weight_lock_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_weight_lock_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_weight_lock_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_weight_lock_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_weight_lock_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_weight_lock_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_weight_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (hg$EN) hg <= `BSV_ASSIGNMENT_DELAY hg$D_IN;
	if (hg_busyReg$EN)
	  hg_busyReg <= `BSV_ASSIGNMENT_DELAY hg_busyReg$D_IN;
	if (hg_feature_lock_entryVec_0$EN)
	  hg_feature_lock_entryVec_0 <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_entryVec_0$D_IN;
	if (hg_feature_lock_entryVec_1$EN)
	  hg_feature_lock_entryVec_1 <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_entryVec_1$D_IN;
	if (hg_feature_lock_entryVec_2$EN)
	  hg_feature_lock_entryVec_2 <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_entryVec_2$D_IN;
	if (hg_feature_lock_entryVec_3$EN)
	  hg_feature_lock_entryVec_3 <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_entryVec_3$D_IN;
	if (hg_feature_lock_lockVec_0_cnt$EN)
	  hg_feature_lock_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_lockVec_0_cnt$D_IN;
	if (hg_feature_lock_lockVec_0_nextId$EN)
	  hg_feature_lock_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_lockVec_0_nextId$D_IN;
	if (hg_feature_lock_lockVec_1_cnt$EN)
	  hg_feature_lock_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_lockVec_1_cnt$D_IN;
	if (hg_feature_lock_lockVec_1_nextId$EN)
	  hg_feature_lock_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_lockVec_1_nextId$D_IN;
	if (hg_feature_lock_lockVec_2_cnt$EN)
	  hg_feature_lock_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_lockVec_2_cnt$D_IN;
	if (hg_feature_lock_lockVec_2_nextId$EN)
	  hg_feature_lock_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_lockVec_2_nextId$D_IN;
	if (hg_feature_lock_lockVec_3_cnt$EN)
	  hg_feature_lock_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_lockVec_3_cnt$D_IN;
	if (hg_feature_lock_lockVec_3_nextId$EN)
	  hg_feature_lock_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_lockVec_3_nextId$D_IN;
	if (hg_feature_lock_region$EN)
	  hg_feature_lock_region <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_region$D_IN;
	if (hg_h_lock_entryVec_0$EN)
	  hg_h_lock_entryVec_0 <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_entryVec_0$D_IN;
	if (hg_h_lock_entryVec_1$EN)
	  hg_h_lock_entryVec_1 <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_entryVec_1$D_IN;
	if (hg_h_lock_entryVec_2$EN)
	  hg_h_lock_entryVec_2 <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_entryVec_2$D_IN;
	if (hg_h_lock_entryVec_3$EN)
	  hg_h_lock_entryVec_3 <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_entryVec_3$D_IN;
	if (hg_h_lock_lockVec_0_cnt$EN)
	  hg_h_lock_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_lockVec_0_cnt$D_IN;
	if (hg_h_lock_lockVec_0_nextId$EN)
	  hg_h_lock_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_lockVec_0_nextId$D_IN;
	if (hg_h_lock_lockVec_1_cnt$EN)
	  hg_h_lock_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_lockVec_1_cnt$D_IN;
	if (hg_h_lock_lockVec_1_nextId$EN)
	  hg_h_lock_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_lockVec_1_nextId$D_IN;
	if (hg_h_lock_lockVec_2_cnt$EN)
	  hg_h_lock_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_lockVec_2_cnt$D_IN;
	if (hg_h_lock_lockVec_2_nextId$EN)
	  hg_h_lock_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_lockVec_2_nextId$D_IN;
	if (hg_h_lock_lockVec_3_cnt$EN)
	  hg_h_lock_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_lockVec_3_cnt$D_IN;
	if (hg_h_lock_lockVec_3_nextId$EN)
	  hg_h_lock_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_h_lock_lockVec_3_nextId$D_IN;
	if (hg_h_lock_region$EN)
	  hg_h_lock_region <= `BSV_ASSIGNMENT_DELAY hg_h_lock_region$D_IN;
	if (hg_weight_lock_entryVec_0$EN)
	  hg_weight_lock_entryVec_0 <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_entryVec_0$D_IN;
	if (hg_weight_lock_entryVec_1$EN)
	  hg_weight_lock_entryVec_1 <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_entryVec_1$D_IN;
	if (hg_weight_lock_entryVec_2$EN)
	  hg_weight_lock_entryVec_2 <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_entryVec_2$D_IN;
	if (hg_weight_lock_entryVec_3$EN)
	  hg_weight_lock_entryVec_3 <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_entryVec_3$D_IN;
	if (hg_weight_lock_lockVec_0_cnt$EN)
	  hg_weight_lock_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_lockVec_0_cnt$D_IN;
	if (hg_weight_lock_lockVec_0_nextId$EN)
	  hg_weight_lock_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_lockVec_0_nextId$D_IN;
	if (hg_weight_lock_lockVec_1_cnt$EN)
	  hg_weight_lock_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_lockVec_1_cnt$D_IN;
	if (hg_weight_lock_lockVec_1_nextId$EN)
	  hg_weight_lock_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_lockVec_1_nextId$D_IN;
	if (hg_weight_lock_lockVec_2_cnt$EN)
	  hg_weight_lock_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_lockVec_2_cnt$D_IN;
	if (hg_weight_lock_lockVec_2_nextId$EN)
	  hg_weight_lock_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_lockVec_2_nextId$D_IN;
	if (hg_weight_lock_lockVec_3_cnt$EN)
	  hg_weight_lock_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_lockVec_3_cnt$D_IN;
	if (hg_weight_lock_lockVec_3_nextId$EN)
	  hg_weight_lock_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_lockVec_3_nextId$D_IN;
	if (hg_weight_lock_region$EN)
	  hg_weight_lock_region <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_region$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    hg = 3'h2;
    hg_busyReg = 1'h0;
    hg_feature_lock_entryVec_0 = 11'h2AA;
    hg_feature_lock_entryVec_1 = 11'h2AA;
    hg_feature_lock_entryVec_2 = 11'h2AA;
    hg_feature_lock_entryVec_3 = 11'h2AA;
    hg_feature_lock_lockVec_0_cnt = 2'h2;
    hg_feature_lock_lockVec_0_nextId = 2'h2;
    hg_feature_lock_lockVec_1_cnt = 2'h2;
    hg_feature_lock_lockVec_1_nextId = 2'h2;
    hg_feature_lock_lockVec_2_cnt = 2'h2;
    hg_feature_lock_lockVec_2_nextId = 2'h2;
    hg_feature_lock_lockVec_3_cnt = 2'h2;
    hg_feature_lock_lockVec_3_nextId = 2'h2;
    hg_feature_lock_region = 1'h0;
    hg_h_lock_entryVec_0 = 11'h2AA;
    hg_h_lock_entryVec_1 = 11'h2AA;
    hg_h_lock_entryVec_2 = 11'h2AA;
    hg_h_lock_entryVec_3 = 11'h2AA;
    hg_h_lock_lockVec_0_cnt = 2'h2;
    hg_h_lock_lockVec_0_nextId = 2'h2;
    hg_h_lock_lockVec_1_cnt = 2'h2;
    hg_h_lock_lockVec_1_nextId = 2'h2;
    hg_h_lock_lockVec_2_cnt = 2'h2;
    hg_h_lock_lockVec_2_nextId = 2'h2;
    hg_h_lock_lockVec_3_cnt = 2'h2;
    hg_h_lock_lockVec_3_nextId = 2'h2;
    hg_h_lock_region = 1'h0;
    hg_weight_lock_entryVec_0 = 11'h2AA;
    hg_weight_lock_entryVec_1 = 11'h2AA;
    hg_weight_lock_entryVec_2 = 11'h2AA;
    hg_weight_lock_entryVec_3 = 11'h2AA;
    hg_weight_lock_lockVec_0_cnt = 2'h2;
    hg_weight_lock_lockVec_0_nextId = 2'h2;
    hg_weight_lock_lockVec_1_cnt = 2'h2;
    hg_weight_lock_lockVec_1_nextId = 2'h2;
    hg_weight_lock_lockVec_2_cnt = 2'h2;
    hg_weight_lock_lockVec_2_nextId = 2'h2;
    hg_weight_lock_lockVec_3_cnt = 2'h2;
    hg_weight_lock_lockVec_3_nextId = 2'h2;
    hg_weight_lock_region = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hg_s_Stage__1_execute)
	$display($unsigned(h_rf_sub_hg_fifo_Start_TO_Stage__1_first__68_B_ETC___d235));
  end
  // synopsys translate_on
endmodule  // mkCircuit

