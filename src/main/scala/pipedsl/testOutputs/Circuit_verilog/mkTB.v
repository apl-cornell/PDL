//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTB(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register reg_unused_0
  reg [2 : 0] reg_unused_0;
  wire [2 : 0] reg_unused_0$D_IN;
  wire reg_unused_0$EN;

  // register started
  reg started;
  wire started$D_IN, started$EN;

  // ports of submodule m
  wire [9 : 0] m$_inthg_req_counter;
  wire [2 : 0] m$_inthg_checkHandle_handle, m$_inthg_req;
  wire m$EN__inthg_req,
       m$EN__inthg_resp,
       m$RDY__inthg_checkHandle,
       m$RDY__inthg_req,
       m$_inthg_checkHandle;

  // submodule m
  mkCircuit m(.CLK(CLK),
	      .RST_N(RST_N),
	      ._inthg_checkHandle_handle(m$_inthg_checkHandle_handle),
	      ._inthg_req_counter(m$_inthg_req_counter),
	      .EN__inthg_req(m$EN__inthg_req),
	      .EN__inthg_resp(m$EN__inthg_resp),
	      ._inthg_req(m$_inthg_req),
	      .RDY__inthg_req(m$RDY__inthg_req),
	      .RDY__inthg_resp(),
	      ._inthg_checkHandle(m$_inthg_checkHandle),
	      .RDY__inthg_checkHandle(m$RDY__inthg_checkHandle),
	      ._inthg_peek(),
	      .RDY__inthg_peek());

  // register reg_unused_0
  assign reg_unused_0$D_IN = m$_inthg_req ;
  assign reg_unused_0$EN = m$RDY__inthg_req && !started ;

  // register started
  assign started$D_IN = 1'd1 ;
  assign started$EN = m$RDY__inthg_req && !started ;

  // submodule m
  assign m$_inthg_checkHandle_handle = reg_unused_0 ;
  assign m$_inthg_req_counter = 10'd0 ;
  assign m$EN__inthg_req = m$RDY__inthg_req && !started ;
  assign m$EN__inthg_resp = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        reg_unused_0 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	started <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (reg_unused_0$EN)
	  reg_unused_0 <= `BSV_ASSIGNMENT_DELAY reg_unused_0$D_IN;
	if (started$EN) started <= `BSV_ASSIGNMENT_DELAY started$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    reg_unused_0 = 3'h2;
    started = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (m$RDY__inthg_checkHandle && m$_inthg_checkHandle) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkTB

