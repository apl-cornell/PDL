pipe multi_stg_mul(a1: int<32>, a2: int<32>)[]: int<32> {
     int<32> rr = a1{15:0} * a2{15:0};
     int<32> rl = a1{15:0} * a2{31:16};
     int<32> lr = a1{31:16} * a2{15:0};
//   int<32> ll = a1{31:16} * a2{31:16};
     ---
     int<32> t1 = rl + lr;
     int<32> res = (t1 << 16<5>) + rr;
     output(res);
}

pipe multi_stg_div(num: int<32>, denom: int<32>, quot: int<32>, acc: int<32>, cnt: int<5>)[]: int<32> {
    int<32> tmp = acc{30:0} ++ num{31:31};
    int<32> na = (tmp >= denom) ? (tmp - denom) : (tmp);
    int<32> nq = (tmp >= denom) ? ((quot << 1){31:1} ++ 1<1>) : (quot << 1);
    int<32> nnum = num << 1;
    if (cnt == 31<5>) {
        output(nq);
    } else {
        call multi_stg_div(nnum, denom, nq, na, cnt + 1<5>);
    }
}


pipe cpu(pc: uint<16>)[rf: int<32>[5]<c2,s>(FAQueue), imem: int<32>[16]<a,a>, m: multi_stg_mul, f: multi_stg_div]: bool {
 bool done = pc >= u14<16>;
 if (!done) {
  call cpu(pc + u1<16>);
 }
 start(imem);
 int<32> insn <- imem[pc];
 end(imem);
 ---
 int<2> op = insn{1:0};
 uint<5> rs1 = cast(insn{6:2}, uint<5>);
 uint<5> rs2 = cast(insn{11:7}, uint<5>);
 uint<5> rd = cast(insn{16:12}, uint<5>);
 start(rf);
 int<32> rf1 = rf<a>[rs1];
 int<32> rf2 = rf<a>[rs2];
 reserve(rf[rd]);
 end(rf);
 ---
 split {
    case: (op == 0<2>) {
        ---
        int<32> res = rf1 + rf2;
    }
    case: (op == 1<2>) {
        int<32> res <- call m(rf1, rf2);
        ---
    }
    default: {
        int<32> res <- call f(rf1, rf2, 0<32>, 0<32>, 0<5>);
        ---
    }
 }
 block(rf[rd]);
 print(res);
 rf[rd] <- res;
 release(rf[rd]);
 ---
  if (done) {
     output(true);
  }

}

circuit {
 ti = memory(int<32>, 16);
 tr = regfile(int<32>, 5);
 r = FAQueue(tr);
 m = new multi_stg_mul[];
 fp = new multi_stg_div[];
 c = new cpu[r, ti, m, fp];
 call c(u0<16>);
}