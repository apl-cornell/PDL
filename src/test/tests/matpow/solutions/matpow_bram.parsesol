pipe matpow(k:int<5>,p:int<5>)[x:int<32>[9]<a, a>,row:int<5>[5]<a, a>,col:int<5>[5]<a, a>,a:int<32>[5]<a, a>] {
  if ( p == 19<5> ) {
      if ( k != 19<5> ) {
          call matpow(k + 1<5>,0<5>);
          
      } else {
          
      }
      
  } else {
      call matpow(k,p + 1<5>);
      
  }
  start(col);
  reserved(col);
  acquired(col);
  int<5> col_p <- col[p];
  released(col);
  end(col);
  start(row);
  reserved(row);
  acquired(row);
  int<5> row_p <- row[p];
  released(row);
  end(row);
  
  ---
  int<18> x_in_mul = 20<9> * 0<4> ++ k - 1<5>;
  int<9> x_in_idx = x_in_mul{8:0} + 0<4> ++ col_p;
  int<18> x_out_mul = 20<9> * 0<4> ++ k;
  int<9> x_out_idx = x_out_mul{8:0} + 0<4> ++ row_p;
  int<9> x_out_idx_cp = x_out_idx;
  start(x);
  reserved(x[x_in_idx],R);
  acquired(x[x_in_idx],R);
  reserved(x[x_out_idx],R);
  acquired(x[x_out_idx],R);
  int<32> x_in_val <- x[x_in_idx];
  released(x[x_in_idx]);
  start(a);
  reserved(a);
  acquired(a);
  int<32> a_val <- a[p];
  released(a);
  end(a);
  
  ---
  reserved(x[x_out_idx_cp],W);
  end(x);
  int<64> nmul = a_val * x_in_val;
  int<32> nval = nmul{31:0};
  int<32> oldx <- x[x_out_idx];
  released(x[x_out_idx]);
  
  ---
  acquired(x[x_out_idx_cp]);
  int<32> newval = nval + oldx;
  print(newval);
  x[x_out_idx_cp] <- newval;
  released(x[x_out_idx_cp]);
  
  ---
  if ( k == 19<5> && p == 19<5> ) {
      output true;
      
  } else {
      
  }
  
}
circuit {
  x = memory(int<32>,9);
  a = memory(int<32>,5);
  r = memory(int<5>,5);
  c = memory(int<5>,5);
  mp = new matpow[x,r,c,a];
call mp(1<5>,0<5>);
}
