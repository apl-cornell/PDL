/*
void matrix_power( inout_int_t x[20][20], in_int_t row[20], in_int_t col[20], in_int_t a[20] )
{
  for (int k=1; k<20; k++) {
      for (int p=0; p<20; p++) {
            x[k][row[p]] += a[p]*x[k-1][col[p]];
      }
  }
}
*/

pipe matpow(k: uint<5>, p: uint<5>)[x: uint<32>[9]<c2,s>(FAQueue), row: uint<5>[5]<c,s>, col: uint<5>[5]<c,s>, a: uint<32>[5]<c,s>]: bool {
     if (p == u19<5>) {
     	if (k != u19<5>) {
	   call matpow(k + u1<5>, u0<5>);
	}
     } else {
       call matpow(k, p + u1<5>);
     }
     start(col);
     uint<5> col_p = col[p];
     end(col);
     start(row);
     uint<5> row_p = row[p];
     end(row);
     uint<18> x_in_mul = u20<9> * (u0<4> ++ (k - u1<5>));
     uint<9> x_in_idx = x_in_mul{8:0} + (u0<4> ++ col_p);
     uint<18> x_out_mul = (u20<9> * (u0<4> ++ k));
     uint<9> x_out_idx =  x_out_mul{8:0} + (u0<4> ++ row_p);
     uint<9> x_out_idx_cp = x_out_idx;
     start(x);
     uint<32> x_in_val = x<a>[x_in_idx];
     uint<32> x_out_val_read = x<a>[x_out_idx];     
     reserve(x[x_out_idx_cp]);
     end(x);
     start(a);
     uint<32> a_val = a[p];
     end(a);
     ---
     uint<64> nmul = a_val * x_in_val;
     uint<32> nval = x_out_val_read + nmul{31:0};
     print(nval);
     block(x[x_out_idx_cp]);
     x[x_out_idx_cp] <- nval;
     release(x[x_out_idx_cp]);
     ---
     if ((k == u19<5>) && (p == u19<5>)) {
     	output(true);
     }
}

circuit {
  tx = regfile(uint<32>, 9);
  x = FAQueue(tx);
  ta = regfile(uint<32>, 5);
  tr = regfile(uint<5>, 5);
  tc = regfile(uint<5>, 5);
  mp = new matpow[x, tr, tc, ta];
  call mp(u1<5>,u 0<5>);
}