pipe cpu(pc: int<8>)[rf: int<32>[5]<c,s>(FAQueue), imem: int<32>[8]<a,a>]: bool {
     spec_check(); //nonblocking check
     start(imem);
     acquire(imem[pc], R);
     int<32> insn <- imem[pc];
     release(imem[pc]);
     end(imem);
     s <- speccall cpu(pc + 1<8>);
     ---
     bool done = insn{31:31} == 1<1>;
     if (!done) {
     	  ---
          int<1> op = insn{0:0};
     	  int<8> brImm = 0<4> ++ insn{4:1};
     	  int<5> rs1 = insn{9:5};
     	  int<5> rs2 = insn{14:10};
     	  int<5> rd = insn{19:15};
          spec_barrier(); //blocking check
	  bool op_is_nil = op == 0<1>;
     	  if (op_is_nil) {
	        verify(s, pc + 1<8>);
     	  } else {
	        invalidate(s);
	  }
     	  start(rf);
     	  acquire(rf[rs1], R);	  
     	  acquire(rf[rs2], R);
	  int<32> a1 = rf[rs1];
	  int<32> a2 = rf[rs2];
	  release(rf[rs1]);
	  release(rf[rs2]);
     	  if (op == 0<1>) {
     	     reserve(rf[rd], W);
     	  }
     	  end(rf);
     	  ---
     	  if (!op_is_nil) {
       	     int<8> npc = (a1 == a2) ? (pc + brImm) : (pc + 1<8>);
	     print(npc);
       	     call cpu(npc);
     	  }
     	  int<32> out = a1 + a2;
    	  ---
     	  if (op == 0<1>) {
             block(rf[rd]);
	     print(out);
             rf[rd] <- out;
             release(rf[rd]);
     	  }
     } else {
       ---
       spec_barrier(); //blocking check
       invalidate(s);
       output(true);
     }
}

circuit {
   rename = regfile(int<32>, 5);
   r = FAQueue(rename);
   ti = memory(int<32>, 8);
   i = Queue(ti);
   t = new cpu[r,i];
   call t(0<8>);
}