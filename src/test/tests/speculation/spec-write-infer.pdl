// spec-write-infer.pdl
pipe testwrite(pc: int<32>)[rf: int<32>[5]<c4,s1>(CheckpointQueue), imem: int<40>[8]<a1,a1>]: bool {
     spec_check();
     start(imem);
     int<40> insn <- imem[cast(pc, uint<8>)];
     end(imem);
     s <- speccall testwrite(pc + 1);
     ---
     spec_check();
     int<32> data = insn{36:5};
     uint<5> addr = cast(insn{4:0}, uint<5>);
     start(rf);
     int<32> sdata = rf<a>[addr];
     //should infer this: checkpoint(rf);
     reserve(rf[addr], W); //stupid to put here, but doing it just for the sake of things
     end(rf);
     wdata = data + sdata;     
     ---
     spec_check();
     block(rf[addr]);
     rf[addr] <- wdata;
     ---
     spec_barrier();
     nextPc = (addr{0:0} == 0) ? pc + 2 : pc + 1;
     verify(s, nextPc);
     print("ADDR: %d, DATA: %h", addr, wdata);
     release(rf[addr]);
}

circuit {
 ti = memory(int<40>, 8);
 rf = regfile(int<32>, 5);
 qrf = CheckpointQueue(rf);
 t = new testwrite[qrf, ti];
 call t(0<32>);	
}