// risc-pipe-cache.pdl
def alu(arg1: int<32>, arg2: int<32>, op: uint<3>, flip: bool): int<32> {
    uint<5> shamt = cast(arg2{4:0}, uint<5>);
    if (op == u0<3>) {  //000 == ADD , flip == sub
       if (!flip) {
         return arg1 + arg2;
       } else {
         return arg1 - arg2;
       }
    } else {
    if (op == u1<3>) { //001 == SLL
        return arg1 << shamt;
    } else {
    if (op == u2<3>) { //010 == SLT 
        return (arg1 < arg2) ? 1<32> : 0<32>;
    } else {
    if (op == u3<3>) { //011 == SLTU
       uint<32> un1 = cast(arg1, uint<32>);
       uint<32> un2 = cast(arg2, uint<32>);
       return (un1 < un2) ? 1<32> : 0<32>;
    } else {
    if (op == u4<3>) { //100 == XOR
        return arg1 ^ arg2;
    } else {
    if (op == u5<3>) { //101 == SRL / SRA
      if (!flip) {
        return cast((cast(arg1, uint<32>)) >> shamt, int<32>); //SRL
      } else {
        return arg1 >> shamt; //SRA
      }
    } else {
    if (op == u6<3>) { //110 == OR
        return arg1 | arg2;
    } else { //111 == AND
        return arg1 & arg2;
    }}}}}}}
    
}

//true if taking branch
def br(op:uint<3>, arg1:int<32>, arg2:int<32>): bool {
    if (op == u0<3>) { //BEQ
        return (arg1 == arg2);
    } else {
    if (op == u1<3>) { //BNE
       return (arg1 != arg2);
    } else {
    if (op == u4<3>) { //BLT
       return (arg1 < arg2);
    } else {
    if (op == u5<3>) { //BGE
       return (arg1 >= arg2);
    } else {
    if (op == u6<3>) { //BLTU
        uint<32> un1 = cast(arg1, uint<32>);
        uint<32> un2 = cast(arg2, uint<32>);
        return (un1 < un2);
    } else {
    if (op == u7<3>) { //BGEU
        uint<32> un1 = cast(arg1, uint<32>);
        uint<32> un2 = cast(arg2, uint<32>);
        return(un1 >= un2);
    } else {
      return false;
    }}}}}}
}


def storeMask(off: uint<2>, op: uint<3>): uint<4> {
    if (op == u0<3>) { //SB
       return (u0b0001<4> << off);
    } else {
    if (op == u1<3>) { //SH
       uint<2> shamt = off{1:1} ++ u0<1>;
       return (u0b0011<4> << shamt);
    } else { //SW
      return u0b1111<4>;
    }}
}

def maskLoad(data: int<32>, op: uint<3>, start: uint<2>): int<32> {
    //start == offset in bytes, need to multiply by 8
    uint<5> boff = start ++ u0<3>;
    int<32> tmp = data >> boff;
    uint<8> bdata = cast(tmp, uint<8>);
    uint<16> hdata = cast(tmp, uint<16>);

    if (op == u0<3>) { //LB
       return cast(bdata, int<32>);
    } else {
    if (op == u1<3>) { //LH
       return cast(hdata, int<32>);
    } else {
    if (op == u2<3>) { //LW
       return data;
    } else {
    if (op == u4<3>) { //LBU
       uint<32> zext = cast(bdata, uint<32>);
       return cast(zext, int<32>);
    } else {
    if (op == u5<3>) { //LHU
       uint<32> zext = cast(hdata, uint<32>);
       return cast(zext, int<32>);
    } else {
      return 0<32>;
    }}}}}
}

def getValid(ent: int<279>): int<1> {
    return ent{278 : 278};
}
def getTag(ent: int<279>): int<22> {
    return ent{277 : 256};
}

def getData(ent: int<279>, offset: uint<3>): int<32> {
    uint<9> shamt = u32<6> * offset;
    int<279> temp = ent >> shamt;
    return temp{31 : 0};
}

def getAllData(ent: int<279>): int<256> {
    return ent{255 : 0};
}

def getAddrTag(addr: uint<32>): int<22> {
    return cast(addr{31 : 10}, int<22>);
}

def getAddrIdx(addr: uint<32>): uint<7> {
    return addr{9 : 3};
}

def getAddrOffset(addr: uint<32>): uint<3> {
    return addr{2 : 0};
}

def alignMem(addr: uint<32>): uint<32> {
    return addr >> 3; //offset is 3 bits
}

def getWriteMask(offset: uint<3>, mask: uint<4>): uint<32> {   
    uint<6> shamt = (u4<3> * offset);
    return(cast(mask, uint<32>) << shamt);
}

def getBitwiseWriteMask(offset: uint<3>, mask: uint<4>): int<256> {
    uint<9> shamt = (u32<6> * offset);
    uint<32> ex1 = ((mask{0 : 0} == 1) ? u0xff<32> : u0<32>);
    uint<32> ex2 = ex1 | ((mask{1 : 1} == 1) ? u0xff00<32> : u0<32>);
    uint<32> ex3 = ex2 | ((mask{2 : 2} == 1) ? u0xff0000<32> : u0<32>);
    uint<32> expanded = ex3 | ((mask{3 : 3} == 1) ? (u0xff0000<24> ++ u0x00<8>) : u0<32>);
    return cast((cast(expanded, uint<256>) << shamt), int<256>);
}

//write-through, write-allocate, 128 entries, block size = 8 (capacity = 4KB)
pipe dmcache(addr: uint<32>, din: int<32>, bmask: uint<4>, isWrite: bool)[entries: int<279>[7]<c,s>(FAQueue), mainmem: int<256>[32]<a2,a2>]: int<32> {

     idx = getAddrIdx(addr);

     start(entries);
     entry = entries<a>[idx];
//     print("Accessing isWrite %b, entry %h", isWrite, entry);
     valid = getValid(entry);
     tag = getTag(entry);
     addrtag = getAddrTag(addr);

     hit = (valid == 1) && (tag == addrtag);
     if (isWrite || !hit) {
     	reserve(entries[idx]);
     }
     end(entries);

     offset = getAddrOffset(addr);
     //want single cycle response on hit
     if (hit || isWrite) {
     	dout = (isWrite) ? 0 : getData(entry, offset);
//	print("hit resp");
     	output(dout);
     }

     //on miss or writes access mainmem
     uint<9> shamt = u32<6> * offset;
     start(mainmem);
     mainaddr = alignMem(addr);
     if (!hit) {
//        print("Reading line from mainmem addr %d", mainaddr);
     	int<256> newline <- mainmem[mainaddr]; //read/write allocate
     } else {
        int<256> newline <- getAllData(entry); //existing line to update on write hit
     }
     if (isWrite) {
        uint<256> tmp = cast(din, uint<256>) << (shamt);
     	int<256> shiftedData = cast(tmp, int<256>);
//	print("Writing %h with mask %h", shiftedData, getWriteMask(offset, bmask));
        mainmem[mainaddr, getWriteMask(offset, bmask)] <- shiftedData; //write through policy
     }
     end(mainmem);

     ---
//     print("Old line is %h", newline);     
     if (!hit || isWrite) {
      	//update cache entry
//	print("Bitwise mask = %h", getBitwiseWriteMask(offset, bmask));
      	maskedLine = (~(getBitwiseWriteMask(offset, bmask))) & newline; //replace written bits in newline when writing
	writeLine = maskedLine | (getBitwiseWriteMask(offset, bmask) & ((0<224> ++ din) << (shamt)));
     	writtenLine = (isWrite) ? writeLine : newline;
//	print("Written line is %h", writtenLine);
     	nentry = 1<1> ++ addrtag ++ writtenLine;
     	block(entries[idx]);
     	entries[idx] <- nentry;
     	release(entries[idx]);
     }
     
     //output on cache miss for reads
     if (!hit && !isWrite) {
     	int<256> tmpo = (newline >> shamt);
     	oval = tmpo{31 : 0};
//	print("miss resp");
     	output(oval);
     }
}


pipe mul_pipe(arg1: int<32>, arg2: int<32>, op: uint<3>)[]: int<32> {
    uint<32> mag1 = cast(mag(arg1), uint<32>);
    uint<32> mag2 = cast(mag(arg2), uint<32>);
    //MULHU => positive sign always
    int<32> s1 = (op == u3<3>) ? 1<32> : sign(arg1);
    //MULHU/MULHSU => positive sign always
    int<32> s2 = (op >= u2<3>) ? 1<32> : sign(arg2);
    //computation
    uint<32> rr = mag1{15:0} * mag2{15:0};
    uint<32> rl = mag1{15:0} * mag2{31:16};
    uint<32> lr = mag1{31:16} * mag2{15:0};
    uint<32> ll = mag1{31:16} * mag2{31:16};
    ---
    uint<64> t1 = cast(rl, uint<64>) + cast(lr, uint<64>);
    uint<64> t1s = t1 << 16<5>;
    uint<64> mag = (cast(ll, uint<64>) << 32<6>) + t1s + cast(rr, uint<64>);
    int<64> magRes = cast(mag, int<64>);
    int<64> m = (s1 == s2) ? (magRes) : -(magRes);
    if (op == u0<3>) { //MUL
        output m{31:0};
    } else {
     	output m{63:32};
    }
}

pipe multi_stg_div(num: uint<32>, denom: uint<32>, quot: uint<32>, acc: uint<32>, cnt: uint<5>, retQuot: bool)[]: uint<32> {
    uint<32> tmp = acc{30:0} ++ num{31:31};
    uint<32> na = (tmp >= denom) ? (tmp - denom) : (tmp);
    uint<32> nq = (tmp >= denom) ? ((quot << 1){31:1} ++ u1<1>) : (quot << 1);
    uint<32> nnum = num << 1;
    bool done = (cnt == u31<5>);
    if (done) {
        output( (retQuot) ? nq : na );
    } else {
        call multi_stg_div(nnum, denom, nq, na, cnt + u1<5>, retQuot);
    }
}


pipe cpu(pc: int<32>)[rf: int<32>[5]<c2,s>(BypassRF), imem: int<32>[32]<a,a>, dmem: dmcache, div: multi_stg_div, mul: mul_pipe]: bool {
    spec_check();
    start(imem);
    uint<32> pcaddr = cast(pc, uint<32>);
    int<32> insn <- imem[pcaddr];
    end(imem);
    s <- speccall cpu(pc + 1);
    ---
    //This OPCODE is J Self and thus we're using it to signal termination
    bool done = insn == 0x0000006f<32>;
    int<7> opcode = insn{6:0};
    uint<5> rs1 = cast(insn{19:15}, uint<5>);
    uint<5> rs2 = cast(insn{24:20}, uint<5>);
    uint<5> rd = cast(insn{11:7}, uint<5>);
    uint<7> funct7 = cast(insn{31:25}, uint<7>);
    uint<3> funct3 = cast(insn{14:12}, uint<3>);
    int<1> flipBit = insn{30:30};
    int<32> immI = cast(insn{31:20}, int<32>);
    int<32> immS = cast((insn{31:25} ++ insn{11:7}), int<32>);
    int<13> immBTmp = insn{31:31} ++ insn{7:7} ++ insn{30:25} ++ insn{11:8} ++ 0<1>;
    int<32> immB = cast(immBTmp, int<32>);
    int<21> immJTmp = insn{31:31} ++ insn{19:12} ++ insn{20:20} ++ insn{30:21} ++ 0<1>;
    int<32> immJ = cast(immJTmp, int<32>);
    int<12> immJRTmp = insn{31:20};
    int<32> immJR = cast(immJRTmp, int<32>);
    int<32> immU = insn{31:12} ++ 0<12>;
    uint<3> doAdd = u0<3>;
    bool isOpImm = opcode == 0b0010011<7>;
    bool flip = (!isOpImm) && (flipBit == 1<1>);
    bool isLui   = opcode == 0b0110111<7>;
    bool isAui   = opcode == 0b0010111<7>;
    bool isOp    = opcode == 0b0110011<7>;
    bool isJal   = opcode == 0b1101111<7>;
    bool isJalr  = opcode == 0b1100111<7>;
    bool isBranch = opcode == 0b1100011<7>;
    bool isStore = opcode == 0b0100011<7>;
    bool isLoad = opcode == 0b0000011<7>;
    bool isMDiv = (funct7 == u1<7>) && isOp;
    bool isDiv = isMDiv && (funct3 >= u4<3>);
    bool isMul = isMDiv && (funct3 < u4<3>);
    bool needrs1 = !isJal;
    bool needrs2 = isOp || isBranch || isStore || isJalr;
    bool writerd = (rd != u0<5>) && (isOp || isOpImm || isLoad || isJal || isJalr || isLui || isAui);
    spec_barrier();
    bool notBranch = (!isBranch) && (!isJal) && (!isJalr);
    start(rf);
    if (needrs1) {
       reserve(rf[rs1], R);
    }
    if (needrs2) {
       reserve(rf[rs2], R);
    }
    if (writerd) {
       reserve(rf[rd], W);
    }
    end(rf);
    ---
    if (needrs1) {
       block(rf[rs1]);
       int<32> rf1 = rf[rs1];
       release(rf[rs1]);
    } else {
       int<32> rf1 = 0<32>;
    }
    if (needrs2) {
       block(rf[rs2]);
       int<32> rf2 = rf[rs2];
       release(rf[rs2]);
    } else {
       int<32> rf2 = 0<32>;
    }
    bool take = br(funct3, rf1, rf2);
    int<32> tmppc = pc + 1;
    if (!done) {
    if ((isBranch && take) || isJal || isJalr) {
       invalidate(s);
    } else {
       verify(s, tmppc);
    }} else {
       invalidate(s);
    }       
    if (isBranch) {
       //divide by 4 b/c we count instructions not bytes
       int<32> offpc = pc + (immB >> 2);
       int<32> npc = (take) ? (offpc) : tmppc;
    } else {
    if (isJal) {       
       //divide by 4 since it counts bytes instead of insns       
       int<32> npc = cast(pc, int<32>) + (immJ >> 2);
    } else {
    if (isJalr) {
       int<32> npc = (rf1 + immJR) >> 2;
    } else {
       int<32> npc = tmppc;
    }}}
    if ((!done)) {
        if ((isBranch && take) || isJal || isJalr) {
    	   call cpu(npc);
	}
    }    
    split {
    	  case: (isDiv) {
	  	---
		int<32> sdividend = sign(rf1);
		//For REM, ignore sign of divisor
		int<32> sdivisor  = (funct3 == u6<3>) ? 1<32> : sign(rf2);
		bool isSignedDiv = ((funct3 == u4<3>) || (funct3 == u6<3>));
		uint<32> dividend = (isSignedDiv) ? cast(mag(rf1), uint<32>) : cast(rf1, uint<32>);
		uint<32> divisor =  (isSignedDiv) ? cast(mag(rf2), uint<32>) : cast(rf2, uint<32>);
		bool retQuot = funct3 <= u5<3>;
		bool invertRes = isSignedDiv && (sdividend != sdivisor);       
		uint<32> udivout <- call div(dividend, divisor, u0<32>, u0<32>, u0<5>, retQuot);
		int<32> wdata <- 0<32>;
		uint<2> boff = u0<2>;
		int<32> rddata = 0<32>;
	  }
	  case: (isMul) {
	  	int<32> wdata <- call mul(rf1, rf2, funct3);
		uint<2> boff = u0<2>;
		int<32> rddata = 0<32>;
		uint<32> udivout <- u0<32>;
		bool invertRes = false;
	  }
	 default: {
	     int<32> alu_arg1 = (isAui) ? (pc << 2) : rf1;
	     int<32> alu_arg2 = (isAui) ? immU : ((isStore) ? immS : ((isOpImm || isLoad) ? immI : rf2));
	     bool    alu_flip = (isStore || isLoad || isAui) ? false : flip;
	     uint<3> alu_funct3 = (isStore || isLoad || isAui) ? doAdd : funct3;
	     int<32> alu_res = alu(alu_arg1, alu_arg2, alu_funct3, alu_flip);
	     int<32> linkpc = (tmppc << 2);
	     ---
	     if (writerd && (!isLoad) && (!isDiv) && (!isMul)) {
	     	block(rf[rd]);
		int<32> rddata = (isLui) ? immU : ((isJal || isJalr) ? linkpc : alu_res);
		rf[rd] <- rddata;
	     } else {
	        int<32> rddata = 0<32>;
	     }	     
	     uint<32> tmpaddr = cast(alu_res, uint<32>);
	     uint<32> memaddr = (tmpaddr >> 2);		
	     uint<2> boff = cast(alu_res{1:0}, uint<2>);
	     uint<5> nboff = boff ++ u0<3>;
	     int<32> stdata = (rf2 << nboff);	     
	     uint<4> wmask = storeMask(boff, funct3);
	     start(dmem);
	     if (isLoad || isStore) {
	     	int<32> wdata <- call<atomic> dmem(memaddr, stdata, wmask, isStore);
	     } else {
	        int<32> wdata <- 0;
	     }
	     end(dmem);
             uint<32> udivout <- u0<32>;
	     bool invertRes = false;
	  }
    }
    ---
    print("PC: %h", (pc{15:0}) << 2);
    print("INSN: %h", insn);
    if (writerd) {
       if (isLoad || isDiv || isMul) {
          block(rf[rd]);	  
	  int<32> maskedLoad = maskLoad(wdata, funct3, boff);
	  int<32> divdata = (invertRes) ? -(cast(udivout, int<32>)) :  cast(udivout, int<32>);  
       	  int<32> insnout = (isLoad) ? maskedLoad : ((isMul) ? wdata : divdata);
	  rf[rd] <- insnout;
       } else {
       	 int<32> insnout = rddata;
       }
       print("Writing %d to r%d", insnout, rd);
    }
    ---
    if (writerd) {
       release(rf[rd]);
    }  
    if (done) { output(true); }
}

circuit {
    mm = memory(int<256>, 32, 2);
    cmem = regfile(int<279>, 7);
    lr = FAQueue(cmem);
    dcache = new dmcache[lr, mm];
    ti = memory(int<32>, 32);
    rf = rflock BypassRF(int<32>, 5, 8);
    div = new multi_stg_div[];
    mul = new mul_pipe[];
    c = new cpu[rf, ti, dcache, div, mul];
    call c(0<32>);
}