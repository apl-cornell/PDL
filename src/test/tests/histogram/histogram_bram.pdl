// histogram_bram.pdl
/*
n = 128
void histogram ( int feature [] , float weight [] , float hist [] , int n ) {
    for (int i =0; i < n ; ++ i ) {
        int m = feature [ i ];
        float wt = weight [ i ];
        float x = hist [ m ];
        hist [ m ] = x + wt ;
    }
}
*/

pipe hist(counter: uint<10>)[feature: uint<16>[10]<a,a>, weight: uint<32>[10]<a,a>, h: uint<32>[10]<a,a>(FAQueue)]: bool {
    bool done = counter >= u1000<10>;
    if (!done) {
        call hist(counter + u1<10>);
    start(feature);
    start(weight);
    uint<16> m <- feature[counter];
    uint<32> wt <- weight[counter];
    end(feature);
    end(weight);
    ---
    uint<10> m1  = m{9:0};
    uint<10> mcp = m{9:0};

    start(h);
    reserve(h[mcp]);    
    uint<32> oldh <- h<a>[m1];    
    end(h);
    ---
    uint<32> nm = oldh + wt;
    print(nm);
    block(h[mcp]);
    h[mcp] <- nm;
    release(h[mcp]);
    ---
    }

    if (done) {
      output(true);
    }
}

circuit {
       tf = memory(uint<16>, 10);
       tw = memory(uint<32>, 10);
       th = memory(uint<32>, 10);
       h = FAQueue(th);
       hg = new hist[tf, tw, h];
       call hg(u0<10>);
 }