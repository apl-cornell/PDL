/*
n = 128
void histogram ( int feature [] , float weight [] , float hist [] , int n ) {
    for (int i =0; i < n ; ++ i ) {
        int m = feature [ i ];
        float wt = weight [ i ];
        float x = hist [ m ];
        hist [ m ] = x + wt ;
    }
}
*/

pipe hist(counter: uint<10>)[feature: uint<10>[10]<a,a>(FAQueue), weight: uint<32>[10]<a,a>(FAQueue), h: uint<32>[10]<a,a>(FAQueue)]: bool {
    if (counter < u1000<10>) {
        call hist(counter + u1<10>);
    start(feature);
    acquire(feature[counter], R);
    end(feature);
    start(weight);
    acquire(weight[counter], R);
    end(weight);
    uint<10> m <- feature[counter];
    uint<32> wt <- weight[counter];
    release(feature[counter]);
    release(weight[counter]);
    ---
    uint<10> mcp = m;

    start(h);
    acquire(h[m], R);
    acquire(h[mcp], W);
    end(h);
    uint<32> oldh <- h[m];
    release(h[m]);
    ---
    uint<32> nm = oldh + wt;
    print(nm);
    h[mcp] <- nm;
    release(h[mcp]);
    ---
    }
    if (counter >= u1000<10>) {
      output(true);
    }
}

circuit {
       tf = memory(uint<10>, 10);
       f = FAQueue(tf);
       tw = memory(uint<32>, 10);
       w = FAQueue(tw);
       th = memory(uint<32>, 10);
       h = FAQueue(th);
       hg = new hist[f, w, h];
       call hg(u0<10>);
 }