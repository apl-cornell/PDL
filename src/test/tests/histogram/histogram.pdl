/*
n = 128
void histogram ( int feature [] , float weight [] , float hist [] , int n ) {
    for (int i =0; i < n ; ++ i ) {
        int m = feature [ i ];
        float wt = weight [ i ];
        float x = hist [ m ];
        hist [ m ] = x + wt ;
    }
}
*/


pipe hist(counter: uint<10>)[feature: uint<16>[10]<c,s>(FAQueue), weight: uint<32>[10]<c,s>(FAQueue), h: uint<32>[10]<c,s>(FAQueue)]: bool {
    bool done = counter >= u1000<10>;
    if (!done) {
        call hist(counter + u1<10>);
        start(feature);
        acquire(feature[counter], R);
        end(feature);
        start(weight);
        acquire(weight[counter], R);
        end(weight);
        uint<10> m = feature[counter];
        uint<32> wt = weight[counter];
        release(feature[counter]);
        release(weight[counter]);
        ---
        uint<10> mcp = m;
        start(h);
        acquire(h[m], R);
        acquire(h[mcp], W);
        end(h);
        uint<32> nm = h[m] + wt;
        release(h[m]);
        print(nm);
        ---
        h[mcp] <- nm;
        release(h[mcp]);
        ---
     }

     if (done) {
     	output(true);
     }
   }
   
   circuit {
       tf = regfile(uint<10>, 10);
       f = FAQueue(tf);
       tw = regfile(uint<32>, 10);
       w = FAQueue(tw);
       th = regfile(uint<32>, 10);
       h = FAQueue(th);
       hg = new hist[f, w, h];
       call hg(u0<10>);
   }