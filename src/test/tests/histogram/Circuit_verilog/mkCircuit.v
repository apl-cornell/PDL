//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// _into_req                      O     2 reg
// RDY__into_req                  O     1
// RDY__into_resp                 O     1 const
// _into_checkHandle              O     1
// RDY__into_checkHandle          O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _into_req_counter              I    10
// _into_checkHandle_handle       I     2
// EN__into_resp                  I     1
// EN__into_req                   I     1
//
// Combinational paths from inputs to outputs:
//   _into_checkHandle_handle -> _into_checkHandle
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCircuit(CLK,
		 RST_N,

		 _into_req_counter,
		 EN__into_req,
		 _into_req,
		 RDY__into_req,

		 EN__into_resp,
		 RDY__into_resp,

		 _into_checkHandle_handle,
		 _into_checkHandle,
		 RDY__into_checkHandle);
  input  CLK;
  input  RST_N;

  // actionvalue method _into_req
  input  [9 : 0] _into_req_counter;
  input  EN__into_req;
  output [1 : 0] _into_req;
  output RDY__into_req;

  // action method _into_resp
  input  EN__into_resp;
  output RDY__into_resp;

  // value method _into_checkHandle
  input  [1 : 0] _into_checkHandle_handle;
  output _into_checkHandle;
  output RDY__into_checkHandle;

  // signals for module outputs
  wire [1 : 0] _into_req;
  wire RDY__into_checkHandle,
       RDY__into_req,
       RDY__into_resp,
       _into_checkHandle;

  // inlined wires
  wire [13 : 0] hg_fifo__input__TO_Start_rv$port0__write_1,
		hg_fifo__input__TO_Start_rv$port1__read,
		hg_fifo__input__TO_Start_rv$port2__read;
  wire [11 : 0] o_fifo__input__TO_Start_enq_data$wget;
  wire h_l_lockVec_0_doRel$whas,
       h_l_lockVec_0_nextId_lat_0$whas,
       h_l_lockVec_1_doRel$whas,
       h_l_lockVec_1_nextId_lat_0$whas,
       h_l_lockVec_2_doRel$whas,
       h_l_lockVec_2_nextId_lat_0$whas,
       h_l_lockVec_3_doRel$whas,
       h_l_lockVec_3_nextId_lat_0$whas,
       h_l_resVec_0$whas,
       h_l_resVec_1$whas,
       h_l_resVec_2$whas,
       h_l_resVec_3$whas,
       hg_fifo__input__TO_Start_rv$EN_port0__write,
       hg_fifo__input__TO_Start_rv$EN_port1__write,
       o_doRel$whas,
       o_fifo__input__TO_Start_enq_data$whas;

  // register f_l_entryVec_0
  reg [10 : 0] f_l_entryVec_0;
  wire [10 : 0] f_l_entryVec_0$D_IN;
  wire f_l_entryVec_0$EN;

  // register f_l_entryVec_1
  reg [10 : 0] f_l_entryVec_1;
  wire [10 : 0] f_l_entryVec_1$D_IN;
  wire f_l_entryVec_1$EN;

  // register f_l_entryVec_2
  reg [10 : 0] f_l_entryVec_2;
  wire [10 : 0] f_l_entryVec_2$D_IN;
  wire f_l_entryVec_2$EN;

  // register f_l_entryVec_3
  reg [10 : 0] f_l_entryVec_3;
  wire [10 : 0] f_l_entryVec_3$D_IN;
  wire f_l_entryVec_3$EN;

  // register f_l_lockVec_0_empty
  reg f_l_lockVec_0_empty;
  wire f_l_lockVec_0_empty$D_IN, f_l_lockVec_0_empty$EN;

  // register f_l_lockVec_0_nextId_rl
  reg [1 : 0] f_l_lockVec_0_nextId_rl;
  wire [1 : 0] f_l_lockVec_0_nextId_rl$D_IN;
  wire f_l_lockVec_0_nextId_rl$EN;

  // register f_l_lockVec_0_owner
  reg [1 : 0] f_l_lockVec_0_owner;
  wire [1 : 0] f_l_lockVec_0_owner$D_IN;
  wire f_l_lockVec_0_owner$EN;

  // register f_l_lockVec_1_empty
  reg f_l_lockVec_1_empty;
  wire f_l_lockVec_1_empty$D_IN, f_l_lockVec_1_empty$EN;

  // register f_l_lockVec_1_nextId_rl
  reg [1 : 0] f_l_lockVec_1_nextId_rl;
  wire [1 : 0] f_l_lockVec_1_nextId_rl$D_IN;
  wire f_l_lockVec_1_nextId_rl$EN;

  // register f_l_lockVec_1_owner
  reg [1 : 0] f_l_lockVec_1_owner;
  wire [1 : 0] f_l_lockVec_1_owner$D_IN;
  wire f_l_lockVec_1_owner$EN;

  // register f_l_lockVec_2_empty
  reg f_l_lockVec_2_empty;
  wire f_l_lockVec_2_empty$D_IN, f_l_lockVec_2_empty$EN;

  // register f_l_lockVec_2_nextId_rl
  reg [1 : 0] f_l_lockVec_2_nextId_rl;
  wire [1 : 0] f_l_lockVec_2_nextId_rl$D_IN;
  wire f_l_lockVec_2_nextId_rl$EN;

  // register f_l_lockVec_2_owner
  reg [1 : 0] f_l_lockVec_2_owner;
  wire [1 : 0] f_l_lockVec_2_owner$D_IN;
  wire f_l_lockVec_2_owner$EN;

  // register f_l_lockVec_3_empty
  reg f_l_lockVec_3_empty;
  wire f_l_lockVec_3_empty$D_IN, f_l_lockVec_3_empty$EN;

  // register f_l_lockVec_3_nextId_rl
  reg [1 : 0] f_l_lockVec_3_nextId_rl;
  wire [1 : 0] f_l_lockVec_3_nextId_rl$D_IN;
  wire f_l_lockVec_3_nextId_rl$EN;

  // register f_l_lockVec_3_owner
  reg [1 : 0] f_l_lockVec_3_owner;
  wire [1 : 0] f_l_lockVec_3_owner$D_IN;
  wire f_l_lockVec_3_owner$EN;

  // register h_l_entryVec_0
  reg [10 : 0] h_l_entryVec_0;
  wire [10 : 0] h_l_entryVec_0$D_IN;
  wire h_l_entryVec_0$EN;

  // register h_l_entryVec_1
  reg [10 : 0] h_l_entryVec_1;
  wire [10 : 0] h_l_entryVec_1$D_IN;
  wire h_l_entryVec_1$EN;

  // register h_l_entryVec_2
  reg [10 : 0] h_l_entryVec_2;
  wire [10 : 0] h_l_entryVec_2$D_IN;
  wire h_l_entryVec_2$EN;

  // register h_l_entryVec_3
  reg [10 : 0] h_l_entryVec_3;
  wire [10 : 0] h_l_entryVec_3$D_IN;
  wire h_l_entryVec_3$EN;

  // register h_l_lockVec_0_empty
  reg h_l_lockVec_0_empty;
  wire h_l_lockVec_0_empty$D_IN, h_l_lockVec_0_empty$EN;

  // register h_l_lockVec_0_nextId_rl
  reg [1 : 0] h_l_lockVec_0_nextId_rl;
  wire [1 : 0] h_l_lockVec_0_nextId_rl$D_IN;
  wire h_l_lockVec_0_nextId_rl$EN;

  // register h_l_lockVec_0_owner
  reg [1 : 0] h_l_lockVec_0_owner;
  wire [1 : 0] h_l_lockVec_0_owner$D_IN;
  wire h_l_lockVec_0_owner$EN;

  // register h_l_lockVec_1_empty
  reg h_l_lockVec_1_empty;
  wire h_l_lockVec_1_empty$D_IN, h_l_lockVec_1_empty$EN;

  // register h_l_lockVec_1_nextId_rl
  reg [1 : 0] h_l_lockVec_1_nextId_rl;
  wire [1 : 0] h_l_lockVec_1_nextId_rl$D_IN;
  wire h_l_lockVec_1_nextId_rl$EN;

  // register h_l_lockVec_1_owner
  reg [1 : 0] h_l_lockVec_1_owner;
  wire [1 : 0] h_l_lockVec_1_owner$D_IN;
  wire h_l_lockVec_1_owner$EN;

  // register h_l_lockVec_2_empty
  reg h_l_lockVec_2_empty;
  wire h_l_lockVec_2_empty$D_IN, h_l_lockVec_2_empty$EN;

  // register h_l_lockVec_2_nextId_rl
  reg [1 : 0] h_l_lockVec_2_nextId_rl;
  wire [1 : 0] h_l_lockVec_2_nextId_rl$D_IN;
  wire h_l_lockVec_2_nextId_rl$EN;

  // register h_l_lockVec_2_owner
  reg [1 : 0] h_l_lockVec_2_owner;
  wire [1 : 0] h_l_lockVec_2_owner$D_IN;
  wire h_l_lockVec_2_owner$EN;

  // register h_l_lockVec_3_empty
  reg h_l_lockVec_3_empty;
  wire h_l_lockVec_3_empty$D_IN, h_l_lockVec_3_empty$EN;

  // register h_l_lockVec_3_nextId_rl
  reg [1 : 0] h_l_lockVec_3_nextId_rl;
  wire [1 : 0] h_l_lockVec_3_nextId_rl$D_IN;
  wire h_l_lockVec_3_nextId_rl$EN;

  // register h_l_lockVec_3_owner
  reg [1 : 0] h_l_lockVec_3_owner;
  wire [1 : 0] h_l_lockVec_3_owner$D_IN;
  wire h_l_lockVec_3_owner$EN;

  // register hg
  reg [2 : 0] hg;
  wire [2 : 0] hg$D_IN;
  wire hg$EN;

  // register hg_feature_lock_region
  reg hg_feature_lock_region;
  wire hg_feature_lock_region$D_IN, hg_feature_lock_region$EN;

  // register hg_fifo__input__TO_Start_rv
  reg [13 : 0] hg_fifo__input__TO_Start_rv;
  wire [13 : 0] hg_fifo__input__TO_Start_rv$D_IN;
  wire hg_fifo__input__TO_Start_rv$EN;

  // register hg_h_lock_region
  reg hg_h_lock_region;
  wire hg_h_lock_region$D_IN, hg_h_lock_region$EN;

  // register hg_outputQueue_nextTag_rl
  reg [2 : 0] hg_outputQueue_nextTag_rl;
  wire [2 : 0] hg_outputQueue_nextTag_rl$D_IN;
  wire hg_outputQueue_nextTag_rl$EN;

  // register hg_outputQueue_val
  reg [1 : 0] hg_outputQueue_val;
  wire [1 : 0] hg_outputQueue_val$D_IN;
  wire hg_outputQueue_val$EN;

  // register hg_weight_lock_region
  reg hg_weight_lock_region;
  wire hg_weight_lock_region$D_IN, hg_weight_lock_region$EN;

  // register o
  reg [1 : 0] o;
  wire [1 : 0] o$D_IN;
  wire o$EN;

  // register o_busyReg
  reg o_busyReg;
  wire o_busyReg$D_IN, o_busyReg$EN;

  // register o_empty
  reg o_empty;
  wire o_empty$D_IN, o_empty$EN;

  // register o_h_lock_region
  reg o_h_lock_region;
  wire o_h_lock_region$D_IN, o_h_lock_region$EN;

  // register o_nextId_rl
  reg [1 : 0] o_nextId_rl;
  wire [1 : 0] o_nextId_rl$D_IN;
  wire o_nextId_rl$EN;

  // register o_outputQueue_nextTag_rl
  reg [1 : 0] o_outputQueue_nextTag_rl;
  wire [1 : 0] o_outputQueue_nextTag_rl$D_IN;
  wire o_outputQueue_nextTag_rl$EN;

  // register o_outputQueue_val
  reg o_outputQueue_val;
  wire o_outputQueue_val$D_IN, o_outputQueue_val$EN;

  // register o_owner
  reg [1 : 0] o_owner;
  wire [1 : 0] o_owner$D_IN;
  wire o_owner$EN;

  // register w_l_entryVec_0
  reg [10 : 0] w_l_entryVec_0;
  wire [10 : 0] w_l_entryVec_0$D_IN;
  wire w_l_entryVec_0$EN;

  // register w_l_entryVec_1
  reg [10 : 0] w_l_entryVec_1;
  wire [10 : 0] w_l_entryVec_1$D_IN;
  wire w_l_entryVec_1$EN;

  // register w_l_entryVec_2
  reg [10 : 0] w_l_entryVec_2;
  wire [10 : 0] w_l_entryVec_2$D_IN;
  wire w_l_entryVec_2$EN;

  // register w_l_entryVec_3
  reg [10 : 0] w_l_entryVec_3;
  wire [10 : 0] w_l_entryVec_3$D_IN;
  wire w_l_entryVec_3$EN;

  // register w_l_lockVec_0_empty
  reg w_l_lockVec_0_empty;
  wire w_l_lockVec_0_empty$D_IN, w_l_lockVec_0_empty$EN;

  // register w_l_lockVec_0_nextId_rl
  reg [1 : 0] w_l_lockVec_0_nextId_rl;
  wire [1 : 0] w_l_lockVec_0_nextId_rl$D_IN;
  wire w_l_lockVec_0_nextId_rl$EN;

  // register w_l_lockVec_0_owner
  reg [1 : 0] w_l_lockVec_0_owner;
  wire [1 : 0] w_l_lockVec_0_owner$D_IN;
  wire w_l_lockVec_0_owner$EN;

  // register w_l_lockVec_1_empty
  reg w_l_lockVec_1_empty;
  wire w_l_lockVec_1_empty$D_IN, w_l_lockVec_1_empty$EN;

  // register w_l_lockVec_1_nextId_rl
  reg [1 : 0] w_l_lockVec_1_nextId_rl;
  wire [1 : 0] w_l_lockVec_1_nextId_rl$D_IN;
  wire w_l_lockVec_1_nextId_rl$EN;

  // register w_l_lockVec_1_owner
  reg [1 : 0] w_l_lockVec_1_owner;
  wire [1 : 0] w_l_lockVec_1_owner$D_IN;
  wire w_l_lockVec_1_owner$EN;

  // register w_l_lockVec_2_empty
  reg w_l_lockVec_2_empty;
  wire w_l_lockVec_2_empty$D_IN, w_l_lockVec_2_empty$EN;

  // register w_l_lockVec_2_nextId_rl
  reg [1 : 0] w_l_lockVec_2_nextId_rl;
  wire [1 : 0] w_l_lockVec_2_nextId_rl$D_IN;
  wire w_l_lockVec_2_nextId_rl$EN;

  // register w_l_lockVec_2_owner
  reg [1 : 0] w_l_lockVec_2_owner;
  wire [1 : 0] w_l_lockVec_2_owner$D_IN;
  wire w_l_lockVec_2_owner$EN;

  // register w_l_lockVec_3_empty
  reg w_l_lockVec_3_empty;
  wire w_l_lockVec_3_empty$D_IN, w_l_lockVec_3_empty$EN;

  // register w_l_lockVec_3_nextId_rl
  reg [1 : 0] w_l_lockVec_3_nextId_rl;
  wire [1 : 0] w_l_lockVec_3_nextId_rl$D_IN;
  wire w_l_lockVec_3_nextId_rl$EN;

  // register w_l_lockVec_3_owner
  reg [1 : 0] w_l_lockVec_3_owner;
  wire [1 : 0] w_l_lockVec_3_owner$D_IN;
  wire w_l_lockVec_3_owner$EN;

  // ports of submodule f_l_lockVec_0_nextId_dummy2_0
  wire f_l_lockVec_0_nextId_dummy2_0$D_IN, f_l_lockVec_0_nextId_dummy2_0$EN;

  // ports of submodule f_l_lockVec_0_nextId_dummy2_1
  wire f_l_lockVec_0_nextId_dummy2_1$D_IN,
       f_l_lockVec_0_nextId_dummy2_1$EN,
       f_l_lockVec_0_nextId_dummy2_1$Q_OUT;

  // ports of submodule f_l_lockVec_1_nextId_dummy2_0
  wire f_l_lockVec_1_nextId_dummy2_0$D_IN, f_l_lockVec_1_nextId_dummy2_0$EN;

  // ports of submodule f_l_lockVec_1_nextId_dummy2_1
  wire f_l_lockVec_1_nextId_dummy2_1$D_IN,
       f_l_lockVec_1_nextId_dummy2_1$EN,
       f_l_lockVec_1_nextId_dummy2_1$Q_OUT;

  // ports of submodule f_l_lockVec_2_nextId_dummy2_0
  wire f_l_lockVec_2_nextId_dummy2_0$D_IN, f_l_lockVec_2_nextId_dummy2_0$EN;

  // ports of submodule f_l_lockVec_2_nextId_dummy2_1
  wire f_l_lockVec_2_nextId_dummy2_1$D_IN,
       f_l_lockVec_2_nextId_dummy2_1$EN,
       f_l_lockVec_2_nextId_dummy2_1$Q_OUT;

  // ports of submodule f_l_lockVec_3_nextId_dummy2_0
  wire f_l_lockVec_3_nextId_dummy2_0$D_IN, f_l_lockVec_3_nextId_dummy2_0$EN;

  // ports of submodule f_l_lockVec_3_nextId_dummy2_1
  wire f_l_lockVec_3_nextId_dummy2_1$D_IN,
       f_l_lockVec_3_nextId_dummy2_1$EN,
       f_l_lockVec_3_nextId_dummy2_1$Q_OUT;

  // ports of submodule h_l_lockVec_0_nextId_dummy2_0
  wire h_l_lockVec_0_nextId_dummy2_0$D_IN,
       h_l_lockVec_0_nextId_dummy2_0$EN,
       h_l_lockVec_0_nextId_dummy2_0$Q_OUT;

  // ports of submodule h_l_lockVec_0_nextId_dummy2_1
  wire h_l_lockVec_0_nextId_dummy2_1$D_IN,
       h_l_lockVec_0_nextId_dummy2_1$EN,
       h_l_lockVec_0_nextId_dummy2_1$Q_OUT;

  // ports of submodule h_l_lockVec_1_nextId_dummy2_0
  wire h_l_lockVec_1_nextId_dummy2_0$D_IN,
       h_l_lockVec_1_nextId_dummy2_0$EN,
       h_l_lockVec_1_nextId_dummy2_0$Q_OUT;

  // ports of submodule h_l_lockVec_1_nextId_dummy2_1
  wire h_l_lockVec_1_nextId_dummy2_1$D_IN,
       h_l_lockVec_1_nextId_dummy2_1$EN,
       h_l_lockVec_1_nextId_dummy2_1$Q_OUT;

  // ports of submodule h_l_lockVec_2_nextId_dummy2_0
  wire h_l_lockVec_2_nextId_dummy2_0$D_IN,
       h_l_lockVec_2_nextId_dummy2_0$EN,
       h_l_lockVec_2_nextId_dummy2_0$Q_OUT;

  // ports of submodule h_l_lockVec_2_nextId_dummy2_1
  wire h_l_lockVec_2_nextId_dummy2_1$D_IN,
       h_l_lockVec_2_nextId_dummy2_1$EN,
       h_l_lockVec_2_nextId_dummy2_1$Q_OUT;

  // ports of submodule h_l_lockVec_3_nextId_dummy2_0
  wire h_l_lockVec_3_nextId_dummy2_0$D_IN,
       h_l_lockVec_3_nextId_dummy2_0$EN,
       h_l_lockVec_3_nextId_dummy2_0$Q_OUT;

  // ports of submodule h_l_lockVec_3_nextId_dummy2_1
  wire h_l_lockVec_3_nextId_dummy2_1$D_IN,
       h_l_lockVec_3_nextId_dummy2_1$EN,
       h_l_lockVec_3_nextId_dummy2_1$Q_OUT;

  // ports of submodule hg_fifo_Stage__0_TO_Stage__1
  wire [47 : 0] hg_fifo_Stage__0_TO_Stage__1$D_IN,
		hg_fifo_Stage__0_TO_Stage__1$D_OUT;
  wire hg_fifo_Stage__0_TO_Stage__1$CLR,
       hg_fifo_Stage__0_TO_Stage__1$DEQ,
       hg_fifo_Stage__0_TO_Stage__1$EMPTY_N,
       hg_fifo_Stage__0_TO_Stage__1$ENQ,
       hg_fifo_Stage__0_TO_Stage__1$FULL_N;

  // ports of submodule hg_fifo_Stage__1_TO_Stage__2
  wire [2 : 0] hg_fifo_Stage__1_TO_Stage__2$D_IN,
	       hg_fifo_Stage__1_TO_Stage__2$D_OUT;
  wire hg_fifo_Stage__1_TO_Stage__2$CLR,
       hg_fifo_Stage__1_TO_Stage__2$DEQ,
       hg_fifo_Stage__1_TO_Stage__2$EMPTY_N,
       hg_fifo_Stage__1_TO_Stage__2$ENQ,
       hg_fifo_Stage__1_TO_Stage__2$FULL_N;

  // ports of submodule hg_fifo_Start_TO_Stage__0
  wire [44 : 0] hg_fifo_Start_TO_Stage__0$D_IN,
		hg_fifo_Start_TO_Stage__0$D_OUT;
  wire hg_fifo_Start_TO_Stage__0$CLR,
       hg_fifo_Start_TO_Stage__0$DEQ,
       hg_fifo_Start_TO_Stage__0$EMPTY_N,
       hg_fifo_Start_TO_Stage__0$ENQ,
       hg_fifo_Start_TO_Stage__0$FULL_N;

  // ports of submodule hg_outputQueue_nextTag_dummy2_0
  wire hg_outputQueue_nextTag_dummy2_0$D_IN,
       hg_outputQueue_nextTag_dummy2_0$EN,
       hg_outputQueue_nextTag_dummy2_0$Q_OUT;

  // ports of submodule hg_outputQueue_nextTag_dummy2_1
  wire hg_outputQueue_nextTag_dummy2_1$D_IN,
       hg_outputQueue_nextTag_dummy2_1$EN,
       hg_outputQueue_nextTag_dummy2_1$Q_OUT;

  // ports of submodule o_fifo_Stage__1_TO_Stage__3
  wire [4 : 0] o_fifo_Stage__1_TO_Stage__3$D_IN,
	       o_fifo_Stage__1_TO_Stage__3$D_OUT;
  wire o_fifo_Stage__1_TO_Stage__3$CLR,
       o_fifo_Stage__1_TO_Stage__3$DEQ,
       o_fifo_Stage__1_TO_Stage__3$EMPTY_N,
       o_fifo_Stage__1_TO_Stage__3$ENQ,
       o_fifo_Stage__1_TO_Stage__3$FULL_N;

  // ports of submodule o_fifo_Start_TO_Stage__1
  wire [14 : 0] o_fifo_Start_TO_Stage__1$D_IN, o_fifo_Start_TO_Stage__1$D_OUT;
  wire o_fifo_Start_TO_Stage__1$CLR,
       o_fifo_Start_TO_Stage__1$DEQ,
       o_fifo_Start_TO_Stage__1$EMPTY_N,
       o_fifo_Start_TO_Stage__1$ENQ,
       o_fifo_Start_TO_Stage__1$FULL_N;

  // ports of submodule o_fifo_Start_TO_Stage__3
  wire [2 : 0] o_fifo_Start_TO_Stage__3$D_IN, o_fifo_Start_TO_Stage__3$D_OUT;
  wire o_fifo_Start_TO_Stage__3$CLR,
       o_fifo_Start_TO_Stage__3$DEQ,
       o_fifo_Start_TO_Stage__3$EMPTY_N,
       o_fifo_Start_TO_Stage__3$ENQ,
       o_fifo_Start_TO_Stage__3$FULL_N;

  // ports of submodule o_fifo_Start_TO_Stage__3_1
  wire [1 : 0] o_fifo_Start_TO_Stage__3_1$D_IN;
  wire o_fifo_Start_TO_Stage__3_1$CLR,
       o_fifo_Start_TO_Stage__3_1$DEQ,
       o_fifo_Start_TO_Stage__3_1$EMPTY_N,
       o_fifo_Start_TO_Stage__3_1$ENQ,
       o_fifo_Start_TO_Stage__3_1$FULL_N;

  // ports of submodule o_fifo__input__TO_Start_f
  wire [11 : 0] o_fifo__input__TO_Start_f$D_IN,
		o_fifo__input__TO_Start_f$D_OUT;
  wire o_fifo__input__TO_Start_f$CLR,
       o_fifo__input__TO_Start_f$DEQ,
       o_fifo__input__TO_Start_f$EMPTY_N,
       o_fifo__input__TO_Start_f$ENQ,
       o_fifo__input__TO_Start_f$FULL_N;

  // ports of submodule o_nextId_dummy2_0
  wire o_nextId_dummy2_0$D_IN, o_nextId_dummy2_0$EN, o_nextId_dummy2_0$Q_OUT;

  // ports of submodule o_nextId_dummy2_1
  wire o_nextId_dummy2_1$D_IN, o_nextId_dummy2_1$EN, o_nextId_dummy2_1$Q_OUT;

  // ports of submodule o_outputQueue_nextTag_dummy2_0
  wire o_outputQueue_nextTag_dummy2_0$D_IN,
       o_outputQueue_nextTag_dummy2_0$EN,
       o_outputQueue_nextTag_dummy2_0$Q_OUT;

  // ports of submodule o_outputQueue_nextTag_dummy2_1
  wire o_outputQueue_nextTag_dummy2_1$D_IN,
       o_outputQueue_nextTag_dummy2_1$EN,
       o_outputQueue_nextTag_dummy2_1$Q_OUT;

  // ports of submodule tf_rf
  wire [15 : 0] tf_rf$D_IN, tf_rf$D_OUT_1;
  wire [9 : 0] tf_rf$ADDR_1,
	       tf_rf$ADDR_2,
	       tf_rf$ADDR_3,
	       tf_rf$ADDR_4,
	       tf_rf$ADDR_5,
	       tf_rf$ADDR_IN;
  wire tf_rf$WE;

  // ports of submodule th_rf
  wire [31 : 0] th_rf$D_IN, th_rf$D_OUT_1;
  wire [9 : 0] th_rf$ADDR_1,
	       th_rf$ADDR_2,
	       th_rf$ADDR_3,
	       th_rf$ADDR_4,
	       th_rf$ADDR_5,
	       th_rf$ADDR_IN;
  wire th_rf$WE;

  // ports of submodule tw_rf
  wire [31 : 0] tw_rf$D_IN, tw_rf$D_OUT_1;
  wire [9 : 0] tw_rf$ADDR_1,
	       tw_rf$ADDR_2,
	       tw_rf$ADDR_3,
	       tw_rf$ADDR_4,
	       tw_rf$ADDR_5,
	       tw_rf$ADDR_IN;
  wire tw_rf$WE;

  // ports of submodule w_l_lockVec_0_nextId_dummy2_0
  wire w_l_lockVec_0_nextId_dummy2_0$D_IN, w_l_lockVec_0_nextId_dummy2_0$EN;

  // ports of submodule w_l_lockVec_0_nextId_dummy2_1
  wire w_l_lockVec_0_nextId_dummy2_1$D_IN,
       w_l_lockVec_0_nextId_dummy2_1$EN,
       w_l_lockVec_0_nextId_dummy2_1$Q_OUT;

  // ports of submodule w_l_lockVec_1_nextId_dummy2_0
  wire w_l_lockVec_1_nextId_dummy2_0$D_IN, w_l_lockVec_1_nextId_dummy2_0$EN;

  // ports of submodule w_l_lockVec_1_nextId_dummy2_1
  wire w_l_lockVec_1_nextId_dummy2_1$D_IN,
       w_l_lockVec_1_nextId_dummy2_1$EN,
       w_l_lockVec_1_nextId_dummy2_1$Q_OUT;

  // ports of submodule w_l_lockVec_2_nextId_dummy2_0
  wire w_l_lockVec_2_nextId_dummy2_0$D_IN, w_l_lockVec_2_nextId_dummy2_0$EN;

  // ports of submodule w_l_lockVec_2_nextId_dummy2_1
  wire w_l_lockVec_2_nextId_dummy2_1$D_IN,
       w_l_lockVec_2_nextId_dummy2_1$EN,
       w_l_lockVec_2_nextId_dummy2_1$Q_OUT;

  // ports of submodule w_l_lockVec_3_nextId_dummy2_0
  wire w_l_lockVec_3_nextId_dummy2_0$D_IN, w_l_lockVec_3_nextId_dummy2_0$EN;

  // ports of submodule w_l_lockVec_3_nextId_dummy2_1
  wire w_l_lockVec_3_nextId_dummy2_1$D_IN,
       w_l_lockVec_3_nextId_dummy2_1$EN,
       w_l_lockVec_3_nextId_dummy2_1$Q_OUT;

  // rule scheduling signals
  wire WILL_FIRE_RL_h_l_freelock,
       WILL_FIRE_RL_h_l_freelock_1,
       WILL_FIRE_RL_h_l_freelock_2,
       WILL_FIRE_RL_h_l_freelock_3,
       WILL_FIRE_RL_hg_s_Stage__0_execute,
       WILL_FIRE_RL_hg_s_Stage__1_execute,
       WILL_FIRE_RL_hg_s_Stage__2_execute,
       WILL_FIRE_RL_o_s_Stage__3_execute,
       WILL_FIRE_RL_o_s_Start_execute;

  // inputs to muxes for submodule ports
  wire [11 : 0] MUX_o_fifo__input__TO_Start_enq_data$wset_1__VAL_1,
		MUX_o_fifo__input__TO_Start_enq_data$wset_1__VAL_2;
  wire [10 : 0] MUX_h_l_entryVec_0$write_1__VAL_2;
  wire MUX_hg_outputQueue_val$write_1__SEL_2,
       MUX_o_busyReg$write_1__SEL_1,
       MUX_o_fifo__input__TO_Start_enq_data$wset_1__SEL_1;

  // remaining internal signals
  reg [1 : 0] SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d540,
	      SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d541;
  reg SEL_ARR_f_l_lockVec_0_empty_5_f_l_lockVec_1_em_ETC___d383,
      SEL_ARR_h_l_lockVec_0_empty_10_h_l_lockVec_1_e_ETC___d478,
      SEL_ARR_h_l_lockVec_0_owner_64_EQ_IF_hg_fifo_S_ETC___d590,
      SEL_ARR_w_l_lockVec_0_empty_98_w_l_lockVec_1_e_ETC___d422;
  wire [31 : 0] th_rf_sub_hg_fifo_Start_TO_Stage__0_first__41__ETC___d537;
  wire [2 : 0] IF_hg_outputQueue_nextTag_dummy2_0_read__86_AN_ETC___d688,
	       IF_hg_outputQueue_nextTag_lat_0_whas__40_THEN__ETC___d343,
	       b__h24879;
  wire [1 : 0] IF_NOT_f_l_entryVec_0_read__6_BIT_10_7_72_OR_N_ETC___d380,
	       IF_NOT_h_l_entryVec_0_read__11_BIT_10_12_67_OR_ETC___d475,
	       IF_NOT_h_l_entryVec_0_read__11_BIT_10_12_67_OR_ETC___d587,
	       IF_NOT_w_l_entryVec_0_read__99_BIT_10_00_11_OR_ETC___d419,
	       IF_h_l_entryVec_1_read__18_BIT_10_19_AND_h_l_e_ETC___d520,
	       IF_h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h__ETC___d543,
	       IF_h_l_lockVec_0_nextId_dummy2_0_read__98_AND__ETC___d500,
	       IF_h_l_lockVec_0_nextId_dummy2_0_read__98_AND__ETC___d501,
	       IF_h_l_lockVec_0_nextId_lat_0_whas__28_THEN_h__ETC___d231,
	       IF_h_l_lockVec_1_nextId_dummy2_0_read__02_AND__ETC___d504,
	       IF_h_l_lockVec_1_nextId_dummy2_0_read__02_AND__ETC___d505,
	       IF_h_l_lockVec_1_nextId_lat_0_whas__49_THEN_h__ETC___d252,
	       IF_h_l_lockVec_2_nextId_dummy2_0_read__06_AND__ETC___d508,
	       IF_h_l_lockVec_2_nextId_dummy2_0_read__06_AND__ETC___d509,
	       IF_h_l_lockVec_2_nextId_lat_0_whas__70_THEN_h__ETC___d273,
	       IF_h_l_lockVec_3_nextId_dummy2_0_read__10_AND__ETC___d512,
	       IF_h_l_lockVec_3_nextId_dummy2_0_read__10_AND__ETC___d513,
	       IF_h_l_lockVec_3_nextId_lat_0_whas__91_THEN_h__ETC___d294,
	       IF_o_nextId_dummy2_0_read__67_AND_o_nextId_dum_ETC___d669,
	       IF_o_nextId_lat_0_whas__19_THEN_o_nextId_lat_0_ETC___d622,
	       IF_o_outputQueue_nextTag_dummy2_0_read__25_AND_ETC___d727,
	       IF_o_outputQueue_nextTag_lat_0_whas__40_THEN_o_ETC___d643,
	       b__h17187,
	       b__h18595,
	       b__h20003,
	       b__h21411,
	       b__h31747,
	       b__h32070,
	       b__h33309,
	       x__h25497,
	       x__h26014,
	       x__h26655,
	       x__h27260,
	       x__h29141;
  wire IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d491,
       IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d493,
       IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d495,
       IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d497,
       IF_f_l_entryVec_3_read__08_BIT_10_09_AND_f_l_e_ETC___d428,
       IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d455,
       IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d559,
       IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d451,
       IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d557,
       IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d447,
       IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d555,
       IF_h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h__ETC___d483,
       IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443,
       NOT_f_l_entryVec_1_read__4_BIT_10_5_69_OR_NOT__ETC___d378,
       NOT_f_l_entryVec_2_read__01_BIT_10_02_66_OR_NO_ETC___d376,
       NOT_h_l_entryVec_1_read__18_BIT_10_19_64_OR_NO_ETC___d473,
       NOT_h_l_entryVec_1_read__18_BIT_10_19_64_OR_NO_ETC___d585,
       NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_NO_ETC___d471,
       NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_NO_ETC___d583,
       NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d482,
       NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d526,
       NOT_w_l_entryVec_1_read__06_BIT_10_07_08_OR_NO_ETC___d417,
       NOT_w_l_entryVec_2_read__13_BIT_10_14_05_OR_NO_ETC___d415,
       f_l_entryVec_0_read__6_BITS_9_TO_0_59_EQ_hg_fi_ETC___d360,
       f_l_entryVec_1_read__4_BITS_9_TO_0_56_EQ_hg_fi_ETC___d357,
       f_l_entryVec_2_read__01_BITS_9_TO_0_53_EQ_hg_f_ETC___d354,
       f_l_entryVec_2_read__01_BIT_10_02_AND_f_l_entr_ETC___d363,
       h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d458,
       h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d562,
       h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h_l_e_ETC___d563,
       o_fifo_Start_TO_Stage__3_first__77_BIT_2_78_OR_ETC___d695,
       o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649,
       o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d665,
       w_l_entryVec_0_read__99_BITS_9_TO_0_98_EQ_hg_f_ETC___d399,
       w_l_entryVec_1_read__06_BITS_9_TO_0_95_EQ_hg_f_ETC___d396,
       w_l_entryVec_2_read__13_BITS_9_TO_0_92_EQ_hg_f_ETC___d393,
       w_l_entryVec_2_read__13_BIT_10_14_AND_w_l_entr_ETC___d402;

  // actionvalue method _into_req
  assign _into_req = o ;
  assign RDY__into_req = !o_busyReg && o_fifo__input__TO_Start_f$FULL_N ;

  // action method _into_resp
  assign RDY__into_resp = 1'd1 ;

  // value method _into_checkHandle
  assign _into_checkHandle =
	     IF_o_outputQueue_nextTag_dummy2_0_read__25_AND_ETC___d727 ==
	     _into_checkHandle_handle &&
	     o_outputQueue_val ;
  assign RDY__into_checkHandle = 1'd1 ;

  // submodule f_l_lockVec_0_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) f_l_lockVec_0_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(f_l_lockVec_0_nextId_dummy2_0$D_IN),
							 .EN(f_l_lockVec_0_nextId_dummy2_0$EN),
							 .Q_OUT());

  // submodule f_l_lockVec_0_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) f_l_lockVec_0_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(f_l_lockVec_0_nextId_dummy2_1$D_IN),
							 .EN(f_l_lockVec_0_nextId_dummy2_1$EN),
							 .Q_OUT(f_l_lockVec_0_nextId_dummy2_1$Q_OUT));

  // submodule f_l_lockVec_1_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) f_l_lockVec_1_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(f_l_lockVec_1_nextId_dummy2_0$D_IN),
							 .EN(f_l_lockVec_1_nextId_dummy2_0$EN),
							 .Q_OUT());

  // submodule f_l_lockVec_1_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) f_l_lockVec_1_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(f_l_lockVec_1_nextId_dummy2_1$D_IN),
							 .EN(f_l_lockVec_1_nextId_dummy2_1$EN),
							 .Q_OUT(f_l_lockVec_1_nextId_dummy2_1$Q_OUT));

  // submodule f_l_lockVec_2_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) f_l_lockVec_2_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(f_l_lockVec_2_nextId_dummy2_0$D_IN),
							 .EN(f_l_lockVec_2_nextId_dummy2_0$EN),
							 .Q_OUT());

  // submodule f_l_lockVec_2_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) f_l_lockVec_2_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(f_l_lockVec_2_nextId_dummy2_1$D_IN),
							 .EN(f_l_lockVec_2_nextId_dummy2_1$EN),
							 .Q_OUT(f_l_lockVec_2_nextId_dummy2_1$Q_OUT));

  // submodule f_l_lockVec_3_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) f_l_lockVec_3_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(f_l_lockVec_3_nextId_dummy2_0$D_IN),
							 .EN(f_l_lockVec_3_nextId_dummy2_0$EN),
							 .Q_OUT());

  // submodule f_l_lockVec_3_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) f_l_lockVec_3_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(f_l_lockVec_3_nextId_dummy2_1$D_IN),
							 .EN(f_l_lockVec_3_nextId_dummy2_1$EN),
							 .Q_OUT(f_l_lockVec_3_nextId_dummy2_1$Q_OUT));

  // submodule h_l_lockVec_0_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) h_l_lockVec_0_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(h_l_lockVec_0_nextId_dummy2_0$D_IN),
							 .EN(h_l_lockVec_0_nextId_dummy2_0$EN),
							 .Q_OUT(h_l_lockVec_0_nextId_dummy2_0$Q_OUT));

  // submodule h_l_lockVec_0_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) h_l_lockVec_0_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(h_l_lockVec_0_nextId_dummy2_1$D_IN),
							 .EN(h_l_lockVec_0_nextId_dummy2_1$EN),
							 .Q_OUT(h_l_lockVec_0_nextId_dummy2_1$Q_OUT));

  // submodule h_l_lockVec_1_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) h_l_lockVec_1_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(h_l_lockVec_1_nextId_dummy2_0$D_IN),
							 .EN(h_l_lockVec_1_nextId_dummy2_0$EN),
							 .Q_OUT(h_l_lockVec_1_nextId_dummy2_0$Q_OUT));

  // submodule h_l_lockVec_1_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) h_l_lockVec_1_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(h_l_lockVec_1_nextId_dummy2_1$D_IN),
							 .EN(h_l_lockVec_1_nextId_dummy2_1$EN),
							 .Q_OUT(h_l_lockVec_1_nextId_dummy2_1$Q_OUT));

  // submodule h_l_lockVec_2_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) h_l_lockVec_2_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(h_l_lockVec_2_nextId_dummy2_0$D_IN),
							 .EN(h_l_lockVec_2_nextId_dummy2_0$EN),
							 .Q_OUT(h_l_lockVec_2_nextId_dummy2_0$Q_OUT));

  // submodule h_l_lockVec_2_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) h_l_lockVec_2_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(h_l_lockVec_2_nextId_dummy2_1$D_IN),
							 .EN(h_l_lockVec_2_nextId_dummy2_1$EN),
							 .Q_OUT(h_l_lockVec_2_nextId_dummy2_1$Q_OUT));

  // submodule h_l_lockVec_3_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) h_l_lockVec_3_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(h_l_lockVec_3_nextId_dummy2_0$D_IN),
							 .EN(h_l_lockVec_3_nextId_dummy2_0$EN),
							 .Q_OUT(h_l_lockVec_3_nextId_dummy2_0$Q_OUT));

  // submodule h_l_lockVec_3_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) h_l_lockVec_3_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(h_l_lockVec_3_nextId_dummy2_1$D_IN),
							 .EN(h_l_lockVec_3_nextId_dummy2_1$EN),
							 .Q_OUT(h_l_lockVec_3_nextId_dummy2_1$Q_OUT));

  // submodule hg_fifo_Stage__0_TO_Stage__1
  FIFO2 #(.width(32'd48),
	  .guarded(1'd1)) hg_fifo_Stage__0_TO_Stage__1(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(hg_fifo_Stage__0_TO_Stage__1$D_IN),
						       .ENQ(hg_fifo_Stage__0_TO_Stage__1$ENQ),
						       .DEQ(hg_fifo_Stage__0_TO_Stage__1$DEQ),
						       .CLR(hg_fifo_Stage__0_TO_Stage__1$CLR),
						       .D_OUT(hg_fifo_Stage__0_TO_Stage__1$D_OUT),
						       .FULL_N(hg_fifo_Stage__0_TO_Stage__1$FULL_N),
						       .EMPTY_N(hg_fifo_Stage__0_TO_Stage__1$EMPTY_N));

  // submodule hg_fifo_Stage__1_TO_Stage__2
  FIFO2 #(.width(32'd3),
	  .guarded(1'd1)) hg_fifo_Stage__1_TO_Stage__2(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(hg_fifo_Stage__1_TO_Stage__2$D_IN),
						       .ENQ(hg_fifo_Stage__1_TO_Stage__2$ENQ),
						       .DEQ(hg_fifo_Stage__1_TO_Stage__2$DEQ),
						       .CLR(hg_fifo_Stage__1_TO_Stage__2$CLR),
						       .D_OUT(hg_fifo_Stage__1_TO_Stage__2$D_OUT),
						       .FULL_N(hg_fifo_Stage__1_TO_Stage__2$FULL_N),
						       .EMPTY_N(hg_fifo_Stage__1_TO_Stage__2$EMPTY_N));

  // submodule hg_fifo_Start_TO_Stage__0
  FIFO2 #(.width(32'd45),
	  .guarded(1'd1)) hg_fifo_Start_TO_Stage__0(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(hg_fifo_Start_TO_Stage__0$D_IN),
						    .ENQ(hg_fifo_Start_TO_Stage__0$ENQ),
						    .DEQ(hg_fifo_Start_TO_Stage__0$DEQ),
						    .CLR(hg_fifo_Start_TO_Stage__0$CLR),
						    .D_OUT(hg_fifo_Start_TO_Stage__0$D_OUT),
						    .FULL_N(hg_fifo_Start_TO_Stage__0$FULL_N),
						    .EMPTY_N(hg_fifo_Start_TO_Stage__0$EMPTY_N));

  // submodule hg_outputQueue_nextTag_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) hg_outputQueue_nextTag_dummy2_0(.CLK(CLK),
							   .D_IN(hg_outputQueue_nextTag_dummy2_0$D_IN),
							   .EN(hg_outputQueue_nextTag_dummy2_0$EN),
							   .Q_OUT(hg_outputQueue_nextTag_dummy2_0$Q_OUT));

  // submodule hg_outputQueue_nextTag_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) hg_outputQueue_nextTag_dummy2_1(.CLK(CLK),
							   .D_IN(hg_outputQueue_nextTag_dummy2_1$D_IN),
							   .EN(hg_outputQueue_nextTag_dummy2_1$EN),
							   .Q_OUT(hg_outputQueue_nextTag_dummy2_1$Q_OUT));

  // submodule o_fifo_Stage__1_TO_Stage__3
  FIFO2 #(.width(32'd5),
	  .guarded(1'd1)) o_fifo_Stage__1_TO_Stage__3(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(o_fifo_Stage__1_TO_Stage__3$D_IN),
						      .ENQ(o_fifo_Stage__1_TO_Stage__3$ENQ),
						      .DEQ(o_fifo_Stage__1_TO_Stage__3$DEQ),
						      .CLR(o_fifo_Stage__1_TO_Stage__3$CLR),
						      .D_OUT(o_fifo_Stage__1_TO_Stage__3$D_OUT),
						      .FULL_N(o_fifo_Stage__1_TO_Stage__3$FULL_N),
						      .EMPTY_N(o_fifo_Stage__1_TO_Stage__3$EMPTY_N));

  // submodule o_fifo_Start_TO_Stage__1
  FIFO2 #(.width(32'd15),
	  .guarded(1'd1)) o_fifo_Start_TO_Stage__1(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(o_fifo_Start_TO_Stage__1$D_IN),
						   .ENQ(o_fifo_Start_TO_Stage__1$ENQ),
						   .DEQ(o_fifo_Start_TO_Stage__1$DEQ),
						   .CLR(o_fifo_Start_TO_Stage__1$CLR),
						   .D_OUT(o_fifo_Start_TO_Stage__1$D_OUT),
						   .FULL_N(o_fifo_Start_TO_Stage__1$FULL_N),
						   .EMPTY_N(o_fifo_Start_TO_Stage__1$EMPTY_N));

  // submodule o_fifo_Start_TO_Stage__3
  FIFO2 #(.width(32'd3), .guarded(1'd1)) o_fifo_Start_TO_Stage__3(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(o_fifo_Start_TO_Stage__3$D_IN),
								  .ENQ(o_fifo_Start_TO_Stage__3$ENQ),
								  .DEQ(o_fifo_Start_TO_Stage__3$DEQ),
								  .CLR(o_fifo_Start_TO_Stage__3$CLR),
								  .D_OUT(o_fifo_Start_TO_Stage__3$D_OUT),
								  .FULL_N(o_fifo_Start_TO_Stage__3$FULL_N),
								  .EMPTY_N(o_fifo_Start_TO_Stage__3$EMPTY_N));

  // submodule o_fifo_Start_TO_Stage__3_1
  FIFO2 #(.width(32'd2),
	  .guarded(1'd1)) o_fifo_Start_TO_Stage__3_1(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(o_fifo_Start_TO_Stage__3_1$D_IN),
						     .ENQ(o_fifo_Start_TO_Stage__3_1$ENQ),
						     .DEQ(o_fifo_Start_TO_Stage__3_1$DEQ),
						     .CLR(o_fifo_Start_TO_Stage__3_1$CLR),
						     .D_OUT(),
						     .FULL_N(o_fifo_Start_TO_Stage__3_1$FULL_N),
						     .EMPTY_N(o_fifo_Start_TO_Stage__3_1$EMPTY_N));

  // submodule o_fifo__input__TO_Start_f
  FIFO2 #(.width(32'd12),
	  .guarded(1'd1)) o_fifo__input__TO_Start_f(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(o_fifo__input__TO_Start_f$D_IN),
						    .ENQ(o_fifo__input__TO_Start_f$ENQ),
						    .DEQ(o_fifo__input__TO_Start_f$DEQ),
						    .CLR(o_fifo__input__TO_Start_f$CLR),
						    .D_OUT(o_fifo__input__TO_Start_f$D_OUT),
						    .FULL_N(o_fifo__input__TO_Start_f$FULL_N),
						    .EMPTY_N(o_fifo__input__TO_Start_f$EMPTY_N));

  // submodule o_nextId_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) o_nextId_dummy2_0(.CLK(CLK),
							    .D_IN(o_nextId_dummy2_0$D_IN),
							    .EN(o_nextId_dummy2_0$EN),
							    .Q_OUT(o_nextId_dummy2_0$Q_OUT));

  // submodule o_nextId_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) o_nextId_dummy2_1(.CLK(CLK),
							    .D_IN(o_nextId_dummy2_1$D_IN),
							    .EN(o_nextId_dummy2_1$EN),
							    .Q_OUT(o_nextId_dummy2_1$Q_OUT));

  // submodule o_outputQueue_nextTag_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) o_outputQueue_nextTag_dummy2_0(.CLK(CLK),
							  .D_IN(o_outputQueue_nextTag_dummy2_0$D_IN),
							  .EN(o_outputQueue_nextTag_dummy2_0$EN),
							  .Q_OUT(o_outputQueue_nextTag_dummy2_0$Q_OUT));

  // submodule o_outputQueue_nextTag_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) o_outputQueue_nextTag_dummy2_1(.CLK(CLK),
							  .D_IN(o_outputQueue_nextTag_dummy2_1$D_IN),
							  .EN(o_outputQueue_nextTag_dummy2_1$EN),
							  .Q_OUT(o_outputQueue_nextTag_dummy2_1$Q_OUT));

  // submodule tf_rf
  RegFileLoad #(.file("f"),
		.addr_width(32'd10),
		.data_width(32'd16),
		.lo(10'h0),
		.hi(10'd1023),
		.binary(1'd0)) tf_rf(.CLK(CLK),
				     .ADDR_1(tf_rf$ADDR_1),
				     .ADDR_2(tf_rf$ADDR_2),
				     .ADDR_3(tf_rf$ADDR_3),
				     .ADDR_4(tf_rf$ADDR_4),
				     .ADDR_5(tf_rf$ADDR_5),
				     .ADDR_IN(tf_rf$ADDR_IN),
				     .D_IN(tf_rf$D_IN),
				     .WE(tf_rf$WE),
				     .D_OUT_1(tf_rf$D_OUT_1),
				     .D_OUT_2(),
				     .D_OUT_3(),
				     .D_OUT_4(),
				     .D_OUT_5());

  // submodule th_rf
  RegFileLoad #(.file("h"),
		.addr_width(32'd10),
		.data_width(32'd32),
		.lo(10'h0),
		.hi(10'd1023),
		.binary(1'd0)) th_rf(.CLK(CLK),
				     .ADDR_1(th_rf$ADDR_1),
				     .ADDR_2(th_rf$ADDR_2),
				     .ADDR_3(th_rf$ADDR_3),
				     .ADDR_4(th_rf$ADDR_4),
				     .ADDR_5(th_rf$ADDR_5),
				     .ADDR_IN(th_rf$ADDR_IN),
				     .D_IN(th_rf$D_IN),
				     .WE(th_rf$WE),
				     .D_OUT_1(th_rf$D_OUT_1),
				     .D_OUT_2(),
				     .D_OUT_3(),
				     .D_OUT_4(),
				     .D_OUT_5());

  // submodule tw_rf
  RegFileLoad #(.file("w"),
		.addr_width(32'd10),
		.data_width(32'd32),
		.lo(10'h0),
		.hi(10'd1023),
		.binary(1'd0)) tw_rf(.CLK(CLK),
				     .ADDR_1(tw_rf$ADDR_1),
				     .ADDR_2(tw_rf$ADDR_2),
				     .ADDR_3(tw_rf$ADDR_3),
				     .ADDR_4(tw_rf$ADDR_4),
				     .ADDR_5(tw_rf$ADDR_5),
				     .ADDR_IN(tw_rf$ADDR_IN),
				     .D_IN(tw_rf$D_IN),
				     .WE(tw_rf$WE),
				     .D_OUT_1(tw_rf$D_OUT_1),
				     .D_OUT_2(),
				     .D_OUT_3(),
				     .D_OUT_4(),
				     .D_OUT_5());

  // submodule w_l_lockVec_0_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) w_l_lockVec_0_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(w_l_lockVec_0_nextId_dummy2_0$D_IN),
							 .EN(w_l_lockVec_0_nextId_dummy2_0$EN),
							 .Q_OUT());

  // submodule w_l_lockVec_0_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) w_l_lockVec_0_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(w_l_lockVec_0_nextId_dummy2_1$D_IN),
							 .EN(w_l_lockVec_0_nextId_dummy2_1$EN),
							 .Q_OUT(w_l_lockVec_0_nextId_dummy2_1$Q_OUT));

  // submodule w_l_lockVec_1_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) w_l_lockVec_1_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(w_l_lockVec_1_nextId_dummy2_0$D_IN),
							 .EN(w_l_lockVec_1_nextId_dummy2_0$EN),
							 .Q_OUT());

  // submodule w_l_lockVec_1_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) w_l_lockVec_1_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(w_l_lockVec_1_nextId_dummy2_1$D_IN),
							 .EN(w_l_lockVec_1_nextId_dummy2_1$EN),
							 .Q_OUT(w_l_lockVec_1_nextId_dummy2_1$Q_OUT));

  // submodule w_l_lockVec_2_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) w_l_lockVec_2_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(w_l_lockVec_2_nextId_dummy2_0$D_IN),
							 .EN(w_l_lockVec_2_nextId_dummy2_0$EN),
							 .Q_OUT());

  // submodule w_l_lockVec_2_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) w_l_lockVec_2_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(w_l_lockVec_2_nextId_dummy2_1$D_IN),
							 .EN(w_l_lockVec_2_nextId_dummy2_1$EN),
							 .Q_OUT(w_l_lockVec_2_nextId_dummy2_1$Q_OUT));

  // submodule w_l_lockVec_3_nextId_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) w_l_lockVec_3_nextId_dummy2_0(.CLK(CLK),
							 .D_IN(w_l_lockVec_3_nextId_dummy2_0$D_IN),
							 .EN(w_l_lockVec_3_nextId_dummy2_0$EN),
							 .Q_OUT());

  // submodule w_l_lockVec_3_nextId_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) w_l_lockVec_3_nextId_dummy2_1(.CLK(CLK),
							 .D_IN(w_l_lockVec_3_nextId_dummy2_1$D_IN),
							 .EN(w_l_lockVec_3_nextId_dummy2_1$EN),
							 .Q_OUT(w_l_lockVec_3_nextId_dummy2_1$Q_OUT));

  // rule RL_hg_s_Stage__0_execute
  assign WILL_FIRE_RL_hg_s_Stage__0_execute =
	     hg_fifo_Start_TO_Stage__0$EMPTY_N &&
	     hg_fifo_Stage__0_TO_Stage__1$FULL_N &&
	     IF_h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h__ETC___d483 &&
	     (IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443 ||
	      IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d447 ||
	      IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d451 ||
	      IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d455 ||
	      NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d482) ;

  // rule RL_h_l_freelock
  assign WILL_FIRE_RL_h_l_freelock =
	     h_l_lockVec_0_empty && h_l_entryVec_0[10] && !h_l_resVec_0$whas ;

  // rule RL_h_l_freelock_1
  assign WILL_FIRE_RL_h_l_freelock_1 =
	     h_l_lockVec_1_empty && h_l_entryVec_1[10] && !h_l_resVec_1$whas ;

  // rule RL_h_l_freelock_2
  assign WILL_FIRE_RL_h_l_freelock_2 =
	     h_l_lockVec_2_empty && h_l_entryVec_2[10] && !h_l_resVec_2$whas ;

  // rule RL_h_l_freelock_3
  assign WILL_FIRE_RL_h_l_freelock_3 =
	     h_l_lockVec_3_empty && h_l_entryVec_3[10] && !h_l_resVec_3$whas ;

  // rule RL_hg_s_Stage__1_execute
  assign WILL_FIRE_RL_hg_s_Stage__1_execute =
	     hg_fifo_Stage__0_TO_Stage__1$EMPTY_N &&
	     hg_fifo_Stage__1_TO_Stage__2$FULL_N &&
	     (h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h_l_e_ETC___d563 ?
		SEL_ARR_h_l_lockVec_0_owner_64_EQ_IF_hg_fifo_S_ETC___d590 :
		NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d482) ;

  // rule RL_o_s_Start_execute
  assign WILL_FIRE_RL_o_s_Start_execute =
	     o_fifo__input__TO_Start_f$EMPTY_N &&
	     o_fifo_Start_TO_Stage__3$FULL_N &&
	     (o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649 ||
	      o_fifo_Start_TO_Stage__3_1$FULL_N) &&
	     (!o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649 ||
	      o_fifo__input__TO_Start_f$FULL_N) &&
	     (!o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649 ||
	      o_fifo_Start_TO_Stage__1$FULL_N) &&
	     o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d665 ;

  // rule RL_o_s_Stage__3_execute
  assign WILL_FIRE_RL_o_s_Stage__3_execute =
	     o_fifo_Start_TO_Stage__3$EMPTY_N &&
	     (o_fifo_Start_TO_Stage__3$D_OUT[2] ||
	      o_fifo_Stage__1_TO_Stage__3$EMPTY_N) &&
	     (!o_fifo_Start_TO_Stage__3$D_OUT[2] ||
	      o_fifo_Start_TO_Stage__3_1$EMPTY_N) &&
	     o_fifo_Start_TO_Stage__3_first__77_BIT_2_78_OR_ETC___d695 ;

  // rule RL_hg_s_Stage__2_execute
  assign WILL_FIRE_RL_hg_s_Stage__2_execute =
	     hg_fifo_Stage__1_TO_Stage__2$EMPTY_N &&
	     (hg_outputQueue_nextTag_dummy2_1$Q_OUT ?
		IF_hg_outputQueue_nextTag_lat_0_whas__40_THEN__ETC___d343 :
		3'd0) ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT ;

  // inputs to muxes for submodule ports
  assign MUX_hg_outputQueue_val$write_1__SEL_2 =
	     WILL_FIRE_RL_o_s_Stage__3_execute &&
	     !o_fifo_Start_TO_Stage__3$D_OUT[2] ;
  assign MUX_o_busyReg$write_1__SEL_1 =
	     WILL_FIRE_RL_o_s_Start_execute &&
	     !o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649 ;
  assign MUX_o_fifo__input__TO_Start_enq_data$wset_1__SEL_1 =
	     WILL_FIRE_RL_o_s_Start_execute &&
	     o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649 ;
  assign MUX_h_l_entryVec_0$write_1__VAL_2 =
	     { 1'd1, hg_fifo_Start_TO_Stage__0$D_OUT[44:35] } ;
  assign MUX_o_fifo__input__TO_Start_enq_data$wset_1__VAL_1 =
	     { o_fifo__input__TO_Start_f$D_OUT[11:2] + 10'd1,
	       o_fifo__input__TO_Start_f$D_OUT[1:0] } ;
  assign MUX_o_fifo__input__TO_Start_enq_data$wset_1__VAL_2 =
	     { _into_req_counter, o } ;

  // inlined wires
  assign h_l_lockVec_0_nextId_lat_0$whas =
	     WILL_FIRE_RL_hg_s_Stage__0_execute &&
	     (IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d491 ||
	      x__h27260 == 2'd0 &&
	      NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d526) ;
  assign h_l_lockVec_0_doRel$whas =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h29141 == 2'd0 &&
	     h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h_l_e_ETC___d563 ;
  assign h_l_lockVec_1_nextId_lat_0$whas =
	     WILL_FIRE_RL_hg_s_Stage__0_execute &&
	     (IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d493 ||
	      x__h27260 == 2'd1 &&
	      NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d526) ;
  assign h_l_lockVec_1_doRel$whas =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h29141 == 2'd1 &&
	     h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h_l_e_ETC___d563 ;
  assign h_l_lockVec_2_nextId_lat_0$whas =
	     WILL_FIRE_RL_hg_s_Stage__0_execute &&
	     (IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d495 ||
	      x__h27260 == 2'd2 &&
	      NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d526) ;
  assign h_l_lockVec_2_doRel$whas =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h29141 == 2'd2 &&
	     h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h_l_e_ETC___d563 ;
  assign h_l_lockVec_3_nextId_lat_0$whas =
	     WILL_FIRE_RL_hg_s_Stage__0_execute &&
	     (IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d497 ||
	      x__h27260 == 2'd3 &&
	      NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d526) ;
  assign h_l_lockVec_3_doRel$whas =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h29141 == 2'd3 &&
	     h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h_l_e_ETC___d563 ;
  assign h_l_resVec_0$whas =
	     WILL_FIRE_RL_hg_s_Stage__0_execute &&
	     IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d491 ;
  assign h_l_resVec_1$whas =
	     WILL_FIRE_RL_hg_s_Stage__0_execute &&
	     IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d493 ;
  assign h_l_resVec_2$whas =
	     WILL_FIRE_RL_hg_s_Stage__0_execute &&
	     IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d495 ;
  assign h_l_resVec_3$whas =
	     WILL_FIRE_RL_hg_s_Stage__0_execute &&
	     IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d497 ;
  assign o_fifo__input__TO_Start_enq_data$wget =
	     MUX_o_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ?
	       MUX_o_fifo__input__TO_Start_enq_data$wset_1__VAL_1 :
	       MUX_o_fifo__input__TO_Start_enq_data$wset_1__VAL_2 ;
  assign o_fifo__input__TO_Start_enq_data$whas =
	     WILL_FIRE_RL_o_s_Start_execute &&
	     o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649 ||
	     EN__into_req ;
  assign o_doRel$whas =
	     o_fifo_Start_TO_Stage__1$EMPTY_N &&
	     !hg_fifo__input__TO_Start_rv[13] &&
	     o_fifo_Stage__1_TO_Stage__3$FULL_N &&
	     o_owner == o_fifo_Start_TO_Stage__1$D_OUT[3:2] ;
  assign hg_fifo__input__TO_Start_rv$EN_port0__write =
	     o_fifo_Start_TO_Stage__1$EMPTY_N &&
	     !hg_fifo__input__TO_Start_rv[13] &&
	     o_fifo_Stage__1_TO_Stage__3$FULL_N &&
	     o_owner == o_fifo_Start_TO_Stage__1$D_OUT[3:2] ;
  assign hg_fifo__input__TO_Start_rv$port0__write_1 =
	     { 1'd1, o_fifo_Start_TO_Stage__1$D_OUT[14:5], hg } ;
  assign hg_fifo__input__TO_Start_rv$port1__read =
	     hg_fifo__input__TO_Start_rv$EN_port0__write ?
	       hg_fifo__input__TO_Start_rv$port0__write_1 :
	       hg_fifo__input__TO_Start_rv ;
  assign hg_fifo__input__TO_Start_rv$EN_port1__write =
	     hg_fifo__input__TO_Start_rv$port1__read[13] &&
	     hg_fifo_Start_TO_Stage__0$FULL_N &&
	     IF_f_l_entryVec_3_read__08_BIT_10_09_AND_f_l_e_ETC___d428 ;
  assign hg_fifo__input__TO_Start_rv$port2__read =
	     hg_fifo__input__TO_Start_rv$EN_port1__write ?
	       14'd2730 :
	       hg_fifo__input__TO_Start_rv$port1__read ;

  // register f_l_entryVec_0
  assign f_l_entryVec_0$D_IN = 11'd682 ;
  assign f_l_entryVec_0$EN = f_l_lockVec_0_empty && f_l_entryVec_0[10] ;

  // register f_l_entryVec_1
  assign f_l_entryVec_1$D_IN = 11'd682 ;
  assign f_l_entryVec_1$EN = f_l_lockVec_1_empty && f_l_entryVec_1[10] ;

  // register f_l_entryVec_2
  assign f_l_entryVec_2$D_IN = 11'd682 ;
  assign f_l_entryVec_2$EN = f_l_lockVec_2_empty && f_l_entryVec_2[10] ;

  // register f_l_entryVec_3
  assign f_l_entryVec_3$D_IN = 11'd682 ;
  assign f_l_entryVec_3$EN = f_l_lockVec_3_empty && f_l_entryVec_3[10] ;

  // register f_l_lockVec_0_empty
  assign f_l_lockVec_0_empty$D_IN =
	     2'h0 ==
	     (f_l_lockVec_0_nextId_dummy2_1$Q_OUT ?
		f_l_lockVec_0_nextId_rl :
		2'd0) ;
  assign f_l_lockVec_0_empty$EN = 1'b0 ;

  // register f_l_lockVec_0_nextId_rl
  assign f_l_lockVec_0_nextId_rl$D_IN = f_l_lockVec_0_nextId_rl ;
  assign f_l_lockVec_0_nextId_rl$EN = 1'd1 ;

  // register f_l_lockVec_0_owner
  assign f_l_lockVec_0_owner$D_IN = 2'h0 ;
  assign f_l_lockVec_0_owner$EN = 1'b0 ;

  // register f_l_lockVec_1_empty
  assign f_l_lockVec_1_empty$D_IN =
	     2'h0 ==
	     (f_l_lockVec_1_nextId_dummy2_1$Q_OUT ?
		f_l_lockVec_1_nextId_rl :
		2'd0) ;
  assign f_l_lockVec_1_empty$EN = 1'b0 ;

  // register f_l_lockVec_1_nextId_rl
  assign f_l_lockVec_1_nextId_rl$D_IN = f_l_lockVec_1_nextId_rl ;
  assign f_l_lockVec_1_nextId_rl$EN = 1'd1 ;

  // register f_l_lockVec_1_owner
  assign f_l_lockVec_1_owner$D_IN = 2'h0 ;
  assign f_l_lockVec_1_owner$EN = 1'b0 ;

  // register f_l_lockVec_2_empty
  assign f_l_lockVec_2_empty$D_IN =
	     2'h0 ==
	     (f_l_lockVec_2_nextId_dummy2_1$Q_OUT ?
		f_l_lockVec_2_nextId_rl :
		2'd0) ;
  assign f_l_lockVec_2_empty$EN = 1'b0 ;

  // register f_l_lockVec_2_nextId_rl
  assign f_l_lockVec_2_nextId_rl$D_IN = f_l_lockVec_2_nextId_rl ;
  assign f_l_lockVec_2_nextId_rl$EN = 1'd1 ;

  // register f_l_lockVec_2_owner
  assign f_l_lockVec_2_owner$D_IN = 2'h0 ;
  assign f_l_lockVec_2_owner$EN = 1'b0 ;

  // register f_l_lockVec_3_empty
  assign f_l_lockVec_3_empty$D_IN =
	     2'h0 ==
	     (f_l_lockVec_3_nextId_dummy2_1$Q_OUT ?
		f_l_lockVec_3_nextId_rl :
		2'd0) ;
  assign f_l_lockVec_3_empty$EN = 1'b0 ;

  // register f_l_lockVec_3_nextId_rl
  assign f_l_lockVec_3_nextId_rl$D_IN = f_l_lockVec_3_nextId_rl ;
  assign f_l_lockVec_3_nextId_rl$EN = 1'd1 ;

  // register f_l_lockVec_3_owner
  assign f_l_lockVec_3_owner$D_IN = 2'h0 ;
  assign f_l_lockVec_3_owner$EN = 1'b0 ;

  // register h_l_entryVec_0
  assign h_l_entryVec_0$D_IN =
	     WILL_FIRE_RL_h_l_freelock ?
	       11'd682 :
	       MUX_h_l_entryVec_0$write_1__VAL_2 ;
  assign h_l_entryVec_0$EN =
	     WILL_FIRE_RL_hg_s_Stage__0_execute && x__h27260 == 2'd0 &&
	     NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d526 ||
	     WILL_FIRE_RL_h_l_freelock ;

  // register h_l_entryVec_1
  assign h_l_entryVec_1$D_IN =
	     WILL_FIRE_RL_h_l_freelock_1 ?
	       11'd682 :
	       MUX_h_l_entryVec_0$write_1__VAL_2 ;
  assign h_l_entryVec_1$EN =
	     WILL_FIRE_RL_hg_s_Stage__0_execute && x__h27260 == 2'd1 &&
	     NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d526 ||
	     WILL_FIRE_RL_h_l_freelock_1 ;

  // register h_l_entryVec_2
  assign h_l_entryVec_2$D_IN =
	     WILL_FIRE_RL_h_l_freelock_2 ?
	       11'd682 :
	       MUX_h_l_entryVec_0$write_1__VAL_2 ;
  assign h_l_entryVec_2$EN =
	     WILL_FIRE_RL_hg_s_Stage__0_execute && x__h27260 == 2'd2 &&
	     NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d526 ||
	     WILL_FIRE_RL_h_l_freelock_2 ;

  // register h_l_entryVec_3
  assign h_l_entryVec_3$D_IN =
	     WILL_FIRE_RL_h_l_freelock_3 ?
	       11'd682 :
	       MUX_h_l_entryVec_0$write_1__VAL_2 ;
  assign h_l_entryVec_3$EN =
	     WILL_FIRE_RL_hg_s_Stage__0_execute && x__h27260 == 2'd3 &&
	     NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d526 ||
	     WILL_FIRE_RL_h_l_freelock_3 ;

  // register h_l_lockVec_0_empty
  assign h_l_lockVec_0_empty$D_IN =
	     (!h_l_lockVec_0_nextId_lat_0$whas || h_l_lockVec_0_doRel$whas) &&
	     b__h17187 ==
	     (h_l_lockVec_0_nextId_dummy2_1$Q_OUT ?
		IF_h_l_lockVec_0_nextId_lat_0_whas__28_THEN_h__ETC___d231 :
		2'd0) ;
  assign h_l_lockVec_0_empty$EN =
	     h_l_lockVec_0_nextId_lat_0$whas && !h_l_lockVec_0_doRel$whas ||
	     !h_l_lockVec_0_nextId_lat_0$whas && h_l_lockVec_0_doRel$whas ;

  // register h_l_lockVec_0_nextId_rl
  assign h_l_lockVec_0_nextId_rl$D_IN =
	     IF_h_l_lockVec_0_nextId_lat_0_whas__28_THEN_h__ETC___d231 ;
  assign h_l_lockVec_0_nextId_rl$EN = 1'd1 ;

  // register h_l_lockVec_0_owner
  assign h_l_lockVec_0_owner$D_IN = b__h17187 ;
  assign h_l_lockVec_0_owner$EN = h_l_lockVec_0_doRel$whas ;

  // register h_l_lockVec_1_empty
  assign h_l_lockVec_1_empty$D_IN =
	     (!h_l_lockVec_1_nextId_lat_0$whas || h_l_lockVec_1_doRel$whas) &&
	     b__h18595 ==
	     (h_l_lockVec_1_nextId_dummy2_1$Q_OUT ?
		IF_h_l_lockVec_1_nextId_lat_0_whas__49_THEN_h__ETC___d252 :
		2'd0) ;
  assign h_l_lockVec_1_empty$EN =
	     h_l_lockVec_1_nextId_lat_0$whas && !h_l_lockVec_1_doRel$whas ||
	     !h_l_lockVec_1_nextId_lat_0$whas && h_l_lockVec_1_doRel$whas ;

  // register h_l_lockVec_1_nextId_rl
  assign h_l_lockVec_1_nextId_rl$D_IN =
	     IF_h_l_lockVec_1_nextId_lat_0_whas__49_THEN_h__ETC___d252 ;
  assign h_l_lockVec_1_nextId_rl$EN = 1'd1 ;

  // register h_l_lockVec_1_owner
  assign h_l_lockVec_1_owner$D_IN = b__h18595 ;
  assign h_l_lockVec_1_owner$EN = h_l_lockVec_1_doRel$whas ;

  // register h_l_lockVec_2_empty
  assign h_l_lockVec_2_empty$D_IN =
	     (!h_l_lockVec_2_nextId_lat_0$whas || h_l_lockVec_2_doRel$whas) &&
	     b__h20003 ==
	     (h_l_lockVec_2_nextId_dummy2_1$Q_OUT ?
		IF_h_l_lockVec_2_nextId_lat_0_whas__70_THEN_h__ETC___d273 :
		2'd0) ;
  assign h_l_lockVec_2_empty$EN =
	     h_l_lockVec_2_nextId_lat_0$whas && !h_l_lockVec_2_doRel$whas ||
	     !h_l_lockVec_2_nextId_lat_0$whas && h_l_lockVec_2_doRel$whas ;

  // register h_l_lockVec_2_nextId_rl
  assign h_l_lockVec_2_nextId_rl$D_IN =
	     IF_h_l_lockVec_2_nextId_lat_0_whas__70_THEN_h__ETC___d273 ;
  assign h_l_lockVec_2_nextId_rl$EN = 1'd1 ;

  // register h_l_lockVec_2_owner
  assign h_l_lockVec_2_owner$D_IN = b__h20003 ;
  assign h_l_lockVec_2_owner$EN = h_l_lockVec_2_doRel$whas ;

  // register h_l_lockVec_3_empty
  assign h_l_lockVec_3_empty$D_IN =
	     (!h_l_lockVec_3_nextId_lat_0$whas || h_l_lockVec_3_doRel$whas) &&
	     b__h21411 ==
	     (h_l_lockVec_3_nextId_dummy2_1$Q_OUT ?
		IF_h_l_lockVec_3_nextId_lat_0_whas__91_THEN_h__ETC___d294 :
		2'd0) ;
  assign h_l_lockVec_3_empty$EN =
	     h_l_lockVec_3_nextId_lat_0$whas && !h_l_lockVec_3_doRel$whas ||
	     !h_l_lockVec_3_nextId_lat_0$whas && h_l_lockVec_3_doRel$whas ;

  // register h_l_lockVec_3_nextId_rl
  assign h_l_lockVec_3_nextId_rl$D_IN =
	     IF_h_l_lockVec_3_nextId_lat_0_whas__91_THEN_h__ETC___d294 ;
  assign h_l_lockVec_3_nextId_rl$EN = 1'd1 ;

  // register h_l_lockVec_3_owner
  assign h_l_lockVec_3_owner$D_IN = b__h21411 ;
  assign h_l_lockVec_3_owner$EN = h_l_lockVec_3_doRel$whas ;

  // register hg
  assign hg$D_IN = hg + 3'd1 ;
  assign hg$EN = o_doRel$whas ;

  // register hg_feature_lock_region
  assign hg_feature_lock_region$D_IN = 1'b0 ;
  assign hg_feature_lock_region$EN = 1'b0 ;

  // register hg_fifo__input__TO_Start_rv
  assign hg_fifo__input__TO_Start_rv$D_IN =
	     hg_fifo__input__TO_Start_rv$port2__read ;
  assign hg_fifo__input__TO_Start_rv$EN = 1'b1 ;

  // register hg_h_lock_region
  assign hg_h_lock_region$D_IN = 1'b0 ;
  assign hg_h_lock_region$EN = 1'b0 ;

  // register hg_outputQueue_nextTag_rl
  assign hg_outputQueue_nextTag_rl$D_IN =
	     IF_hg_outputQueue_nextTag_lat_0_whas__40_THEN__ETC___d343 ;
  assign hg_outputQueue_nextTag_rl$EN = 1'd1 ;

  // register hg_outputQueue_val
  assign hg_outputQueue_val$D_IN =
	     WILL_FIRE_RL_hg_s_Stage__2_execute ? 2'd3 : 2'd0 ;
  assign hg_outputQueue_val$EN =
	     WILL_FIRE_RL_o_s_Stage__3_execute &&
	     !o_fifo_Start_TO_Stage__3$D_OUT[2] ||
	     WILL_FIRE_RL_hg_s_Stage__2_execute ;

  // register hg_weight_lock_region
  assign hg_weight_lock_region$D_IN = 1'b0 ;
  assign hg_weight_lock_region$EN = 1'b0 ;

  // register o
  assign o$D_IN = o + 2'd1 ;
  assign o$EN = EN__into_req ;

  // register o_busyReg
  assign o_busyReg$D_IN = !MUX_o_busyReg$write_1__SEL_1 ;
  assign o_busyReg$EN =
	     WILL_FIRE_RL_o_s_Start_execute &&
	     !o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649 ||
	     EN__into_req ;

  // register o_empty
  assign o_empty$D_IN =
	     (!MUX_o_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ||
	      o_doRel$whas) &&
	     b__h32070 ==
	     (o_nextId_dummy2_1$Q_OUT ?
		IF_o_nextId_lat_0_whas__19_THEN_o_nextId_lat_0_ETC___d622 :
		2'd0) ;
  assign o_empty$EN =
	     MUX_o_fifo__input__TO_Start_enq_data$wset_1__SEL_1 &&
	     !o_doRel$whas ||
	     !MUX_o_fifo__input__TO_Start_enq_data$wset_1__SEL_1 &&
	     o_doRel$whas ;

  // register o_h_lock_region
  assign o_h_lock_region$D_IN = 1'b0 ;
  assign o_h_lock_region$EN = 1'b0 ;

  // register o_nextId_rl
  assign o_nextId_rl$D_IN =
	     IF_o_nextId_lat_0_whas__19_THEN_o_nextId_lat_0_ETC___d622 ;
  assign o_nextId_rl$EN = 1'd1 ;

  // register o_outputQueue_nextTag_rl
  assign o_outputQueue_nextTag_rl$D_IN =
	     IF_o_outputQueue_nextTag_lat_0_whas__40_THEN_o_ETC___d643 ;
  assign o_outputQueue_nextTag_rl$EN = 1'd1 ;

  // register o_outputQueue_val
  assign o_outputQueue_val$D_IN = MUX_o_busyReg$write_1__SEL_1 ;
  assign o_outputQueue_val$EN =
	     WILL_FIRE_RL_o_s_Start_execute &&
	     !o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649 ||
	     EN__into_resp ;

  // register o_owner
  assign o_owner$D_IN = b__h32070 ;
  assign o_owner$EN = o_doRel$whas ;

  // register w_l_entryVec_0
  assign w_l_entryVec_0$D_IN = 11'd682 ;
  assign w_l_entryVec_0$EN = w_l_lockVec_0_empty && w_l_entryVec_0[10] ;

  // register w_l_entryVec_1
  assign w_l_entryVec_1$D_IN = 11'd682 ;
  assign w_l_entryVec_1$EN = w_l_lockVec_1_empty && w_l_entryVec_1[10] ;

  // register w_l_entryVec_2
  assign w_l_entryVec_2$D_IN = 11'd682 ;
  assign w_l_entryVec_2$EN = w_l_lockVec_2_empty && w_l_entryVec_2[10] ;

  // register w_l_entryVec_3
  assign w_l_entryVec_3$D_IN = 11'd682 ;
  assign w_l_entryVec_3$EN = w_l_lockVec_3_empty && w_l_entryVec_3[10] ;

  // register w_l_lockVec_0_empty
  assign w_l_lockVec_0_empty$D_IN =
	     2'h0 ==
	     (w_l_lockVec_0_nextId_dummy2_1$Q_OUT ?
		w_l_lockVec_0_nextId_rl :
		2'd0) ;
  assign w_l_lockVec_0_empty$EN = 1'b0 ;

  // register w_l_lockVec_0_nextId_rl
  assign w_l_lockVec_0_nextId_rl$D_IN = w_l_lockVec_0_nextId_rl ;
  assign w_l_lockVec_0_nextId_rl$EN = 1'd1 ;

  // register w_l_lockVec_0_owner
  assign w_l_lockVec_0_owner$D_IN = 2'h0 ;
  assign w_l_lockVec_0_owner$EN = 1'b0 ;

  // register w_l_lockVec_1_empty
  assign w_l_lockVec_1_empty$D_IN =
	     2'h0 ==
	     (w_l_lockVec_1_nextId_dummy2_1$Q_OUT ?
		w_l_lockVec_1_nextId_rl :
		2'd0) ;
  assign w_l_lockVec_1_empty$EN = 1'b0 ;

  // register w_l_lockVec_1_nextId_rl
  assign w_l_lockVec_1_nextId_rl$D_IN = w_l_lockVec_1_nextId_rl ;
  assign w_l_lockVec_1_nextId_rl$EN = 1'd1 ;

  // register w_l_lockVec_1_owner
  assign w_l_lockVec_1_owner$D_IN = 2'h0 ;
  assign w_l_lockVec_1_owner$EN = 1'b0 ;

  // register w_l_lockVec_2_empty
  assign w_l_lockVec_2_empty$D_IN =
	     2'h0 ==
	     (w_l_lockVec_2_nextId_dummy2_1$Q_OUT ?
		w_l_lockVec_2_nextId_rl :
		2'd0) ;
  assign w_l_lockVec_2_empty$EN = 1'b0 ;

  // register w_l_lockVec_2_nextId_rl
  assign w_l_lockVec_2_nextId_rl$D_IN = w_l_lockVec_2_nextId_rl ;
  assign w_l_lockVec_2_nextId_rl$EN = 1'd1 ;

  // register w_l_lockVec_2_owner
  assign w_l_lockVec_2_owner$D_IN = 2'h0 ;
  assign w_l_lockVec_2_owner$EN = 1'b0 ;

  // register w_l_lockVec_3_empty
  assign w_l_lockVec_3_empty$D_IN =
	     2'h0 ==
	     (w_l_lockVec_3_nextId_dummy2_1$Q_OUT ?
		w_l_lockVec_3_nextId_rl :
		2'd0) ;
  assign w_l_lockVec_3_empty$EN = 1'b0 ;

  // register w_l_lockVec_3_nextId_rl
  assign w_l_lockVec_3_nextId_rl$D_IN = w_l_lockVec_3_nextId_rl ;
  assign w_l_lockVec_3_nextId_rl$EN = 1'd1 ;

  // register w_l_lockVec_3_owner
  assign w_l_lockVec_3_owner$D_IN = 2'h0 ;
  assign w_l_lockVec_3_owner$EN = 1'b0 ;

  // submodule f_l_lockVec_0_nextId_dummy2_0
  assign f_l_lockVec_0_nextId_dummy2_0$D_IN = 1'b0 ;
  assign f_l_lockVec_0_nextId_dummy2_0$EN = 1'b0 ;

  // submodule f_l_lockVec_0_nextId_dummy2_1
  assign f_l_lockVec_0_nextId_dummy2_1$D_IN = 1'b0 ;
  assign f_l_lockVec_0_nextId_dummy2_1$EN = 1'b0 ;

  // submodule f_l_lockVec_1_nextId_dummy2_0
  assign f_l_lockVec_1_nextId_dummy2_0$D_IN = 1'b0 ;
  assign f_l_lockVec_1_nextId_dummy2_0$EN = 1'b0 ;

  // submodule f_l_lockVec_1_nextId_dummy2_1
  assign f_l_lockVec_1_nextId_dummy2_1$D_IN = 1'b0 ;
  assign f_l_lockVec_1_nextId_dummy2_1$EN = 1'b0 ;

  // submodule f_l_lockVec_2_nextId_dummy2_0
  assign f_l_lockVec_2_nextId_dummy2_0$D_IN = 1'b0 ;
  assign f_l_lockVec_2_nextId_dummy2_0$EN = 1'b0 ;

  // submodule f_l_lockVec_2_nextId_dummy2_1
  assign f_l_lockVec_2_nextId_dummy2_1$D_IN = 1'b0 ;
  assign f_l_lockVec_2_nextId_dummy2_1$EN = 1'b0 ;

  // submodule f_l_lockVec_3_nextId_dummy2_0
  assign f_l_lockVec_3_nextId_dummy2_0$D_IN = 1'b0 ;
  assign f_l_lockVec_3_nextId_dummy2_0$EN = 1'b0 ;

  // submodule f_l_lockVec_3_nextId_dummy2_1
  assign f_l_lockVec_3_nextId_dummy2_1$D_IN = 1'b0 ;
  assign f_l_lockVec_3_nextId_dummy2_1$EN = 1'b0 ;

  // submodule h_l_lockVec_0_nextId_dummy2_0
  assign h_l_lockVec_0_nextId_dummy2_0$D_IN = 1'd1 ;
  assign h_l_lockVec_0_nextId_dummy2_0$EN = h_l_lockVec_0_nextId_lat_0$whas ;

  // submodule h_l_lockVec_0_nextId_dummy2_1
  assign h_l_lockVec_0_nextId_dummy2_1$D_IN = 1'b0 ;
  assign h_l_lockVec_0_nextId_dummy2_1$EN = 1'b0 ;

  // submodule h_l_lockVec_1_nextId_dummy2_0
  assign h_l_lockVec_1_nextId_dummy2_0$D_IN = 1'd1 ;
  assign h_l_lockVec_1_nextId_dummy2_0$EN = h_l_lockVec_1_nextId_lat_0$whas ;

  // submodule h_l_lockVec_1_nextId_dummy2_1
  assign h_l_lockVec_1_nextId_dummy2_1$D_IN = 1'b0 ;
  assign h_l_lockVec_1_nextId_dummy2_1$EN = 1'b0 ;

  // submodule h_l_lockVec_2_nextId_dummy2_0
  assign h_l_lockVec_2_nextId_dummy2_0$D_IN = 1'd1 ;
  assign h_l_lockVec_2_nextId_dummy2_0$EN = h_l_lockVec_2_nextId_lat_0$whas ;

  // submodule h_l_lockVec_2_nextId_dummy2_1
  assign h_l_lockVec_2_nextId_dummy2_1$D_IN = 1'b0 ;
  assign h_l_lockVec_2_nextId_dummy2_1$EN = 1'b0 ;

  // submodule h_l_lockVec_3_nextId_dummy2_0
  assign h_l_lockVec_3_nextId_dummy2_0$D_IN = 1'd1 ;
  assign h_l_lockVec_3_nextId_dummy2_0$EN = h_l_lockVec_3_nextId_lat_0$whas ;

  // submodule h_l_lockVec_3_nextId_dummy2_1
  assign h_l_lockVec_3_nextId_dummy2_1$D_IN = 1'b0 ;
  assign h_l_lockVec_3_nextId_dummy2_1$EN = 1'b0 ;

  // submodule hg_fifo_Stage__0_TO_Stage__1
  assign hg_fifo_Stage__0_TO_Stage__1$D_IN =
	     { th_rf_sub_hg_fifo_Start_TO_Stage__0_first__41__ETC___d537,
	       1'd1,
	       IF_h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h__ETC___d543,
	       hg_fifo_Start_TO_Stage__0$D_OUT[44:35],
	       hg_fifo_Start_TO_Stage__0$D_OUT[2:0] } ;
  assign hg_fifo_Stage__0_TO_Stage__1$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__0_execute ;
  assign hg_fifo_Stage__0_TO_Stage__1$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute ;
  assign hg_fifo_Stage__0_TO_Stage__1$CLR = 1'b0 ;

  // submodule hg_fifo_Stage__1_TO_Stage__2
  assign hg_fifo_Stage__1_TO_Stage__2$D_IN =
	     hg_fifo_Stage__0_TO_Stage__1$D_OUT[2:0] ;
  assign hg_fifo_Stage__1_TO_Stage__2$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute ;
  assign hg_fifo_Stage__1_TO_Stage__2$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute ;
  assign hg_fifo_Stage__1_TO_Stage__2$CLR = 1'b0 ;

  // submodule hg_fifo_Start_TO_Stage__0
  assign hg_fifo_Start_TO_Stage__0$D_IN =
	     { tf_rf$D_OUT_1[9:0],
	       tw_rf$D_OUT_1,
	       hg_fifo__input__TO_Start_rv$port1__read[2:0] } ;
  assign hg_fifo_Start_TO_Stage__0$ENQ =
	     hg_fifo__input__TO_Start_rv$port1__read[13] &&
	     hg_fifo_Start_TO_Stage__0$FULL_N &&
	     IF_f_l_entryVec_3_read__08_BIT_10_09_AND_f_l_e_ETC___d428 ;
  assign hg_fifo_Start_TO_Stage__0$DEQ = WILL_FIRE_RL_hg_s_Stage__0_execute ;
  assign hg_fifo_Start_TO_Stage__0$CLR = 1'b0 ;

  // submodule hg_outputQueue_nextTag_dummy2_0
  assign hg_outputQueue_nextTag_dummy2_0$D_IN = 1'd1 ;
  assign hg_outputQueue_nextTag_dummy2_0$EN =
	     MUX_hg_outputQueue_val$write_1__SEL_2 ;

  // submodule hg_outputQueue_nextTag_dummy2_1
  assign hg_outputQueue_nextTag_dummy2_1$D_IN = 1'b0 ;
  assign hg_outputQueue_nextTag_dummy2_1$EN = 1'b0 ;

  // submodule o_fifo_Stage__1_TO_Stage__3
  assign o_fifo_Stage__1_TO_Stage__3$D_IN =
	     { hg, o_fifo_Start_TO_Stage__1$D_OUT[1:0] } ;
  assign o_fifo_Stage__1_TO_Stage__3$ENQ = o_doRel$whas ;
  assign o_fifo_Stage__1_TO_Stage__3$DEQ =
	     MUX_hg_outputQueue_val$write_1__SEL_2 ;
  assign o_fifo_Stage__1_TO_Stage__3$CLR = 1'b0 ;

  // submodule o_fifo_Start_TO_Stage__1
  assign o_fifo_Start_TO_Stage__1$D_IN =
	     { o_fifo__input__TO_Start_f$D_OUT[11:2],
	       o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649,
	       IF_o_nextId_dummy2_0_read__67_AND_o_nextId_dum_ETC___d669,
	       o_fifo__input__TO_Start_f$D_OUT[1:0] } ;
  assign o_fifo_Start_TO_Stage__1$ENQ =
	     MUX_o_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ;
  assign o_fifo_Start_TO_Stage__1$DEQ = o_doRel$whas ;
  assign o_fifo_Start_TO_Stage__1$CLR = 1'b0 ;

  // submodule o_fifo_Start_TO_Stage__3
  assign o_fifo_Start_TO_Stage__3$D_IN =
	     { !o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649,
	       o_fifo__input__TO_Start_f$D_OUT[1:0] } ;
  assign o_fifo_Start_TO_Stage__3$ENQ = WILL_FIRE_RL_o_s_Start_execute ;
  assign o_fifo_Start_TO_Stage__3$DEQ = WILL_FIRE_RL_o_s_Stage__3_execute ;
  assign o_fifo_Start_TO_Stage__3$CLR = 1'b0 ;

  // submodule o_fifo_Start_TO_Stage__3_1
  assign o_fifo_Start_TO_Stage__3_1$D_IN =
	     o_fifo__input__TO_Start_f$D_OUT[1:0] ;
  assign o_fifo_Start_TO_Stage__3_1$ENQ = MUX_o_busyReg$write_1__SEL_1 ;
  assign o_fifo_Start_TO_Stage__3_1$DEQ =
	     WILL_FIRE_RL_o_s_Stage__3_execute &&
	     o_fifo_Start_TO_Stage__3$D_OUT[2] ;
  assign o_fifo_Start_TO_Stage__3_1$CLR = 1'b0 ;

  // submodule o_fifo__input__TO_Start_f
  assign o_fifo__input__TO_Start_f$D_IN =
	     o_fifo__input__TO_Start_enq_data$wget ;
  assign o_fifo__input__TO_Start_f$ENQ =
	     o_fifo__input__TO_Start_f$FULL_N &&
	     o_fifo__input__TO_Start_enq_data$whas ;
  assign o_fifo__input__TO_Start_f$DEQ = WILL_FIRE_RL_o_s_Start_execute ;
  assign o_fifo__input__TO_Start_f$CLR = 1'b0 ;

  // submodule o_nextId_dummy2_0
  assign o_nextId_dummy2_0$D_IN = 1'd1 ;
  assign o_nextId_dummy2_0$EN =
	     MUX_o_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ;

  // submodule o_nextId_dummy2_1
  assign o_nextId_dummy2_1$D_IN = 1'b0 ;
  assign o_nextId_dummy2_1$EN = 1'b0 ;

  // submodule o_outputQueue_nextTag_dummy2_0
  assign o_outputQueue_nextTag_dummy2_0$D_IN = 1'd1 ;
  assign o_outputQueue_nextTag_dummy2_0$EN = EN__into_resp ;

  // submodule o_outputQueue_nextTag_dummy2_1
  assign o_outputQueue_nextTag_dummy2_1$D_IN = 1'b0 ;
  assign o_outputQueue_nextTag_dummy2_1$EN = 1'b0 ;

  // submodule tf_rf
  assign tf_rf$ADDR_1 = hg_fifo__input__TO_Start_rv$port1__read[12:3] ;
  assign tf_rf$ADDR_2 = 10'h0 ;
  assign tf_rf$ADDR_3 = 10'h0 ;
  assign tf_rf$ADDR_4 = 10'h0 ;
  assign tf_rf$ADDR_5 = 10'h0 ;
  assign tf_rf$ADDR_IN = 10'h0 ;
  assign tf_rf$D_IN = 16'h0 ;
  assign tf_rf$WE = 1'b0 ;

  // submodule th_rf
  assign th_rf$ADDR_1 = hg_fifo_Start_TO_Stage__0$D_OUT[44:35] ;
  assign th_rf$ADDR_2 = 10'h0 ;
  assign th_rf$ADDR_3 = 10'h0 ;
  assign th_rf$ADDR_4 = 10'h0 ;
  assign th_rf$ADDR_5 = 10'h0 ;
  assign th_rf$ADDR_IN = hg_fifo_Stage__0_TO_Stage__1$D_OUT[12:3] ;
  assign th_rf$D_IN = hg_fifo_Stage__0_TO_Stage__1$D_OUT[47:16] ;
  assign th_rf$WE = WILL_FIRE_RL_hg_s_Stage__1_execute ;

  // submodule tw_rf
  assign tw_rf$ADDR_1 = hg_fifo__input__TO_Start_rv$port1__read[12:3] ;
  assign tw_rf$ADDR_2 = 10'h0 ;
  assign tw_rf$ADDR_3 = 10'h0 ;
  assign tw_rf$ADDR_4 = 10'h0 ;
  assign tw_rf$ADDR_5 = 10'h0 ;
  assign tw_rf$ADDR_IN = 10'h0 ;
  assign tw_rf$D_IN = 32'h0 ;
  assign tw_rf$WE = 1'b0 ;

  // submodule w_l_lockVec_0_nextId_dummy2_0
  assign w_l_lockVec_0_nextId_dummy2_0$D_IN = 1'b0 ;
  assign w_l_lockVec_0_nextId_dummy2_0$EN = 1'b0 ;

  // submodule w_l_lockVec_0_nextId_dummy2_1
  assign w_l_lockVec_0_nextId_dummy2_1$D_IN = 1'b0 ;
  assign w_l_lockVec_0_nextId_dummy2_1$EN = 1'b0 ;

  // submodule w_l_lockVec_1_nextId_dummy2_0
  assign w_l_lockVec_1_nextId_dummy2_0$D_IN = 1'b0 ;
  assign w_l_lockVec_1_nextId_dummy2_0$EN = 1'b0 ;

  // submodule w_l_lockVec_1_nextId_dummy2_1
  assign w_l_lockVec_1_nextId_dummy2_1$D_IN = 1'b0 ;
  assign w_l_lockVec_1_nextId_dummy2_1$EN = 1'b0 ;

  // submodule w_l_lockVec_2_nextId_dummy2_0
  assign w_l_lockVec_2_nextId_dummy2_0$D_IN = 1'b0 ;
  assign w_l_lockVec_2_nextId_dummy2_0$EN = 1'b0 ;

  // submodule w_l_lockVec_2_nextId_dummy2_1
  assign w_l_lockVec_2_nextId_dummy2_1$D_IN = 1'b0 ;
  assign w_l_lockVec_2_nextId_dummy2_1$EN = 1'b0 ;

  // submodule w_l_lockVec_3_nextId_dummy2_0
  assign w_l_lockVec_3_nextId_dummy2_0$D_IN = 1'b0 ;
  assign w_l_lockVec_3_nextId_dummy2_0$EN = 1'b0 ;

  // submodule w_l_lockVec_3_nextId_dummy2_1
  assign w_l_lockVec_3_nextId_dummy2_1$D_IN = 1'b0 ;
  assign w_l_lockVec_3_nextId_dummy2_1$EN = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_f_l_entryVec_0_read__6_BIT_10_7_72_OR_N_ETC___d380 =
	     ((!f_l_entryVec_0[10] ||
	       !f_l_entryVec_0_read__6_BITS_9_TO_0_59_EQ_hg_fi_ETC___d360) &&
	      f_l_entryVec_1[10] &&
	      f_l_entryVec_1_read__4_BITS_9_TO_0_56_EQ_hg_fi_ETC___d357) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_h_l_entryVec_0_read__11_BIT_10_12_67_OR_ETC___d475 =
	     ((!h_l_entryVec_0[10] ||
	       !IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d455) &&
	      h_l_entryVec_1[10] &&
	      IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d451) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_h_l_entryVec_0_read__11_BIT_10_12_67_OR_ETC___d587 =
	     ((!h_l_entryVec_0[10] ||
	       !IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d559) &&
	      h_l_entryVec_1[10] &&
	      IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d557) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d491 =
	     x__h26655 == 2'd0 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443 ||
	      h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d458) ;
  assign IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d493 =
	     x__h26655 == 2'd1 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443 ||
	      h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d458) ;
  assign IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d495 =
	     x__h26655 == 2'd2 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443 ||
	      h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d458) ;
  assign IF_NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_ETC___d497 =
	     x__h26655 == 2'd3 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443 ||
	      h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d458) ;
  assign IF_NOT_w_l_entryVec_0_read__99_BIT_10_00_11_OR_ETC___d419 =
	     ((!w_l_entryVec_0[10] ||
	       !w_l_entryVec_0_read__99_BITS_9_TO_0_98_EQ_hg_f_ETC___d399) &&
	      w_l_entryVec_1[10] &&
	      w_l_entryVec_1_read__06_BITS_9_TO_0_95_EQ_hg_f_ETC___d396) ?
	       2'd1 :
	       2'd0 ;
  assign IF_f_l_entryVec_3_read__08_BIT_10_09_AND_f_l_e_ETC___d428 =
	     ((f_l_entryVec_3[10] &&
	       f_l_entryVec_3[9:0] ==
	       hg_fifo__input__TO_Start_rv$port1__read[12:3] ||
	       f_l_entryVec_2_read__01_BIT_10_02_AND_f_l_entr_ETC___d363) ?
		SEL_ARR_f_l_lockVec_0_empty_5_f_l_lockVec_1_em_ETC___d383 :
		!f_l_entryVec_3[10] || !f_l_entryVec_2[10] ||
		!f_l_entryVec_1[10] ||
		!f_l_entryVec_0[10]) &&
	     ((w_l_entryVec_3[10] &&
	       w_l_entryVec_3[9:0] ==
	       hg_fifo__input__TO_Start_rv$port1__read[12:3] ||
	       w_l_entryVec_2_read__13_BIT_10_14_AND_w_l_entr_ETC___d402) ?
		SEL_ARR_w_l_lockVec_0_empty_98_w_l_lockVec_1_e_ETC___d422 :
		!w_l_entryVec_3[10] || !w_l_entryVec_2[10] ||
		!w_l_entryVec_1[10] ||
		!w_l_entryVec_0[10]) ;
  assign IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d455 =
	     h_l_entryVec_0[9:0] == hg_fifo_Start_TO_Stage__0$D_OUT[44:35] ;
  assign IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d559 =
	     h_l_entryVec_0[9:0] == hg_fifo_Stage__0_TO_Stage__1$D_OUT[12:3] ;
  assign IF_h_l_entryVec_1_read__18_BIT_10_19_AND_h_l_e_ETC___d520 =
	     (h_l_entryVec_1[10] && h_l_entryVec_0[10] &&
	      !h_l_entryVec_2[10]) ?
	       2'd2 :
	       ((h_l_entryVec_0[10] && !h_l_entryVec_1[10]) ? 2'd1 : 2'd0) ;
  assign IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d451 =
	     h_l_entryVec_1[9:0] == hg_fifo_Start_TO_Stage__0$D_OUT[44:35] ;
  assign IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d557 =
	     h_l_entryVec_1[9:0] == hg_fifo_Stage__0_TO_Stage__1$D_OUT[12:3] ;
  assign IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d447 =
	     h_l_entryVec_2[9:0] == hg_fifo_Start_TO_Stage__0$D_OUT[44:35] ;
  assign IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d555 =
	     h_l_entryVec_2[9:0] == hg_fifo_Stage__0_TO_Stage__1$D_OUT[12:3] ;
  assign IF_h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h__ETC___d483 =
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443 ||
	      h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d458) ?
	       SEL_ARR_h_l_lockVec_0_empty_10_h_l_lockVec_1_e_ETC___d478 :
	       NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d482 ;
  assign IF_h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h__ETC___d543 =
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443 ||
	      h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d458) ?
	       SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d540 :
	       (NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d482 ?
		  SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d541 :
		  2'd0) ;
  assign IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443 =
	     h_l_entryVec_3[9:0] == hg_fifo_Start_TO_Stage__0$D_OUT[44:35] ;
  assign IF_h_l_lockVec_0_nextId_dummy2_0_read__98_AND__ETC___d500 =
	     (h_l_lockVec_0_nextId_dummy2_0$Q_OUT &&
	      h_l_lockVec_0_nextId_dummy2_1$Q_OUT) ?
	       h_l_lockVec_0_nextId_rl :
	       2'd0 ;
  assign IF_h_l_lockVec_0_nextId_dummy2_0_read__98_AND__ETC___d501 =
	     IF_h_l_lockVec_0_nextId_dummy2_0_read__98_AND__ETC___d500 +
	     2'd1 ;
  assign IF_h_l_lockVec_0_nextId_lat_0_whas__28_THEN_h__ETC___d231 =
	     h_l_lockVec_0_nextId_lat_0$whas ?
	       IF_h_l_lockVec_0_nextId_dummy2_0_read__98_AND__ETC___d501 :
	       h_l_lockVec_0_nextId_rl ;
  assign IF_h_l_lockVec_1_nextId_dummy2_0_read__02_AND__ETC___d504 =
	     (h_l_lockVec_1_nextId_dummy2_0$Q_OUT &&
	      h_l_lockVec_1_nextId_dummy2_1$Q_OUT) ?
	       h_l_lockVec_1_nextId_rl :
	       2'd0 ;
  assign IF_h_l_lockVec_1_nextId_dummy2_0_read__02_AND__ETC___d505 =
	     IF_h_l_lockVec_1_nextId_dummy2_0_read__02_AND__ETC___d504 +
	     2'd1 ;
  assign IF_h_l_lockVec_1_nextId_lat_0_whas__49_THEN_h__ETC___d252 =
	     h_l_lockVec_1_nextId_lat_0$whas ?
	       IF_h_l_lockVec_1_nextId_dummy2_0_read__02_AND__ETC___d505 :
	       h_l_lockVec_1_nextId_rl ;
  assign IF_h_l_lockVec_2_nextId_dummy2_0_read__06_AND__ETC___d508 =
	     (h_l_lockVec_2_nextId_dummy2_0$Q_OUT &&
	      h_l_lockVec_2_nextId_dummy2_1$Q_OUT) ?
	       h_l_lockVec_2_nextId_rl :
	       2'd0 ;
  assign IF_h_l_lockVec_2_nextId_dummy2_0_read__06_AND__ETC___d509 =
	     IF_h_l_lockVec_2_nextId_dummy2_0_read__06_AND__ETC___d508 +
	     2'd1 ;
  assign IF_h_l_lockVec_2_nextId_lat_0_whas__70_THEN_h__ETC___d273 =
	     h_l_lockVec_2_nextId_lat_0$whas ?
	       IF_h_l_lockVec_2_nextId_dummy2_0_read__06_AND__ETC___d509 :
	       h_l_lockVec_2_nextId_rl ;
  assign IF_h_l_lockVec_3_nextId_dummy2_0_read__10_AND__ETC___d512 =
	     (h_l_lockVec_3_nextId_dummy2_0$Q_OUT &&
	      h_l_lockVec_3_nextId_dummy2_1$Q_OUT) ?
	       h_l_lockVec_3_nextId_rl :
	       2'd0 ;
  assign IF_h_l_lockVec_3_nextId_dummy2_0_read__10_AND__ETC___d513 =
	     IF_h_l_lockVec_3_nextId_dummy2_0_read__10_AND__ETC___d512 +
	     2'd1 ;
  assign IF_h_l_lockVec_3_nextId_lat_0_whas__91_THEN_h__ETC___d294 =
	     h_l_lockVec_3_nextId_lat_0$whas ?
	       IF_h_l_lockVec_3_nextId_dummy2_0_read__10_AND__ETC___d513 :
	       h_l_lockVec_3_nextId_rl ;
  assign IF_hg_outputQueue_nextTag_dummy2_0_read__86_AN_ETC___d688 =
	     (hg_outputQueue_nextTag_dummy2_0$Q_OUT &&
	      hg_outputQueue_nextTag_dummy2_1$Q_OUT) ?
	       hg_outputQueue_nextTag_rl :
	       3'd0 ;
  assign IF_hg_outputQueue_nextTag_lat_0_whas__40_THEN__ETC___d343 =
	     MUX_hg_outputQueue_val$write_1__SEL_2 ?
	       b__h24879 :
	       hg_outputQueue_nextTag_rl ;
  assign IF_o_nextId_dummy2_0_read__67_AND_o_nextId_dum_ETC___d669 =
	     (o_nextId_dummy2_0$Q_OUT && o_nextId_dummy2_1$Q_OUT) ?
	       o_nextId_rl :
	       2'd0 ;
  assign IF_o_nextId_lat_0_whas__19_THEN_o_nextId_lat_0_ETC___d622 =
	     MUX_o_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ?
	       b__h31747 :
	       o_nextId_rl ;
  assign IF_o_outputQueue_nextTag_dummy2_0_read__25_AND_ETC___d727 =
	     (o_outputQueue_nextTag_dummy2_0$Q_OUT &&
	      o_outputQueue_nextTag_dummy2_1$Q_OUT) ?
	       o_outputQueue_nextTag_rl :
	       2'd0 ;
  assign IF_o_outputQueue_nextTag_lat_0_whas__40_THEN_o_ETC___d643 =
	     EN__into_resp ? b__h33309 : o_outputQueue_nextTag_rl ;
  assign NOT_f_l_entryVec_1_read__4_BIT_10_5_69_OR_NOT__ETC___d378 =
	     (!f_l_entryVec_1[10] ||
	      !f_l_entryVec_1_read__4_BITS_9_TO_0_56_EQ_hg_fi_ETC___d357) &&
	     (!f_l_entryVec_0[10] ||
	      !f_l_entryVec_0_read__6_BITS_9_TO_0_59_EQ_hg_fi_ETC___d360) &&
	     f_l_entryVec_2[10] &&
	     f_l_entryVec_2_read__01_BITS_9_TO_0_53_EQ_hg_f_ETC___d354 ;
  assign NOT_f_l_entryVec_2_read__01_BIT_10_02_66_OR_NO_ETC___d376 =
	     (!f_l_entryVec_2[10] ||
	      !f_l_entryVec_2_read__01_BITS_9_TO_0_53_EQ_hg_f_ETC___d354) &&
	     (!f_l_entryVec_1[10] ||
	      !f_l_entryVec_1_read__4_BITS_9_TO_0_56_EQ_hg_fi_ETC___d357) &&
	     (!f_l_entryVec_0[10] ||
	      !f_l_entryVec_0_read__6_BITS_9_TO_0_59_EQ_hg_fi_ETC___d360) ;
  assign NOT_h_l_entryVec_1_read__18_BIT_10_19_64_OR_NO_ETC___d473 =
	     (!h_l_entryVec_1[10] ||
	      !IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d451) &&
	     (!h_l_entryVec_0[10] ||
	      !IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d455) &&
	     h_l_entryVec_2[10] &&
	     IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d447 ;
  assign NOT_h_l_entryVec_1_read__18_BIT_10_19_64_OR_NO_ETC___d585 =
	     (!h_l_entryVec_1[10] ||
	      !IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d557) &&
	     (!h_l_entryVec_0[10] ||
	      !IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d559) &&
	     h_l_entryVec_2[10] &&
	     IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d555 ;
  assign NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_NO_ETC___d471 =
	     (!h_l_entryVec_2[10] ||
	      !IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d447) &&
	     (!h_l_entryVec_1[10] ||
	      !IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d451) &&
	     (!h_l_entryVec_0[10] ||
	      !IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d455) ;
  assign NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_NO_ETC___d583 =
	     (!h_l_entryVec_2[10] ||
	      !IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d555) &&
	     (!h_l_entryVec_1[10] ||
	      !IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d557) &&
	     (!h_l_entryVec_0[10] ||
	      !IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d559) ;
  assign NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d482 =
	     !h_l_entryVec_3[10] || !h_l_entryVec_2[10] ||
	     !h_l_entryVec_1[10] ||
	     !h_l_entryVec_0[10] ;
  assign NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d526 =
	     (!h_l_entryVec_3[10] ||
	      !IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443) &&
	     NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_NO_ETC___d471 &&
	     NOT_h_l_entryVec_3_read__32_BIT_10_33_79_OR_NO_ETC___d482 ;
  assign NOT_w_l_entryVec_1_read__06_BIT_10_07_08_OR_NO_ETC___d417 =
	     (!w_l_entryVec_1[10] ||
	      !w_l_entryVec_1_read__06_BITS_9_TO_0_95_EQ_hg_f_ETC___d396) &&
	     (!w_l_entryVec_0[10] ||
	      !w_l_entryVec_0_read__99_BITS_9_TO_0_98_EQ_hg_f_ETC___d399) &&
	     w_l_entryVec_2[10] &&
	     w_l_entryVec_2_read__13_BITS_9_TO_0_92_EQ_hg_f_ETC___d393 ;
  assign NOT_w_l_entryVec_2_read__13_BIT_10_14_05_OR_NO_ETC___d415 =
	     (!w_l_entryVec_2[10] ||
	      !w_l_entryVec_2_read__13_BITS_9_TO_0_92_EQ_hg_f_ETC___d393) &&
	     (!w_l_entryVec_1[10] ||
	      !w_l_entryVec_1_read__06_BITS_9_TO_0_95_EQ_hg_f_ETC___d396) &&
	     (!w_l_entryVec_0[10] ||
	      !w_l_entryVec_0_read__99_BITS_9_TO_0_98_EQ_hg_f_ETC___d399) ;
  assign b__h17187 = h_l_lockVec_0_owner + 2'd1 ;
  assign b__h18595 = h_l_lockVec_1_owner + 2'd1 ;
  assign b__h20003 = h_l_lockVec_2_owner + 2'd1 ;
  assign b__h21411 = h_l_lockVec_3_owner + 2'd1 ;
  assign b__h24879 =
	     IF_hg_outputQueue_nextTag_dummy2_0_read__86_AN_ETC___d688 +
	     3'd1 ;
  assign b__h31747 =
	     IF_o_nextId_dummy2_0_read__67_AND_o_nextId_dum_ETC___d669 +
	     2'd1 ;
  assign b__h32070 = o_owner + 2'd1 ;
  assign b__h33309 =
	     IF_o_outputQueue_nextTag_dummy2_0_read__25_AND_ETC___d727 +
	     2'd1 ;
  assign f_l_entryVec_0_read__6_BITS_9_TO_0_59_EQ_hg_fi_ETC___d360 =
	     f_l_entryVec_0[9:0] ==
	     hg_fifo__input__TO_Start_rv$port1__read[12:3] ;
  assign f_l_entryVec_1_read__4_BITS_9_TO_0_56_EQ_hg_fi_ETC___d357 =
	     f_l_entryVec_1[9:0] ==
	     hg_fifo__input__TO_Start_rv$port1__read[12:3] ;
  assign f_l_entryVec_2_read__01_BITS_9_TO_0_53_EQ_hg_f_ETC___d354 =
	     f_l_entryVec_2[9:0] ==
	     hg_fifo__input__TO_Start_rv$port1__read[12:3] ;
  assign f_l_entryVec_2_read__01_BIT_10_02_AND_f_l_entr_ETC___d363 =
	     f_l_entryVec_2[10] &&
	     f_l_entryVec_2_read__01_BITS_9_TO_0_53_EQ_hg_f_ETC___d354 ||
	     f_l_entryVec_1[10] &&
	     f_l_entryVec_1_read__4_BITS_9_TO_0_56_EQ_hg_fi_ETC___d357 ||
	     f_l_entryVec_0[10] &&
	     f_l_entryVec_0_read__6_BITS_9_TO_0_59_EQ_hg_fi_ETC___d360 ;
  assign h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d458 =
	     h_l_entryVec_2[10] &&
	     IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d447 ||
	     h_l_entryVec_1[10] &&
	     IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d451 ||
	     h_l_entryVec_0[10] &&
	     IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d455 ;
  assign h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d562 =
	     h_l_entryVec_2[10] &&
	     IF_h_l_entryVec_2_read__25_BIT_10_26_THEN_h_l__ETC___d555 ||
	     h_l_entryVec_1[10] &&
	     IF_h_l_entryVec_1_read__18_BIT_10_19_THEN_h_l__ETC___d557 ||
	     h_l_entryVec_0[10] &&
	     IF_h_l_entryVec_0_read__11_BIT_10_12_THEN_h_l__ETC___d559 ;
  assign h_l_entryVec_3_read__32_BIT_10_33_AND_IF_h_l_e_ETC___d563 =
	     h_l_entryVec_3[10] &&
	     h_l_entryVec_3[9:0] ==
	     hg_fifo_Stage__0_TO_Stage__1$D_OUT[12:3] ||
	     h_l_entryVec_2_read__25_BIT_10_26_AND_IF_h_l_e_ETC___d562 ;
  assign o_fifo_Start_TO_Stage__3_first__77_BIT_2_78_OR_ETC___d695 =
	     o_fifo_Start_TO_Stage__3$D_OUT[2] ||
	     IF_hg_outputQueue_nextTag_dummy2_0_read__86_AN_ETC___d688 ==
	     o_fifo_Stage__1_TO_Stage__3$D_OUT[4:2] &&
	     hg_outputQueue_val[1] ;
  assign o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649 =
	     o_fifo__input__TO_Start_f$D_OUT[11:2] < 10'd1000 ;
  assign o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d665 =
	     o_fifo__input__TO_Start_f_first__47_BITS_11_TO_ETC___d649 ||
	     (o_outputQueue_nextTag_dummy2_1$Q_OUT ?
		IF_o_outputQueue_nextTag_lat_0_whas__40_THEN_o_ETC___d643 :
		2'd0) ==
	     o_fifo__input__TO_Start_f$D_OUT[1:0] ;
  assign th_rf_sub_hg_fifo_Start_TO_Stage__0_first__41__ETC___d537 =
	     th_rf$D_OUT_1 + hg_fifo_Start_TO_Stage__0$D_OUT[34:3] ;
  assign w_l_entryVec_0_read__99_BITS_9_TO_0_98_EQ_hg_f_ETC___d399 =
	     w_l_entryVec_0[9:0] ==
	     hg_fifo__input__TO_Start_rv$port1__read[12:3] ;
  assign w_l_entryVec_1_read__06_BITS_9_TO_0_95_EQ_hg_f_ETC___d396 =
	     w_l_entryVec_1[9:0] ==
	     hg_fifo__input__TO_Start_rv$port1__read[12:3] ;
  assign w_l_entryVec_2_read__13_BITS_9_TO_0_92_EQ_hg_f_ETC___d393 =
	     w_l_entryVec_2[9:0] ==
	     hg_fifo__input__TO_Start_rv$port1__read[12:3] ;
  assign w_l_entryVec_2_read__13_BIT_10_14_AND_w_l_entr_ETC___d402 =
	     w_l_entryVec_2[10] &&
	     w_l_entryVec_2_read__13_BITS_9_TO_0_92_EQ_hg_f_ETC___d393 ||
	     w_l_entryVec_1[10] &&
	     w_l_entryVec_1_read__06_BITS_9_TO_0_95_EQ_hg_f_ETC___d396 ||
	     w_l_entryVec_0[10] &&
	     w_l_entryVec_0_read__99_BITS_9_TO_0_98_EQ_hg_f_ETC___d399 ;
  assign x__h25497 =
	     (NOT_f_l_entryVec_2_read__01_BIT_10_02_66_OR_NO_ETC___d376 &&
	      f_l_entryVec_3[10] &&
	      f_l_entryVec_3[9:0] ==
	      hg_fifo__input__TO_Start_rv$port1__read[12:3]) ?
	       2'd3 :
	       (NOT_f_l_entryVec_1_read__4_BIT_10_5_69_OR_NOT__ETC___d378 ?
		  2'd2 :
		  IF_NOT_f_l_entryVec_0_read__6_BIT_10_7_72_OR_N_ETC___d380) ;
  assign x__h26014 =
	     (NOT_w_l_entryVec_2_read__13_BIT_10_14_05_OR_NO_ETC___d415 &&
	      w_l_entryVec_3[10] &&
	      w_l_entryVec_3[9:0] ==
	      hg_fifo__input__TO_Start_rv$port1__read[12:3]) ?
	       2'd3 :
	       (NOT_w_l_entryVec_1_read__06_BIT_10_07_08_OR_NO_ETC___d417 ?
		  2'd2 :
		  IF_NOT_w_l_entryVec_0_read__99_BIT_10_00_11_OR_ETC___d419) ;
  assign x__h26655 =
	     (NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_NO_ETC___d471 &&
	      h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__32_BIT_10_33_THEN_h_l__ETC___d443) ?
	       2'd3 :
	       (NOT_h_l_entryVec_1_read__18_BIT_10_19_64_OR_NO_ETC___d473 ?
		  2'd2 :
		  IF_NOT_h_l_entryVec_0_read__11_BIT_10_12_67_OR_ETC___d475) ;
  assign x__h27260 =
	     (h_l_entryVec_2[10] && h_l_entryVec_1[10] &&
	      h_l_entryVec_0[10] &&
	      !h_l_entryVec_3[10]) ?
	       2'd3 :
	       IF_h_l_entryVec_1_read__18_BIT_10_19_AND_h_l_e_ETC___d520 ;
  assign x__h29141 =
	     (NOT_h_l_entryVec_2_read__25_BIT_10_26_61_OR_NO_ETC___d583 &&
	      h_l_entryVec_3[10] &&
	      h_l_entryVec_3[9:0] ==
	      hg_fifo_Stage__0_TO_Stage__1$D_OUT[12:3]) ?
	       2'd3 :
	       (NOT_h_l_entryVec_1_read__18_BIT_10_19_64_OR_NO_ETC___d585 ?
		  2'd2 :
		  IF_NOT_h_l_entryVec_0_read__11_BIT_10_12_67_OR_ETC___d587) ;
  always@(x__h26655 or
	  h_l_lockVec_0_empty or
	  h_l_lockVec_1_empty or h_l_lockVec_2_empty or h_l_lockVec_3_empty)
  begin
    case (x__h26655)
      2'd0:
	  SEL_ARR_h_l_lockVec_0_empty_10_h_l_lockVec_1_e_ETC___d478 =
	      h_l_lockVec_0_empty;
      2'd1:
	  SEL_ARR_h_l_lockVec_0_empty_10_h_l_lockVec_1_e_ETC___d478 =
	      h_l_lockVec_1_empty;
      2'd2:
	  SEL_ARR_h_l_lockVec_0_empty_10_h_l_lockVec_1_e_ETC___d478 =
	      h_l_lockVec_2_empty;
      2'd3:
	  SEL_ARR_h_l_lockVec_0_empty_10_h_l_lockVec_1_e_ETC___d478 =
	      h_l_lockVec_3_empty;
    endcase
  end
  always@(x__h29141 or
	  h_l_lockVec_0_owner or
	  hg_fifo_Stage__0_TO_Stage__1$D_OUT or
	  h_l_lockVec_1_owner or h_l_lockVec_2_owner or h_l_lockVec_3_owner)
  begin
    case (x__h29141)
      2'd0:
	  SEL_ARR_h_l_lockVec_0_owner_64_EQ_IF_hg_fifo_S_ETC___d590 =
	      h_l_lockVec_0_owner ==
	      hg_fifo_Stage__0_TO_Stage__1$D_OUT[14:13];
      2'd1:
	  SEL_ARR_h_l_lockVec_0_owner_64_EQ_IF_hg_fifo_S_ETC___d590 =
	      h_l_lockVec_1_owner ==
	      hg_fifo_Stage__0_TO_Stage__1$D_OUT[14:13];
      2'd2:
	  SEL_ARR_h_l_lockVec_0_owner_64_EQ_IF_hg_fifo_S_ETC___d590 =
	      h_l_lockVec_2_owner ==
	      hg_fifo_Stage__0_TO_Stage__1$D_OUT[14:13];
      2'd3:
	  SEL_ARR_h_l_lockVec_0_owner_64_EQ_IF_hg_fifo_S_ETC___d590 =
	      h_l_lockVec_3_owner ==
	      hg_fifo_Stage__0_TO_Stage__1$D_OUT[14:13];
    endcase
  end
  always@(x__h26655 or
	  IF_h_l_lockVec_0_nextId_dummy2_0_read__98_AND__ETC___d500 or
	  IF_h_l_lockVec_1_nextId_dummy2_0_read__02_AND__ETC___d504 or
	  IF_h_l_lockVec_2_nextId_dummy2_0_read__06_AND__ETC___d508 or
	  IF_h_l_lockVec_3_nextId_dummy2_0_read__10_AND__ETC___d512)
  begin
    case (x__h26655)
      2'd0:
	  SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d540 =
	      IF_h_l_lockVec_0_nextId_dummy2_0_read__98_AND__ETC___d500;
      2'd1:
	  SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d540 =
	      IF_h_l_lockVec_1_nextId_dummy2_0_read__02_AND__ETC___d504;
      2'd2:
	  SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d540 =
	      IF_h_l_lockVec_2_nextId_dummy2_0_read__06_AND__ETC___d508;
      2'd3:
	  SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d540 =
	      IF_h_l_lockVec_3_nextId_dummy2_0_read__10_AND__ETC___d512;
    endcase
  end
  always@(x__h27260 or
	  IF_h_l_lockVec_0_nextId_dummy2_0_read__98_AND__ETC___d500 or
	  IF_h_l_lockVec_1_nextId_dummy2_0_read__02_AND__ETC___d504 or
	  IF_h_l_lockVec_2_nextId_dummy2_0_read__06_AND__ETC___d508 or
	  IF_h_l_lockVec_3_nextId_dummy2_0_read__10_AND__ETC___d512)
  begin
    case (x__h27260)
      2'd0:
	  SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d541 =
	      IF_h_l_lockVec_0_nextId_dummy2_0_read__98_AND__ETC___d500;
      2'd1:
	  SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d541 =
	      IF_h_l_lockVec_1_nextId_dummy2_0_read__02_AND__ETC___d504;
      2'd2:
	  SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d541 =
	      IF_h_l_lockVec_2_nextId_dummy2_0_read__06_AND__ETC___d508;
      2'd3:
	  SEL_ARR_IF_h_l_lockVec_0_nextId_dummy2_0_read__ETC___d541 =
	      IF_h_l_lockVec_3_nextId_dummy2_0_read__10_AND__ETC___d512;
    endcase
  end
  always@(x__h25497 or
	  f_l_lockVec_0_empty or
	  f_l_lockVec_1_empty or f_l_lockVec_2_empty or f_l_lockVec_3_empty)
  begin
    case (x__h25497)
      2'd0:
	  SEL_ARR_f_l_lockVec_0_empty_5_f_l_lockVec_1_em_ETC___d383 =
	      f_l_lockVec_0_empty;
      2'd1:
	  SEL_ARR_f_l_lockVec_0_empty_5_f_l_lockVec_1_em_ETC___d383 =
	      f_l_lockVec_1_empty;
      2'd2:
	  SEL_ARR_f_l_lockVec_0_empty_5_f_l_lockVec_1_em_ETC___d383 =
	      f_l_lockVec_2_empty;
      2'd3:
	  SEL_ARR_f_l_lockVec_0_empty_5_f_l_lockVec_1_em_ETC___d383 =
	      f_l_lockVec_3_empty;
    endcase
  end
  always@(x__h26014 or
	  w_l_lockVec_0_empty or
	  w_l_lockVec_1_empty or w_l_lockVec_2_empty or w_l_lockVec_3_empty)
  begin
    case (x__h26014)
      2'd0:
	  SEL_ARR_w_l_lockVec_0_empty_98_w_l_lockVec_1_e_ETC___d422 =
	      w_l_lockVec_0_empty;
      2'd1:
	  SEL_ARR_w_l_lockVec_0_empty_98_w_l_lockVec_1_e_ETC___d422 =
	      w_l_lockVec_1_empty;
      2'd2:
	  SEL_ARR_w_l_lockVec_0_empty_98_w_l_lockVec_1_e_ETC___d422 =
	      w_l_lockVec_2_empty;
      2'd3:
	  SEL_ARR_w_l_lockVec_0_empty_98_w_l_lockVec_1_e_ETC___d422 =
	      w_l_lockVec_3_empty;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        f_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	f_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	f_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	f_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	f_l_lockVec_0_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	f_l_lockVec_0_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_0_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_1_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	f_l_lockVec_1_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_1_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_2_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	f_l_lockVec_2_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_2_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_3_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	f_l_lockVec_3_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_3_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	h_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	h_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	h_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	h_l_lockVec_0_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	h_l_lockVec_0_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_0_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_1_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	h_l_lockVec_1_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_1_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_2_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	h_l_lockVec_2_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_2_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_3_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	h_l_lockVec_3_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_3_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg <= `BSV_ASSIGNMENT_DELAY 3'd0;
	hg_feature_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	hg_fifo__input__TO_Start_rv <= `BSV_ASSIGNMENT_DELAY 14'd2730;
	hg_h_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	hg_outputQueue_nextTag_rl <= `BSV_ASSIGNMENT_DELAY 3'd0;
	hg_outputQueue_val <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg_weight_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	o <= `BSV_ASSIGNMENT_DELAY 2'd0;
	o_busyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	o_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	o_h_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	o_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	o_outputQueue_nextTag_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	o_outputQueue_val <= `BSV_ASSIGNMENT_DELAY 1'd0;
	o_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	w_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	w_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	w_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	w_l_lockVec_0_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	w_l_lockVec_0_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_0_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_1_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	w_l_lockVec_1_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_1_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_2_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	w_l_lockVec_2_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_2_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_3_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	w_l_lockVec_3_nextId_rl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_3_owner <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (f_l_entryVec_0$EN)
	  f_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY f_l_entryVec_0$D_IN;
	if (f_l_entryVec_1$EN)
	  f_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY f_l_entryVec_1$D_IN;
	if (f_l_entryVec_2$EN)
	  f_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY f_l_entryVec_2$D_IN;
	if (f_l_entryVec_3$EN)
	  f_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY f_l_entryVec_3$D_IN;
	if (f_l_lockVec_0_empty$EN)
	  f_l_lockVec_0_empty <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_0_empty$D_IN;
	if (f_l_lockVec_0_nextId_rl$EN)
	  f_l_lockVec_0_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_0_nextId_rl$D_IN;
	if (f_l_lockVec_0_owner$EN)
	  f_l_lockVec_0_owner <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_0_owner$D_IN;
	if (f_l_lockVec_1_empty$EN)
	  f_l_lockVec_1_empty <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_1_empty$D_IN;
	if (f_l_lockVec_1_nextId_rl$EN)
	  f_l_lockVec_1_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_1_nextId_rl$D_IN;
	if (f_l_lockVec_1_owner$EN)
	  f_l_lockVec_1_owner <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_1_owner$D_IN;
	if (f_l_lockVec_2_empty$EN)
	  f_l_lockVec_2_empty <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_2_empty$D_IN;
	if (f_l_lockVec_2_nextId_rl$EN)
	  f_l_lockVec_2_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_2_nextId_rl$D_IN;
	if (f_l_lockVec_2_owner$EN)
	  f_l_lockVec_2_owner <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_2_owner$D_IN;
	if (f_l_lockVec_3_empty$EN)
	  f_l_lockVec_3_empty <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_3_empty$D_IN;
	if (f_l_lockVec_3_nextId_rl$EN)
	  f_l_lockVec_3_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_3_nextId_rl$D_IN;
	if (f_l_lockVec_3_owner$EN)
	  f_l_lockVec_3_owner <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_3_owner$D_IN;
	if (h_l_entryVec_0$EN)
	  h_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY h_l_entryVec_0$D_IN;
	if (h_l_entryVec_1$EN)
	  h_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY h_l_entryVec_1$D_IN;
	if (h_l_entryVec_2$EN)
	  h_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY h_l_entryVec_2$D_IN;
	if (h_l_entryVec_3$EN)
	  h_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY h_l_entryVec_3$D_IN;
	if (h_l_lockVec_0_empty$EN)
	  h_l_lockVec_0_empty <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_0_empty$D_IN;
	if (h_l_lockVec_0_nextId_rl$EN)
	  h_l_lockVec_0_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_0_nextId_rl$D_IN;
	if (h_l_lockVec_0_owner$EN)
	  h_l_lockVec_0_owner <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_0_owner$D_IN;
	if (h_l_lockVec_1_empty$EN)
	  h_l_lockVec_1_empty <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_1_empty$D_IN;
	if (h_l_lockVec_1_nextId_rl$EN)
	  h_l_lockVec_1_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_1_nextId_rl$D_IN;
	if (h_l_lockVec_1_owner$EN)
	  h_l_lockVec_1_owner <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_1_owner$D_IN;
	if (h_l_lockVec_2_empty$EN)
	  h_l_lockVec_2_empty <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_2_empty$D_IN;
	if (h_l_lockVec_2_nextId_rl$EN)
	  h_l_lockVec_2_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_2_nextId_rl$D_IN;
	if (h_l_lockVec_2_owner$EN)
	  h_l_lockVec_2_owner <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_2_owner$D_IN;
	if (h_l_lockVec_3_empty$EN)
	  h_l_lockVec_3_empty <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_3_empty$D_IN;
	if (h_l_lockVec_3_nextId_rl$EN)
	  h_l_lockVec_3_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_3_nextId_rl$D_IN;
	if (h_l_lockVec_3_owner$EN)
	  h_l_lockVec_3_owner <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_3_owner$D_IN;
	if (hg$EN) hg <= `BSV_ASSIGNMENT_DELAY hg$D_IN;
	if (hg_feature_lock_region$EN)
	  hg_feature_lock_region <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_region$D_IN;
	if (hg_fifo__input__TO_Start_rv$EN)
	  hg_fifo__input__TO_Start_rv <= `BSV_ASSIGNMENT_DELAY
	      hg_fifo__input__TO_Start_rv$D_IN;
	if (hg_h_lock_region$EN)
	  hg_h_lock_region <= `BSV_ASSIGNMENT_DELAY hg_h_lock_region$D_IN;
	if (hg_outputQueue_nextTag_rl$EN)
	  hg_outputQueue_nextTag_rl <= `BSV_ASSIGNMENT_DELAY
	      hg_outputQueue_nextTag_rl$D_IN;
	if (hg_outputQueue_val$EN)
	  hg_outputQueue_val <= `BSV_ASSIGNMENT_DELAY hg_outputQueue_val$D_IN;
	if (hg_weight_lock_region$EN)
	  hg_weight_lock_region <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_region$D_IN;
	if (o$EN) o <= `BSV_ASSIGNMENT_DELAY o$D_IN;
	if (o_busyReg$EN) o_busyReg <= `BSV_ASSIGNMENT_DELAY o_busyReg$D_IN;
	if (o_empty$EN) o_empty <= `BSV_ASSIGNMENT_DELAY o_empty$D_IN;
	if (o_h_lock_region$EN)
	  o_h_lock_region <= `BSV_ASSIGNMENT_DELAY o_h_lock_region$D_IN;
	if (o_nextId_rl$EN)
	  o_nextId_rl <= `BSV_ASSIGNMENT_DELAY o_nextId_rl$D_IN;
	if (o_outputQueue_nextTag_rl$EN)
	  o_outputQueue_nextTag_rl <= `BSV_ASSIGNMENT_DELAY
	      o_outputQueue_nextTag_rl$D_IN;
	if (o_outputQueue_val$EN)
	  o_outputQueue_val <= `BSV_ASSIGNMENT_DELAY o_outputQueue_val$D_IN;
	if (o_owner$EN) o_owner <= `BSV_ASSIGNMENT_DELAY o_owner$D_IN;
	if (w_l_entryVec_0$EN)
	  w_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY w_l_entryVec_0$D_IN;
	if (w_l_entryVec_1$EN)
	  w_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY w_l_entryVec_1$D_IN;
	if (w_l_entryVec_2$EN)
	  w_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY w_l_entryVec_2$D_IN;
	if (w_l_entryVec_3$EN)
	  w_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY w_l_entryVec_3$D_IN;
	if (w_l_lockVec_0_empty$EN)
	  w_l_lockVec_0_empty <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_0_empty$D_IN;
	if (w_l_lockVec_0_nextId_rl$EN)
	  w_l_lockVec_0_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_0_nextId_rl$D_IN;
	if (w_l_lockVec_0_owner$EN)
	  w_l_lockVec_0_owner <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_0_owner$D_IN;
	if (w_l_lockVec_1_empty$EN)
	  w_l_lockVec_1_empty <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_1_empty$D_IN;
	if (w_l_lockVec_1_nextId_rl$EN)
	  w_l_lockVec_1_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_1_nextId_rl$D_IN;
	if (w_l_lockVec_1_owner$EN)
	  w_l_lockVec_1_owner <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_1_owner$D_IN;
	if (w_l_lockVec_2_empty$EN)
	  w_l_lockVec_2_empty <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_2_empty$D_IN;
	if (w_l_lockVec_2_nextId_rl$EN)
	  w_l_lockVec_2_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_2_nextId_rl$D_IN;
	if (w_l_lockVec_2_owner$EN)
	  w_l_lockVec_2_owner <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_2_owner$D_IN;
	if (w_l_lockVec_3_empty$EN)
	  w_l_lockVec_3_empty <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_3_empty$D_IN;
	if (w_l_lockVec_3_nextId_rl$EN)
	  w_l_lockVec_3_nextId_rl <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_3_nextId_rl$D_IN;
	if (w_l_lockVec_3_owner$EN)
	  w_l_lockVec_3_owner <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_3_owner$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    f_l_entryVec_0 = 11'h2AA;
    f_l_entryVec_1 = 11'h2AA;
    f_l_entryVec_2 = 11'h2AA;
    f_l_entryVec_3 = 11'h2AA;
    f_l_lockVec_0_empty = 1'h0;
    f_l_lockVec_0_nextId_rl = 2'h2;
    f_l_lockVec_0_owner = 2'h2;
    f_l_lockVec_1_empty = 1'h0;
    f_l_lockVec_1_nextId_rl = 2'h2;
    f_l_lockVec_1_owner = 2'h2;
    f_l_lockVec_2_empty = 1'h0;
    f_l_lockVec_2_nextId_rl = 2'h2;
    f_l_lockVec_2_owner = 2'h2;
    f_l_lockVec_3_empty = 1'h0;
    f_l_lockVec_3_nextId_rl = 2'h2;
    f_l_lockVec_3_owner = 2'h2;
    h_l_entryVec_0 = 11'h2AA;
    h_l_entryVec_1 = 11'h2AA;
    h_l_entryVec_2 = 11'h2AA;
    h_l_entryVec_3 = 11'h2AA;
    h_l_lockVec_0_empty = 1'h0;
    h_l_lockVec_0_nextId_rl = 2'h2;
    h_l_lockVec_0_owner = 2'h2;
    h_l_lockVec_1_empty = 1'h0;
    h_l_lockVec_1_nextId_rl = 2'h2;
    h_l_lockVec_1_owner = 2'h2;
    h_l_lockVec_2_empty = 1'h0;
    h_l_lockVec_2_nextId_rl = 2'h2;
    h_l_lockVec_2_owner = 2'h2;
    h_l_lockVec_3_empty = 1'h0;
    h_l_lockVec_3_nextId_rl = 2'h2;
    h_l_lockVec_3_owner = 2'h2;
    hg = 3'h2;
    hg_feature_lock_region = 1'h0;
    hg_fifo__input__TO_Start_rv = 14'h2AAA;
    hg_h_lock_region = 1'h0;
    hg_outputQueue_nextTag_rl = 3'h2;
    hg_outputQueue_val = 2'h2;
    hg_weight_lock_region = 1'h0;
    o = 2'h2;
    o_busyReg = 1'h0;
    o_empty = 1'h0;
    o_h_lock_region = 1'h0;
    o_nextId_rl = 2'h2;
    o_outputQueue_nextTag_rl = 2'h2;
    o_outputQueue_val = 1'h0;
    o_owner = 2'h2;
    w_l_entryVec_0 = 11'h2AA;
    w_l_entryVec_1 = 11'h2AA;
    w_l_entryVec_2 = 11'h2AA;
    w_l_entryVec_3 = 11'h2AA;
    w_l_lockVec_0_empty = 1'h0;
    w_l_lockVec_0_nextId_rl = 2'h2;
    w_l_lockVec_0_owner = 2'h2;
    w_l_lockVec_1_empty = 1'h0;
    w_l_lockVec_1_nextId_rl = 2'h2;
    w_l_lockVec_1_owner = 2'h2;
    w_l_lockVec_2_empty = 1'h0;
    w_l_lockVec_2_nextId_rl = 2'h2;
    w_l_lockVec_2_owner = 2'h2;
    w_l_lockVec_3_empty = 1'h0;
    w_l_lockVec_3_nextId_rl = 2'h2;
    w_l_lockVec_3_owner = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hg_s_Stage__0_execute)
	$display($unsigned(th_rf_sub_hg_fifo_Start_TO_Stage__0_first__41__ETC___d537));
  end
  // synopsys translate_on
endmodule  // mkCircuit

