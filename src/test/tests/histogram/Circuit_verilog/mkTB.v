//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTB(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register reg_unused_0
  reg [1 : 0] reg_unused_0;
  wire [1 : 0] reg_unused_0$D_IN;
  wire reg_unused_0$EN;

  // register started
  reg started;
  wire started$D_IN, started$EN;

  // register timer
  reg [31 : 0] timer;
  wire [31 : 0] timer$D_IN;
  wire timer$EN;

  // ports of submodule _unnamed_
  wire [9 : 0] _unnamed_$_into_req_counter;
  wire [1 : 0] _unnamed_$_into_checkHandle_handle, _unnamed_$_into_req;
  wire _unnamed_$EN__into_req,
       _unnamed_$EN__into_resp,
       _unnamed_$RDY__into_req,
       _unnamed_$_into_checkHandle;

  // submodule _unnamed_
  mkCircuit _unnamed_(.CLK(CLK),
		      .RST_N(RST_N),
		      ._into_checkHandle_handle(_unnamed_$_into_checkHandle_handle),
		      ._into_req_counter(_unnamed_$_into_req_counter),
		      .EN__into_req(_unnamed_$EN__into_req),
		      .EN__into_resp(_unnamed_$EN__into_resp),
		      ._into_req(_unnamed_$_into_req),
		      .RDY__into_req(_unnamed_$RDY__into_req),
		      .RDY__into_resp(),
		      ._into_checkHandle(_unnamed_$_into_checkHandle),
		      .RDY__into_checkHandle());

  // register reg_unused_0
  assign reg_unused_0$D_IN = _unnamed_$_into_req ;
  assign reg_unused_0$EN = _unnamed_$RDY__into_req && !started ;

  // register started
  assign started$D_IN = 1'd1 ;
  assign started$EN = _unnamed_$RDY__into_req && !started ;

  // register timer
  assign timer$D_IN = timer + 32'd1 ;
  assign timer$EN = 1'd1 ;

  // submodule _unnamed_
  assign _unnamed_$_into_checkHandle_handle = reg_unused_0 ;
  assign _unnamed_$_into_req_counter = 10'd0 ;
  assign _unnamed_$EN__into_req = _unnamed_$RDY__into_req && !started ;
  assign _unnamed_$EN__into_resp = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        reg_unused_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	started <= `BSV_ASSIGNMENT_DELAY 1'd0;
	timer <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (reg_unused_0$EN)
	  reg_unused_0 <= `BSV_ASSIGNMENT_DELAY reg_unused_0$D_IN;
	if (started$EN) started <= `BSV_ASSIGNMENT_DELAY started$D_IN;
	if (timer$EN) timer <= `BSV_ASSIGNMENT_DELAY timer$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    reg_unused_0 = 2'h2;
    started = 1'h0;
    timer = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (timer >= 32'd1000000 || _unnamed_$_into_checkHandle) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkTB

