/*
n = 128
void histogram ( int feature [] , float weight [] , float hist [] , int n ) {
    for (int i =0; i < n ; ++ i ) {
        int m = feature [ i ];
        float wt = weight [ i ];
        float x = hist [ m ];
        hist [ m ] = x + wt ;
    }
}
*/

pipe hist(counter: uint<10>)[feature: uint<16>[10]<c,s>, weight: uint<32>[10]<c,s>, h: uint<32>[10]<c,s>(FAQueue)]: bool {
  bool done = counter >= u1000<10>;
  if (!done) {
        call hist(counter + u1<10>);
    start(feature);    
    uint<16> m = feature[counter];
    end(feature);    
    uint<10> m1 = m{9:0};
    uint<10> mcp = m{9:0};
    start(weight);    
    uint<32> wt = weight[counter];
    end(weight);    
    start(h);
    reserve(h[mcp]);
    uint<32> nm = h<a>[m1] + wt;    
    end(h);
    ---
    print(nm);
    block(h[mcp]);
    h[mcp] <- nm;
    release(h[mcp]);
    ---
  }
    if (done) {    
      output(true);
    }    
}

circuit {
       tf = regfile(uint<16>, 10);
       tw = regfile(uint<32>, 10);
       th = regfile(uint<32>, 10);
       h = FAQueue(th);
       hg = new hist[tf, tw, h];
       call hg(u0<10>);
}