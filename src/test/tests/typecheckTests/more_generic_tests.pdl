// more_generic_tests.pdl
// def error(inpt :int<10>) :bool
// {
//    shamt = cast(inpt{4:0}, uint<5>);
//    return true;
// }

// def extract(inpt :uint<32>) :bool
// {
//    uint<5> a = inpt{0:4};
//    return true;
// }

// def iden<U>(a :int<U>) :int<U>
// {
//    return a;
// }


// def adder<T>(x :int<T>, y :int<T>) :int<T>
// {
//    return x + iden(y);
// }

// def my_concat<W, X, Z>(a :int<W>, b :int<X>, c :int<Z>) :int<W + X + Z>
// {
//    tmp = a ++ b ++ c;
//    other = b ++ a ++ c;
//    return tmp + other;
// }

// def indexing<G, H>(x :int<G>, y :int<H>) :int<5>
// {
//   tmp = (x ++ y){4:0};
//   return (x ++ y){4:0};
// }

// // def in_scope<I, J>(x :int<I>, y :int<J>) :int<1>
// // {
// //   return x{J:0};
// // }


// def infty(x :int<5>, y :int<5>) :int<10>
// {
//   return x ++ y;
// }

pipe test1(inpt: uint<32>)[rf: int<32>[32]] :int<100>
{
   uint<5> a = inpt{0:4};
   //output (adder(3, 4));
   output (4);
}



circuit {
   r = memory(int<32>, 32);
}