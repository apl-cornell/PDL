// lock-success-read-write-order.pdl
//Expected Success
pipe test3(input: uint<32>)[rf: int<32>[5]<c2,s>(RenameRF), m:int<32>[5]<c2,s>(RenameRF)] {
    uint<5> rs1 = input{4:0};
    uint<5> rs2 = input{9:5};
    start(rf);
    start(m);
    reserve(rf[rs1],R);
    reserve(rf[rs2],W);
    reserve(m[rs1], R);
    end(m);
    end(rf);    
    ---
    block(rf[rs1]);
    block(rf[rs2]);    
    rf[rs2] <- rf[rs1];
    block(m[rs1]);
    y = m[rs1];
    ---
    release(rf[rs1]);
    release(rf[rs2]);
    release(m[rs1]);
    call test3(input);
}

//Tests that modules are analyzed separately
pipe test4(input: uint<32>)[rf: int<32>[5]<c2,s>(RenameRF), m:int<32>[5]<c2,s>(RenameRF)] :bool {
    uint<5> rs1 = input{4:0};
    uint<5> rs2 = input{9:5};
    start(rf);
    start(m);
    acquire(rf[rs1],R);
    reserve(rf[rs2],W);
    acquire(m[rs1], R);
    end(m);
    end(rf);
    ---
    block(rf[rs2]);
    rf[rs2] <- rf[rs1];
    y = m[rs1];
    release(rf[rs1]);
    release(rf[rs2]);
    release(m[rs1]);
    output(true);
    ---
}

circuit {
    r = memory(int<32>, 5);
    m = memory(int<32>, 5);
}