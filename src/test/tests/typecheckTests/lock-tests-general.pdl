// Expected Success
pipe test2(input: int<32>)[rf: int<32>[5]<c2,s>(Queue)] {
    start(rf);
    if (input{0:0} == 1) {
        acquire(rf);
        release(rf);
    }
    end(rf);
    call test2(input);
}
//Expected Success
pipe test4(input: int<32>)[rf: int<32>[5]<c2,s>(Queue)] {
    start(rf);
    if (input{0:0} == 1) {
        acquire(rf);
        int<32> arg <- rf[cast(input{4:0}, uint<5>)];
        release(rf);
    } else {
        ---
        acquire(rf);
        ---
        release(rf);
    }
    end(rf);
    call test4(input);
}
//Expected Success
pipe test5(input: int<32>)[rf: int<32>[5]<c2,s>(Queue)] {

    start(rf);
    acquire(rf);
    ---
    if (input{0:0} == 1) {
        release(rf);
    } else {
        int<32> arg <- rf[cast(input{31:27}, uint<5>)];
        release(rf);
    }
    end(rf);
    call test5(input);
}
//Expected success since reserve is before branch
pipe test8(input: int<32>)[rf: int<32>[5]<a,a>(Queue)] {
    start(rf);
    if (input{0:0} == 1) {
        ---
        acquire(rf);
        int<32> out <- rf[u0<5>];
    } else {
        ---
        acquire(rf);
        int<32> out <- rf[u1<5>];
    }
    call test8(input);
    ---
    rf[u2<5>] <- out;
    release(rf);
    end(rf);
}
//Expected success
pipe test9(input: int<32>)[rf: int<32>[5]<c2,s>(Queue), dmem: int<32>[32]<a,a>(Queue)] {
    start(dmem);
    start(rf);
    if (input{0:0} == 1) {
        acquire(rf);
        release(rf);
    }
    end(rf);
    acquire(dmem);
    release(dmem);
    end(dmem);
    call test9(input);
}
//Expected Success
pipe test15(input: int<32>)[rf: int<32>[5]<c2,s>(Queue)] {
    bool a = true;
    start(rf);
    if (a) {
        acquire(rf);
    }
    if (a) {
        release(rf);
    }
    end(rf);
    call test15(input);
}

//Expected Success
pipe test17(input: int<32>, randomBool: bool, randomBool2: bool)[rf: int<32>[5]<c2,s>(Queue)] {
    bool a = true;
    bool b = false;
    start(rf);
    if (randomBool == a) {
        if (randomBool2 == b){
            acquire(rf);
        }
    }
    if (randomBool == a) {
        if (randomBool2 == b){
            release(rf);
        }
    }
    end(rf);
    call test17(input, randomBool2, randomBool);
}


//ExpectedSuccess
pipe test19(input: int<32>, randomBool: bool, randomBool2: bool)[rf: int<32>[5]<c2,s>(Queue)] {
    start(rf);
    split {
        case: randomBool {
            acquire(rf);
        }
        case: randomBool2 {
            acquire(rf);

        }
        case: (input{0:0} == 1) {
            acquire(rf);
        }
        default: {
            acquire(rf);
        }
    }
    release(rf);
    end(rf);
    call test19(input, randomBool2, randomBool);
}

//ExpectedSuccess
pipe test20(input: int<32>, randomBool: bool, randomBool2: bool)[rf: int<32>[5]<c2,s>(Queue)] {
    start(rf);
    split {
        case: randomBool {
            acquire(rf);
            release(rf);
        }
        case: randomBool2 {
            acquire(rf);
            release(rf);

        }
        case: (input{0:0} == 1) {
            acquire(rf);
            release(rf);
        }
        default: {
            acquire(rf);
            release(rf);
        }
    }
    end(rf);
    call test20(input, randomBool2, randomBool);
}

circuit {
    r = memory(int<32>, 5);
}