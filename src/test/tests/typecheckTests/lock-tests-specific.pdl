// lock-tests-specific.pdl
//Expected Success
pipe test1(input: uint<32>)[rf: int<32>[5]<c2, s>(Queue)] {
    uint<5> rs1 = input{0:4};
    uint<5> rs2 = input{5:9};
    start(rf);
    int<32> arg1 <- rf<a>[rs1]; 
    int<32> arg2 <- rf<a>[rs2]; 
    end(rf);
    ---
    call test1(input);
} 

//Expected Success
pipe test2(input: uint<32>)[rf: int<32>[5]<c2, s>(Queue)] {
    uint<5> rs1 = input{0:4};
    uint<5> rs2 = input{5:9};
    start(rf);
    bool doR1 = (input{0:0} == u1);
    if (doR1) {
        reserve(rf[rs1],R);
    }
    reserve(rf[rs2],R);
    end(rf);
    ---
    if (doR1) {
        block(rf[rs1]);	
        int<32> arg1 <- rf[rs1];
        release(rf[rs1]);
    }
    block(rf[rs2]);
    int<32> arg2 <- rf[rs2];
    release(rf[rs2]);
    call test2(input);
    ---
}


//Expected Success
pipe test5(input: uint<32>, randomBool: bool, randomBool2: bool)[rf:int<32>[5]<c2, s>(Queue)] {
    bool a = true;
    bool b = false;
    uint<5> rs1 = input{0:4};
    uint<5> rs2 = input{5:9};
    start(rf);
    reserve(rf[rs2],R);
    if (randomBool == a) {
        if (randomBool2 == b){
            reserve(rf[rs1],R);
        }
    }
    end(rf);
    ---
    if (randomBool == a) {
        if (randomBool2 == b){
	    block(rf[rs1]);
	    x = rf[rs1];
            release(rf[rs1]);
        }
    }
    block(rf[rs2]);
    y = rf[rs2];
    release(rf[rs2]);
    call test5(input, randomBool2, randomBool);
}
circuit {
    r = memory(int<32>, 5);
}