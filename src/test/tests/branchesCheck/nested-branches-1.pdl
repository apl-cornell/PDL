pipe multi_stg_mul(a1: int<32>, a2: int<32>)[]: int<32> {
     int<32> rr = a1{15:0} * a2{15:0};
     int<32> rl = a1{15:0} * a2{31:16};
     int<32> lr = a1{31:16} * a2{15:0};
//   int<32> ll = a1{31:16} * a2{31:16};
     ---
     int<32> t1 = rl + lr;
     int<32> res = (t1 << 16<5>) + rr;
     output(res);
}

pipe multi_stg_div(num: int<32>, denom: int<32>, quot: int<32>, acc: int<32>, cnt: int<5>)[]: int<32> {
    int<32> tmp = acc{30:0} ++ num{31:31};
    int<32> na = (tmp >= denom) ? (tmp - denom) : (tmp);
    int<32> nq = (tmp >= denom) ? ((quot << 1){31:1} ++ 1<1>) : (quot << 1);
    int<32> nnum = num << 1;
    bool done = (cnt == 31<5>);
    if (done) {
        output(nq);
    } else {
        call multi_stg_div(nnum, denom, nq, na, cnt + 1<5>);
    }
}

pipe dummy(a1: int<32>, a2: int<32>)[]: int<32> {
    int<32> a3 = a1 + a2 + a1;
    ---
    int<32> res = a3 >> 1;
    output(res);
}

pipe dummy2(a1: int<32>, a2: int<32>)[]: int<32> {
    split {
        case: (a1 % 2<32> == 0<32>) {
           if (a2 > a1) {
                int<32> res = a1 + a1;
           } else {
                int<32> res = a1 / 2<32>;
           }
        }
        default: {
            if (a2 > a1) {
                int<32> temp = a1 + a1;
                int<32> res = temp + 1<32>;
            }
            else {
                int<32> res = (a1 - 1<32>)/2<32>;
            }
        }
    }
    output(res);
}

pipe cpu(pc: int<16>)[rf: int<32>[5]<c,s>(FAQueue), imem:
int<32>[16]<a,a>(Queue), m: multi_stg_mul, f: multi_stg_div, d: dummy, d2:
dummy2]: bool {
 bool done = pc >= 14<16>;
 if (!done) {
  call cpu(pc + 1<16>);
 }
 start(imem);
 acquire(imem);
 int<32> insn <- imem[cast(pc, uint<16>)];
 release(imem);
 end(imem);
 ---
 uint<2> op = cast(insn{1:0}, uint<2>);
 uint<5> rs1 = cast(insn{6:2}, uint<5>);
 uint<5> rs2 = cast(insn{11:7}, uint<5>);
 uint<5> rd = cast(insn{16:12}, uint<5>);
 start(rf);
 acquire(rf[rs1], R);
 acquire(rf[rs2], R);
 int<32> rf1 = rf[rs1];
 int<32> rf2 = rf[rs2];
 release(rf[rs1]);
 release(rf[rs2]);
 reserve(rf[rd], W);
 end(rf);
 ---
 split {
    case: (op == u0<2>) {
        split {
            case: (rs1 % u3<5> == u0<5>) {
                int<32> res <- rf1 + rf2;
            }
            case: (rs1 % u3<5> == u1<5>) {
                int<32> res <- rf1 - rf2;
            }
            default: {
                int<32> res <- rf1 << rf2;
            }
        }
    }
    case: (op == u1<2>) {
        split {
            case: (rs2 % u3<5> == u0<5>) {
                int<32> res <- call f(rf1, rf2, 0<32>, 0<32>, 0<5>);
            }
            case: (rs2 % u3<5> == u1<5>){
                int<32> res <- rf1 >> rf2;
            }
            default: {
                int<32> res <- call m(rf1, rf2);
            }

        }
    }
    default: {
        if(op % u2<2> == u0<2>) {
            int<32> res <- call d(rf1, rf2);
        } else {
            int<32> res <- call d2(rf1, rf2);
        }
    }
 }
 ---
 block(rf[rd]);
 print(res);
 rf[rd] <- res;
 release(rf[rd]);
 ---
  if (done) {
     output(true);
  }
}

circuit {
 ti = memory(int<32>, 16);
 i = Queue(ti);
 tr = regfile(int<32>, 5);
 r = FAQueue(tr);
 m = new multi_stg_mul[];
 fp = new multi_stg_div[];
 d = new dummy[];
 d2 = new dummy2[];
 c = new cpu[r, i, m, fp, d, d2];
 call c(0<16>);
}