// type-inference-bit-width-tests.pdl

def helper1(a: int<32>, b:bool, c: String): int<32> {
  d = a + 1;
  f = d + 4;
  if (f == d) {
    return f;
  } else {return d;}
}

def helper2(a:bool, b: bool): bool {
  c = a && b;
  return c;
}

pipe test1(input: int<32>)[rf: int<32>[32]] {
  a = 6 * 6<10>;
  int<32> b = a;
  int<32> c = a + b;
  call test1(c);
}

pipe test2(input: int<32>)[rf: int<32>[32]<a,a>(Queue)] {
  a = 1;
  start(rf);
  reserve(rf[a]);
  ---
  block(rf[a]);
  b <- rf[a];
  release(rf[a]);
  end(rf);
  ---
  call test2(b);
}

pipe test3(input: int<32>)[rf: int<32>[32]] {
  a = 1<32>;
  int<32> b = a << 4;
  c = a << 4;
  call test3(c);
}

pipe test4(input: int<32>)[rf: int<32>[32]] {
  a = 15<32>;
  int<32> b = cast(a{0:8}, int<32>);
  call test4(a);
}

pipe test5()[] {
  a = 6 * 6<5>;
  int<6> b = a;
  int<32> c = helper1(cast(a, int<32>), true, "hi");
  call test5();
}

pipe test6()[] {
  a = 6 - 6;
  int<3> b = a;
  call test6();
}

circuit {
    r = memory(int<32>, 32);
}