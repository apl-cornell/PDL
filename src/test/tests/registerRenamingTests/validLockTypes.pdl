//Expected Success
pipe test1(tinput: uint<32>)[rf: int<32>[5]] {
    uint<5> rs1 = tinput{4:0};
    uint<5> rs2 = tinput{9:5};
    start(rf);
    acquire(rf[rs1], R);
    int<32> arg1 <- rf[rs1];
    acquire(rf[rs2], W);
    rf[rs2] <- 1<32> ;
    release(rf[rs1]);
    release(rf[rs2]);
    end(rf);
    ---
    call test1(tinput);
}

//Expected Success
pipe test2(tinput: uint<32>)[rf: int<32>[5]] {
    uint<5> rs1 = tinput{4:0};
    uint<5> rs2 = tinput{9:5};
    start(rf);
    if (tinput{0:0} == u1) {
        acquire(rf[rs1], R);
        int<32> x <- rf[rs1];
        release(rf[rs1]);
    }
    acquire(rf[rs2], W);
    int<32> rf[rs2] <- 1<32>;
    end(rf);
    release(rf[rs2]);
    ---
    call test2(tinput);
}

pipe test3(tinput: uint<32>)[rf: int<32>[5]<c,s>] {
    uint<5> rs1 = tinput{4:0};
    uint<5> rs2 = tinput{9:5};
    start(rf);
    acquire(rf[rs2], R);
    end(rf);
    int<32> arg2 = rf[rs2] + 4<32>;
    release(rf[rs2]);
    call test3(tinput);
}

circuit {
    r = memory(int<32>, 5);
    rf = regfile(int<32>, 5);

}