//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTB(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register reg_unused_0
  reg [2 : 0] reg_unused_0;
  wire [2 : 0] reg_unused_0$D_IN;
  wire reg_unused_0$EN;

  // register started
  reg started;
  wire started$D_IN, started$EN;

  // register td_doRead
  reg td_doRead;
  wire td_doRead$D_IN, td_doRead$EN;

  // register ti_doRead
  reg ti_doRead;
  wire ti_doRead$D_IN, ti_doRead$EN;

  // ports of submodule m
  wire [51 : 0] m$dmem_bram_client_request_get,
		m$imem_bram_client_request_get;
  wire [31 : 0] m$dmem_bram_client_response_put,
		m$dmem_req_b,
		m$imem_bram_client_response_put,
		m$imem_req_b;
  wire [15 : 0] m$_intc_req_pc, m$dmem_req_a, m$imem_req_a;
  wire [3 : 0] m$dmem_req_wmask, m$imem_req_wmask;
  wire [2 : 0] m$_intc_checkHandle_handle,
	       m$_intc_req,
	       m$dmem_checkRespId_a,
	       m$dmem_peekResp_a,
	       m$dmem_resp_a,
	       m$imem_checkRespId_a,
	       m$imem_peekResp_a,
	       m$imem_resp_a;
  wire m$EN__intc_req,
       m$EN__intc_resp,
       m$EN_dmem_bram_client_request_get,
       m$EN_dmem_bram_client_response_put,
       m$EN_dmem_req,
       m$EN_dmem_resp,
       m$EN_imem_bram_client_request_get,
       m$EN_imem_bram_client_response_put,
       m$EN_imem_req,
       m$EN_imem_resp,
       m$RDY__intc_checkHandle,
       m$RDY__intc_req,
       m$RDY_dmem_bram_client_request_get,
       m$RDY_imem_bram_client_request_get,
       m$_intc_checkHandle;

  // ports of submodule td_p
  wire [31 : 0] td_p$DI, td_p$DO;
  wire [15 : 0] td_p$ADDR;
  wire [3 : 0] td_p$WE;
  wire td_p$EN;

  // ports of submodule ti_p
  wire [31 : 0] ti_p$DI, ti_p$DO;
  wire [15 : 0] ti_p$ADDR;
  wire [3 : 0] ti_p$WE;
  wire ti_p$EN;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h1344;
  reg [63 : 0] v__h1144;
  // synopsys translate_on

  // submodule m
  mkCircuit m(.CLK(CLK),
	      .RST_N(RST_N),
	      ._intc_checkHandle_handle(m$_intc_checkHandle_handle),
	      ._intc_req_pc(m$_intc_req_pc),
	      .dmem_bram_client_response_put(m$dmem_bram_client_response_put),
	      .dmem_checkRespId_a(m$dmem_checkRespId_a),
	      .dmem_peekResp_a(m$dmem_peekResp_a),
	      .dmem_req_a(m$dmem_req_a),
	      .dmem_req_b(m$dmem_req_b),
	      .dmem_req_wmask(m$dmem_req_wmask),
	      .dmem_resp_a(m$dmem_resp_a),
	      .imem_bram_client_response_put(m$imem_bram_client_response_put),
	      .imem_checkRespId_a(m$imem_checkRespId_a),
	      .imem_peekResp_a(m$imem_peekResp_a),
	      .imem_req_a(m$imem_req_a),
	      .imem_req_b(m$imem_req_b),
	      .imem_req_wmask(m$imem_req_wmask),
	      .imem_resp_a(m$imem_resp_a),
	      .EN__intc_req(m$EN__intc_req),
	      .EN__intc_resp(m$EN__intc_resp),
	      .EN_imem_req(m$EN_imem_req),
	      .EN_imem_resp(m$EN_imem_resp),
	      .EN_imem_bram_client_request_get(m$EN_imem_bram_client_request_get),
	      .EN_imem_bram_client_response_put(m$EN_imem_bram_client_response_put),
	      .EN_dmem_req(m$EN_dmem_req),
	      .EN_dmem_resp(m$EN_dmem_resp),
	      .EN_dmem_bram_client_request_get(m$EN_dmem_bram_client_request_get),
	      .EN_dmem_bram_client_response_put(m$EN_dmem_bram_client_response_put),
	      ._intc_req(m$_intc_req),
	      .RDY__intc_req(m$RDY__intc_req),
	      .RDY__intc_resp(),
	      ._intc_checkHandle(m$_intc_checkHandle),
	      .RDY__intc_checkHandle(m$RDY__intc_checkHandle),
	      ._intc_peek(),
	      .RDY__intc_peek(),
	      .imem_req(),
	      .RDY_imem_req(),
	      .imem_peekResp(),
	      .RDY_imem_peekResp(),
	      .imem_checkRespId(),
	      .RDY_imem_checkRespId(),
	      .RDY_imem_resp(),
	      .imem_bram_client_request_get(m$imem_bram_client_request_get),
	      .RDY_imem_bram_client_request_get(m$RDY_imem_bram_client_request_get),
	      .RDY_imem_bram_client_response_put(),
	      .dmem_req(),
	      .RDY_dmem_req(),
	      .dmem_peekResp(),
	      .RDY_dmem_peekResp(),
	      .dmem_checkRespId(),
	      .RDY_dmem_checkRespId(),
	      .RDY_dmem_resp(),
	      .dmem_bram_client_request_get(m$dmem_bram_client_request_get),
	      .RDY_dmem_bram_client_request_get(m$RDY_dmem_bram_client_request_get),
	      .RDY_dmem_bram_client_response_put());

  // submodule td_p
  BRAM1BELoad #(.FILENAME("td1"),
		.PIPELINED(1'd0),
		.ADDR_WIDTH(32'd16),
		.DATA_WIDTH(32'd32),
		.CHUNKSIZE(32'd8),
		.WE_WIDTH(32'd4),
		.MEMSIZE(17'd65536),
		.BINARY(1'd0)) td_p(.CLK(CLK),
				    .ADDR(td_p$ADDR),
				    .DI(td_p$DI),
				    .WE(td_p$WE),
				    .EN(td_p$EN),
				    .DO(td_p$DO));

  // submodule ti_p
  BRAM1BELoad #(.FILENAME("ti1"),
		.PIPELINED(1'd0),
		.ADDR_WIDTH(32'd16),
		.DATA_WIDTH(32'd32),
		.CHUNKSIZE(32'd8),
		.WE_WIDTH(32'd4),
		.MEMSIZE(17'd65536),
		.BINARY(1'd0)) ti_p(.CLK(CLK),
				    .ADDR(ti_p$ADDR),
				    .DI(ti_p$DI),
				    .WE(ti_p$WE),
				    .EN(ti_p$EN),
				    .DO(ti_p$DO));

  // register reg_unused_0
  assign reg_unused_0$D_IN = m$_intc_req ;
  assign reg_unused_0$EN = m$RDY__intc_req && !started ;

  // register started
  assign started$D_IN = 1'd1 ;
  assign started$EN = m$RDY__intc_req && !started ;

  // register td_doRead
  assign td_doRead$D_IN = m$RDY_dmem_bram_client_request_get ;
  assign td_doRead$EN = 1'd1 ;

  // register ti_doRead
  assign ti_doRead$D_IN = m$RDY_imem_bram_client_request_get ;
  assign ti_doRead$EN = 1'd1 ;

  // submodule m
  assign m$_intc_checkHandle_handle = reg_unused_0 ;
  assign m$_intc_req_pc = 16'd0 ;
  assign m$dmem_bram_client_response_put = td_p$DO ;
  assign m$dmem_checkRespId_a = 3'h0 ;
  assign m$dmem_peekResp_a = 3'h0 ;
  assign m$dmem_req_a = 16'h0 ;
  assign m$dmem_req_b = 32'h0 ;
  assign m$dmem_req_wmask = 4'h0 ;
  assign m$dmem_resp_a = 3'h0 ;
  assign m$imem_bram_client_response_put = ti_p$DO ;
  assign m$imem_checkRespId_a = 3'h0 ;
  assign m$imem_peekResp_a = 3'h0 ;
  assign m$imem_req_a = 16'h0 ;
  assign m$imem_req_b = 32'h0 ;
  assign m$imem_req_wmask = 4'h0 ;
  assign m$imem_resp_a = 3'h0 ;
  assign m$EN__intc_req = m$RDY__intc_req && !started ;
  assign m$EN__intc_resp = 1'b0 ;
  assign m$EN_imem_req = 1'b0 ;
  assign m$EN_imem_resp = 1'b0 ;
  assign m$EN_imem_bram_client_request_get =
	     m$RDY_imem_bram_client_request_get ;
  assign m$EN_imem_bram_client_response_put = ti_doRead ;
  assign m$EN_dmem_req = 1'b0 ;
  assign m$EN_dmem_resp = 1'b0 ;
  assign m$EN_dmem_bram_client_request_get =
	     m$RDY_dmem_bram_client_request_get ;
  assign m$EN_dmem_bram_client_response_put = td_doRead ;

  // submodule td_p
  assign td_p$ADDR = m$dmem_bram_client_request_get[47:32] ;
  assign td_p$DI = m$dmem_bram_client_request_get[31:0] ;
  assign td_p$WE = m$dmem_bram_client_request_get[51:48] ;
  assign td_p$EN = m$RDY_dmem_bram_client_request_get ;

  // submodule ti_p
  assign ti_p$ADDR = m$imem_bram_client_request_get[47:32] ;
  assign ti_p$DI = m$imem_bram_client_request_get[31:0] ;
  assign ti_p$WE = m$imem_bram_client_request_get[51:48] ;
  assign ti_p$EN = m$RDY_imem_bram_client_request_get ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        reg_unused_0 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	started <= `BSV_ASSIGNMENT_DELAY 1'd0;
	td_doRead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ti_doRead <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (reg_unused_0$EN)
	  reg_unused_0 <= `BSV_ASSIGNMENT_DELAY reg_unused_0$D_IN;
	if (started$EN) started <= `BSV_ASSIGNMENT_DELAY started$D_IN;
	if (td_doRead$EN) td_doRead <= `BSV_ASSIGNMENT_DELAY td_doRead$D_IN;
	if (ti_doRead$EN) ti_doRead <= `BSV_ASSIGNMENT_DELAY ti_doRead$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    reg_unused_0 = 3'h2;
    started = 1'h0;
    td_doRead = 1'h0;
    ti_doRead = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (m$RDY_dmem_bram_client_request_get)
	begin
	  v__h1344 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (m$RDY_dmem_bram_client_request_get)
	$display("Sending request %t", v__h1344);
    if (RST_N != `BSV_RESET_VALUE)
      if (m$RDY__intc_checkHandle && m$_intc_checkHandle) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (m$RDY_imem_bram_client_request_get)
	begin
	  v__h1144 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (m$RDY_imem_bram_client_request_get)
	$display("Sending request %t", v__h1144);
  end
  // synopsys translate_on
endmodule  // mkTB

