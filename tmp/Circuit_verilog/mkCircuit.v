//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// _intc_req                      O     3 reg
// RDY__intc_req                  O     1
// RDY__intc_resp                 O     1 reg
// _intc_checkHandle              O     1
// RDY__intc_checkHandle          O     1 reg
// _intc_peek                     O     1 reg
// RDY__intc_peek                 O     1 reg
// imem_req                       O     3 reg
// RDY_imem_req                   O     1
// imem_peekResp                  O    32
// RDY_imem_peekResp              O     1 const
// imem_checkRespId               O     1
// RDY_imem_checkRespId           O     1 const
// RDY_imem_resp                  O     1 const
// imem_bram_client_request_get   O    52
// RDY_imem_bram_client_request_get  O     1
// RDY_imem_bram_client_response_put  O     1 const
// dmem_req                       O     3 reg
// RDY_dmem_req                   O     1
// dmem_peekResp                  O    32
// RDY_dmem_peekResp              O     1 const
// dmem_checkRespId               O     1
// RDY_dmem_checkRespId           O     1 const
// RDY_dmem_resp                  O     1 const
// dmem_bram_client_request_get   O    52
// RDY_dmem_bram_client_request_get  O     1
// RDY_dmem_bram_client_response_put  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _intc_req_pc                   I    16
// _intc_checkHandle_handle       I     3
// imem_req_a                     I    16
// imem_req_b                     I    32
// imem_req_wmask                 I     4
// imem_peekResp_a                I     3
// imem_checkRespId_a             I     3
// imem_resp_a                    I     3
// imem_bram_client_response_put  I    32 reg
// dmem_req_a                     I    16
// dmem_req_b                     I    32
// dmem_req_wmask                 I     4
// dmem_peekResp_a                I     3
// dmem_checkRespId_a             I     3
// dmem_resp_a                    I     3
// dmem_bram_client_response_put  I    32 reg
// EN__intc_resp                  I     1
// EN_imem_resp                   I     1
// EN_imem_bram_client_response_put  I     1
// EN_dmem_resp                   I     1
// EN_dmem_bram_client_response_put  I     1
// EN__intc_req                   I     1
// EN_imem_req                    I     1
// EN_imem_bram_client_request_get  I     1 unused
// EN_dmem_req                    I     1
// EN_dmem_bram_client_request_get  I     1 unused
//
// Combinational paths from inputs to outputs:
//   _intc_checkHandle_handle -> _intc_checkHandle
//   imem_peekResp_a -> imem_peekResp
//   imem_checkRespId_a -> imem_checkRespId
//   dmem_peekResp_a -> dmem_peekResp
//   dmem_checkRespId_a -> dmem_checkRespId
//   (imem_req_a,
//    imem_req_b,
//    imem_req_wmask,
//    EN_imem_req) -> imem_bram_client_request_get
//   (dmem_req_a,
//    dmem_req_b,
//    dmem_req_wmask,
//    EN_dmem_req) -> dmem_bram_client_request_get
//   EN_imem_req -> RDY_imem_bram_client_request_get
//   EN_dmem_req -> RDY_dmem_bram_client_request_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCircuit(CLK,
		 RST_N,

		 _intc_req_pc,
		 EN__intc_req,
		 _intc_req,
		 RDY__intc_req,

		 EN__intc_resp,
		 RDY__intc_resp,

		 _intc_checkHandle_handle,
		 _intc_checkHandle,
		 RDY__intc_checkHandle,

		 _intc_peek,
		 RDY__intc_peek,

		 imem_req_a,
		 imem_req_b,
		 imem_req_wmask,
		 EN_imem_req,
		 imem_req,
		 RDY_imem_req,

		 imem_peekResp_a,
		 imem_peekResp,
		 RDY_imem_peekResp,

		 imem_checkRespId_a,
		 imem_checkRespId,
		 RDY_imem_checkRespId,

		 imem_resp_a,
		 EN_imem_resp,
		 RDY_imem_resp,

		 EN_imem_bram_client_request_get,
		 imem_bram_client_request_get,
		 RDY_imem_bram_client_request_get,

		 imem_bram_client_response_put,
		 EN_imem_bram_client_response_put,
		 RDY_imem_bram_client_response_put,

		 dmem_req_a,
		 dmem_req_b,
		 dmem_req_wmask,
		 EN_dmem_req,
		 dmem_req,
		 RDY_dmem_req,

		 dmem_peekResp_a,
		 dmem_peekResp,
		 RDY_dmem_peekResp,

		 dmem_checkRespId_a,
		 dmem_checkRespId,
		 RDY_dmem_checkRespId,

		 dmem_resp_a,
		 EN_dmem_resp,
		 RDY_dmem_resp,

		 EN_dmem_bram_client_request_get,
		 dmem_bram_client_request_get,
		 RDY_dmem_bram_client_request_get,

		 dmem_bram_client_response_put,
		 EN_dmem_bram_client_response_put,
		 RDY_dmem_bram_client_response_put);
  input  CLK;
  input  RST_N;

  // actionvalue method _intc_req
  input  [15 : 0] _intc_req_pc;
  input  EN__intc_req;
  output [2 : 0] _intc_req;
  output RDY__intc_req;

  // action method _intc_resp
  input  EN__intc_resp;
  output RDY__intc_resp;

  // value method _intc_checkHandle
  input  [2 : 0] _intc_checkHandle_handle;
  output _intc_checkHandle;
  output RDY__intc_checkHandle;

  // value method _intc_peek
  output _intc_peek;
  output RDY__intc_peek;

  // actionvalue method imem_req
  input  [15 : 0] imem_req_a;
  input  [31 : 0] imem_req_b;
  input  [3 : 0] imem_req_wmask;
  input  EN_imem_req;
  output [2 : 0] imem_req;
  output RDY_imem_req;

  // value method imem_peekResp
  input  [2 : 0] imem_peekResp_a;
  output [31 : 0] imem_peekResp;
  output RDY_imem_peekResp;

  // value method imem_checkRespId
  input  [2 : 0] imem_checkRespId_a;
  output imem_checkRespId;
  output RDY_imem_checkRespId;

  // action method imem_resp
  input  [2 : 0] imem_resp_a;
  input  EN_imem_resp;
  output RDY_imem_resp;

  // actionvalue method imem_bram_client_request_get
  input  EN_imem_bram_client_request_get;
  output [51 : 0] imem_bram_client_request_get;
  output RDY_imem_bram_client_request_get;

  // action method imem_bram_client_response_put
  input  [31 : 0] imem_bram_client_response_put;
  input  EN_imem_bram_client_response_put;
  output RDY_imem_bram_client_response_put;

  // actionvalue method dmem_req
  input  [15 : 0] dmem_req_a;
  input  [31 : 0] dmem_req_b;
  input  [3 : 0] dmem_req_wmask;
  input  EN_dmem_req;
  output [2 : 0] dmem_req;
  output RDY_dmem_req;

  // value method dmem_peekResp
  input  [2 : 0] dmem_peekResp_a;
  output [31 : 0] dmem_peekResp;
  output RDY_dmem_peekResp;

  // value method dmem_checkRespId
  input  [2 : 0] dmem_checkRespId_a;
  output dmem_checkRespId;
  output RDY_dmem_checkRespId;

  // action method dmem_resp
  input  [2 : 0] dmem_resp_a;
  input  EN_dmem_resp;
  output RDY_dmem_resp;

  // actionvalue method dmem_bram_client_request_get
  input  EN_dmem_bram_client_request_get;
  output [51 : 0] dmem_bram_client_request_get;
  output RDY_dmem_bram_client_request_get;

  // action method dmem_bram_client_response_put
  input  [31 : 0] dmem_bram_client_response_put;
  input  EN_dmem_bram_client_response_put;
  output RDY_dmem_bram_client_response_put;

  // signals for module outputs
  reg [31 : 0] dmem_peekResp, imem_peekResp;
  reg dmem_checkRespId, imem_checkRespId;
  wire [51 : 0] dmem_bram_client_request_get, imem_bram_client_request_get;
  wire [2 : 0] _intc_req, dmem_req, imem_req;
  wire RDY__intc_checkHandle,
       RDY__intc_peek,
       RDY__intc_req,
       RDY__intc_resp,
       RDY_dmem_bram_client_request_get,
       RDY_dmem_bram_client_response_put,
       RDY_dmem_checkRespId,
       RDY_dmem_peekResp,
       RDY_dmem_req,
       RDY_dmem_resp,
       RDY_imem_bram_client_request_get,
       RDY_imem_bram_client_response_put,
       RDY_imem_checkRespId,
       RDY_imem_peekResp,
       RDY_imem_req,
       RDY_imem_resp,
       _intc_checkHandle,
       _intc_peek;

  // inlined wires
  wire [18 : 0] c_fifo__input__TO_Start_enq_data$wget;
  wire [3 : 0] d_amem_nextData_1$wget, i_amem_nextData_1$wget;
  wire c_fifo__input__TO_Start_enq_data$whas,
       d_amem_nextData_1$whas,
       r_l_resVec_0$whas,
       r_l_resVec_1$whas,
       r_l_resVec_2$whas,
       r_l_resVec_3$whas;

  // register c
  reg [2 : 0] c;
  wire [2 : 0] c$D_IN;
  wire c$EN;

  // register c_busyReg
  reg c_busyReg;
  wire c_busyReg$D_IN, c_busyReg$EN;

  // register c_div_lock_region
  reg c_div_lock_region;
  wire c_div_lock_region$D_IN, c_div_lock_region$EN;

  // register c_dmem_lock_region
  reg c_dmem_lock_region;
  wire c_dmem_lock_region$D_IN, c_dmem_lock_region$EN;

  // register c_imem_lock_region
  reg c_imem_lock_region;
  wire c_imem_lock_region$D_IN, c_imem_lock_region$EN;

  // register c_rf_lock_region
  reg c_rf_lock_region;
  wire c_rf_lock_region$D_IN, c_rf_lock_region$EN;

  // register d_amem_head
  reg [2 : 0] d_amem_head;
  wire [2 : 0] d_amem_head$D_IN;
  wire d_amem_head$EN;

  // register d_amem_nextData
  reg [3 : 0] d_amem_nextData;
  wire [3 : 0] d_amem_nextData$D_IN;
  wire d_amem_nextData$EN;

  // register d_amem_outData_0
  reg [31 : 0] d_amem_outData_0;
  wire [31 : 0] d_amem_outData_0$D_IN;
  wire d_amem_outData_0$EN;

  // register d_amem_outData_1
  reg [31 : 0] d_amem_outData_1;
  wire [31 : 0] d_amem_outData_1$D_IN;
  wire d_amem_outData_1$EN;

  // register d_amem_outData_2
  reg [31 : 0] d_amem_outData_2;
  wire [31 : 0] d_amem_outData_2$D_IN;
  wire d_amem_outData_2$EN;

  // register d_amem_outData_3
  reg [31 : 0] d_amem_outData_3;
  wire [31 : 0] d_amem_outData_3$D_IN;
  wire d_amem_outData_3$EN;

  // register d_amem_outData_4
  reg [31 : 0] d_amem_outData_4;
  wire [31 : 0] d_amem_outData_4$D_IN;
  wire d_amem_outData_4$EN;

  // register d_amem_outData_5
  reg [31 : 0] d_amem_outData_5;
  wire [31 : 0] d_amem_outData_5$D_IN;
  wire d_amem_outData_5$EN;

  // register d_amem_outData_6
  reg [31 : 0] d_amem_outData_6;
  wire [31 : 0] d_amem_outData_6$D_IN;
  wire d_amem_outData_6$EN;

  // register d_amem_outData_7
  reg [31 : 0] d_amem_outData_7;
  wire [31 : 0] d_amem_outData_7$D_IN;
  wire d_amem_outData_7$EN;

  // register d_amem_valid_0
  reg d_amem_valid_0;
  reg d_amem_valid_0$D_IN;
  wire d_amem_valid_0$EN;

  // register d_amem_valid_1
  reg d_amem_valid_1;
  reg d_amem_valid_1$D_IN;
  wire d_amem_valid_1$EN;

  // register d_amem_valid_2
  reg d_amem_valid_2;
  reg d_amem_valid_2$D_IN;
  wire d_amem_valid_2$EN;

  // register d_amem_valid_3
  reg d_amem_valid_3;
  reg d_amem_valid_3$D_IN;
  wire d_amem_valid_3$EN;

  // register d_amem_valid_4
  reg d_amem_valid_4;
  reg d_amem_valid_4$D_IN;
  wire d_amem_valid_4$EN;

  // register d_amem_valid_5
  reg d_amem_valid_5;
  reg d_amem_valid_5$D_IN;
  wire d_amem_valid_5$EN;

  // register d_amem_valid_6
  reg d_amem_valid_6;
  reg d_amem_valid_6$D_IN;
  wire d_amem_valid_6$EN;

  // register d_amem_valid_7
  reg d_amem_valid_7;
  reg d_amem_valid_7$D_IN;
  wire d_amem_valid_7$EN;

  // register d_l_entryVec_0
  reg [16 : 0] d_l_entryVec_0;
  wire [16 : 0] d_l_entryVec_0$D_IN;
  wire d_l_entryVec_0$EN;

  // register d_l_entryVec_1
  reg [16 : 0] d_l_entryVec_1;
  wire [16 : 0] d_l_entryVec_1$D_IN;
  wire d_l_entryVec_1$EN;

  // register d_l_entryVec_2
  reg [16 : 0] d_l_entryVec_2;
  wire [16 : 0] d_l_entryVec_2$D_IN;
  wire d_l_entryVec_2$EN;

  // register d_l_entryVec_3
  reg [16 : 0] d_l_entryVec_3;
  wire [16 : 0] d_l_entryVec_3$D_IN;
  wire d_l_entryVec_3$EN;

  // register d_l_lockVec_0_cnt
  reg [1 : 0] d_l_lockVec_0_cnt;
  wire [1 : 0] d_l_lockVec_0_cnt$D_IN;
  wire d_l_lockVec_0_cnt$EN;

  // register d_l_lockVec_0_nextId
  reg [1 : 0] d_l_lockVec_0_nextId;
  wire [1 : 0] d_l_lockVec_0_nextId$D_IN;
  wire d_l_lockVec_0_nextId$EN;

  // register d_l_lockVec_1_cnt
  reg [1 : 0] d_l_lockVec_1_cnt;
  wire [1 : 0] d_l_lockVec_1_cnt$D_IN;
  wire d_l_lockVec_1_cnt$EN;

  // register d_l_lockVec_1_nextId
  reg [1 : 0] d_l_lockVec_1_nextId;
  wire [1 : 0] d_l_lockVec_1_nextId$D_IN;
  wire d_l_lockVec_1_nextId$EN;

  // register d_l_lockVec_2_cnt
  reg [1 : 0] d_l_lockVec_2_cnt;
  wire [1 : 0] d_l_lockVec_2_cnt$D_IN;
  wire d_l_lockVec_2_cnt$EN;

  // register d_l_lockVec_2_nextId
  reg [1 : 0] d_l_lockVec_2_nextId;
  wire [1 : 0] d_l_lockVec_2_nextId$D_IN;
  wire d_l_lockVec_2_nextId$EN;

  // register d_l_lockVec_3_cnt
  reg [1 : 0] d_l_lockVec_3_cnt;
  wire [1 : 0] d_l_lockVec_3_cnt$D_IN;
  wire d_l_lockVec_3_cnt$EN;

  // register d_l_lockVec_3_nextId
  reg [1 : 0] d_l_lockVec_3_nextId;
  wire [1 : 0] d_l_lockVec_3_nextId$D_IN;
  wire d_l_lockVec_3_nextId$EN;

  // register i_amem_head
  reg [2 : 0] i_amem_head;
  wire [2 : 0] i_amem_head$D_IN;
  wire i_amem_head$EN;

  // register i_amem_nextData
  reg [3 : 0] i_amem_nextData;
  wire [3 : 0] i_amem_nextData$D_IN;
  wire i_amem_nextData$EN;

  // register i_amem_outData_0
  reg [31 : 0] i_amem_outData_0;
  wire [31 : 0] i_amem_outData_0$D_IN;
  wire i_amem_outData_0$EN;

  // register i_amem_outData_1
  reg [31 : 0] i_amem_outData_1;
  wire [31 : 0] i_amem_outData_1$D_IN;
  wire i_amem_outData_1$EN;

  // register i_amem_outData_2
  reg [31 : 0] i_amem_outData_2;
  wire [31 : 0] i_amem_outData_2$D_IN;
  wire i_amem_outData_2$EN;

  // register i_amem_outData_3
  reg [31 : 0] i_amem_outData_3;
  wire [31 : 0] i_amem_outData_3$D_IN;
  wire i_amem_outData_3$EN;

  // register i_amem_outData_4
  reg [31 : 0] i_amem_outData_4;
  wire [31 : 0] i_amem_outData_4$D_IN;
  wire i_amem_outData_4$EN;

  // register i_amem_outData_5
  reg [31 : 0] i_amem_outData_5;
  wire [31 : 0] i_amem_outData_5$D_IN;
  wire i_amem_outData_5$EN;

  // register i_amem_outData_6
  reg [31 : 0] i_amem_outData_6;
  wire [31 : 0] i_amem_outData_6$D_IN;
  wire i_amem_outData_6$EN;

  // register i_amem_outData_7
  reg [31 : 0] i_amem_outData_7;
  wire [31 : 0] i_amem_outData_7$D_IN;
  wire i_amem_outData_7$EN;

  // register i_amem_valid_0
  reg i_amem_valid_0;
  reg i_amem_valid_0$D_IN;
  wire i_amem_valid_0$EN;

  // register i_amem_valid_1
  reg i_amem_valid_1;
  reg i_amem_valid_1$D_IN;
  wire i_amem_valid_1$EN;

  // register i_amem_valid_2
  reg i_amem_valid_2;
  reg i_amem_valid_2$D_IN;
  wire i_amem_valid_2$EN;

  // register i_amem_valid_3
  reg i_amem_valid_3;
  reg i_amem_valid_3$D_IN;
  wire i_amem_valid_3$EN;

  // register i_amem_valid_4
  reg i_amem_valid_4;
  reg i_amem_valid_4$D_IN;
  wire i_amem_valid_4$EN;

  // register i_amem_valid_5
  reg i_amem_valid_5;
  reg i_amem_valid_5$D_IN;
  wire i_amem_valid_5$EN;

  // register i_amem_valid_6
  reg i_amem_valid_6;
  reg i_amem_valid_6$D_IN;
  wire i_amem_valid_6$EN;

  // register i_amem_valid_7
  reg i_amem_valid_7;
  reg i_amem_valid_7$D_IN;
  wire i_amem_valid_7$EN;

  // register i_l_cnt
  reg [1 : 0] i_l_cnt;
  wire [1 : 0] i_l_cnt$D_IN;
  wire i_l_cnt$EN;

  // register i_l_nextId
  reg [1 : 0] i_l_nextId;
  wire [1 : 0] i_l_nextId$D_IN;
  wire i_l_nextId$EN;

  // register r_l_entryVec_0
  reg [5 : 0] r_l_entryVec_0;
  wire [5 : 0] r_l_entryVec_0$D_IN;
  wire r_l_entryVec_0$EN;

  // register r_l_entryVec_1
  reg [5 : 0] r_l_entryVec_1;
  wire [5 : 0] r_l_entryVec_1$D_IN;
  wire r_l_entryVec_1$EN;

  // register r_l_entryVec_2
  reg [5 : 0] r_l_entryVec_2;
  wire [5 : 0] r_l_entryVec_2$D_IN;
  wire r_l_entryVec_2$EN;

  // register r_l_entryVec_3
  reg [5 : 0] r_l_entryVec_3;
  wire [5 : 0] r_l_entryVec_3$D_IN;
  wire r_l_entryVec_3$EN;

  // register r_l_lockVec_0_cnt
  reg [1 : 0] r_l_lockVec_0_cnt;
  wire [1 : 0] r_l_lockVec_0_cnt$D_IN;
  wire r_l_lockVec_0_cnt$EN;

  // register r_l_lockVec_0_nextId
  reg [1 : 0] r_l_lockVec_0_nextId;
  wire [1 : 0] r_l_lockVec_0_nextId$D_IN;
  wire r_l_lockVec_0_nextId$EN;

  // register r_l_lockVec_1_cnt
  reg [1 : 0] r_l_lockVec_1_cnt;
  wire [1 : 0] r_l_lockVec_1_cnt$D_IN;
  wire r_l_lockVec_1_cnt$EN;

  // register r_l_lockVec_1_nextId
  reg [1 : 0] r_l_lockVec_1_nextId;
  wire [1 : 0] r_l_lockVec_1_nextId$D_IN;
  wire r_l_lockVec_1_nextId$EN;

  // register r_l_lockVec_2_cnt
  reg [1 : 0] r_l_lockVec_2_cnt;
  wire [1 : 0] r_l_lockVec_2_cnt$D_IN;
  wire r_l_lockVec_2_cnt$EN;

  // register r_l_lockVec_2_nextId
  reg [1 : 0] r_l_lockVec_2_nextId;
  wire [1 : 0] r_l_lockVec_2_nextId$D_IN;
  wire r_l_lockVec_2_nextId$EN;

  // register r_l_lockVec_3_cnt
  reg [1 : 0] r_l_lockVec_3_cnt;
  wire [1 : 0] r_l_lockVec_3_cnt$D_IN;
  wire r_l_lockVec_3_cnt$EN;

  // register r_l_lockVec_3_nextId
  reg [1 : 0] r_l_lockVec_3_nextId;
  wire [1 : 0] r_l_lockVec_3_nextId$D_IN;
  wire r_l_lockVec_3_nextId$EN;

  // ports of submodule c_fifo_Stage__0_TO_Stage__13
  wire [298 : 0] c_fifo_Stage__0_TO_Stage__13$D_IN,
		 c_fifo_Stage__0_TO_Stage__13$D_OUT;
  wire c_fifo_Stage__0_TO_Stage__13$CLR,
       c_fifo_Stage__0_TO_Stage__13$DEQ,
       c_fifo_Stage__0_TO_Stage__13$EMPTY_N,
       c_fifo_Stage__0_TO_Stage__13$ENQ,
       c_fifo_Stage__0_TO_Stage__13$FULL_N;

  // ports of submodule c_fifo_Stage__13_TO_Stage__34
  wire [299 : 0] c_fifo_Stage__13_TO_Stage__34$D_IN,
		 c_fifo_Stage__13_TO_Stage__34$D_OUT;
  wire c_fifo_Stage__13_TO_Stage__34$CLR,
       c_fifo_Stage__13_TO_Stage__34$DEQ,
       c_fifo_Stage__13_TO_Stage__34$EMPTY_N,
       c_fifo_Stage__13_TO_Stage__34$ENQ,
       c_fifo_Stage__13_TO_Stage__34$FULL_N;

  // ports of submodule c_fifo_Stage__34_TO_Stage__47
  wire [149 : 0] c_fifo_Stage__34_TO_Stage__47$D_IN,
		 c_fifo_Stage__34_TO_Stage__47$D_OUT;
  wire c_fifo_Stage__34_TO_Stage__47$CLR,
       c_fifo_Stage__34_TO_Stage__47$DEQ,
       c_fifo_Stage__34_TO_Stage__47$EMPTY_N,
       c_fifo_Stage__34_TO_Stage__47$ENQ,
       c_fifo_Stage__34_TO_Stage__47$FULL_N;

  // ports of submodule c_fifo_Stage__47_TO_Stage__53
  wire [140 : 0] c_fifo_Stage__47_TO_Stage__53$D_IN,
		 c_fifo_Stage__47_TO_Stage__53$D_OUT;
  wire c_fifo_Stage__47_TO_Stage__53$CLR,
       c_fifo_Stage__47_TO_Stage__53$DEQ,
       c_fifo_Stage__47_TO_Stage__53$EMPTY_N,
       c_fifo_Stage__47_TO_Stage__53$ENQ,
       c_fifo_Stage__47_TO_Stage__53$FULL_N;

  // ports of submodule c_fifo_Start_TO_Stage__0
  wire [21 : 0] c_fifo_Start_TO_Stage__0$D_IN, c_fifo_Start_TO_Stage__0$D_OUT;
  wire c_fifo_Start_TO_Stage__0$CLR,
       c_fifo_Start_TO_Stage__0$DEQ,
       c_fifo_Start_TO_Stage__0$EMPTY_N,
       c_fifo_Start_TO_Stage__0$ENQ,
       c_fifo_Start_TO_Stage__0$FULL_N;

  // ports of submodule c_fifo__input__TO_Start_f
  wire [18 : 0] c_fifo__input__TO_Start_f$D_IN,
		c_fifo__input__TO_Start_f$D_OUT;
  wire c_fifo__input__TO_Start_f$CLR,
       c_fifo__input__TO_Start_f$DEQ,
       c_fifo__input__TO_Start_f$EMPTY_N,
       c_fifo__input__TO_Start_f$ENQ,
       c_fifo__input__TO_Start_f$FULL_N;

  // ports of submodule c_outputQueue
  wire [3 : 0] c_outputQueue$D_IN, c_outputQueue$D_OUT;
  wire c_outputQueue$CLR,
       c_outputQueue$DEQ,
       c_outputQueue$EMPTY_N,
       c_outputQueue$ENQ,
       c_outputQueue$FULL_N;

  // ports of submodule d_l_lockVec_0_held
  wire [1 : 0] d_l_lockVec_0_held$D_IN;
  wire d_l_lockVec_0_held$CLR,
       d_l_lockVec_0_held$DEQ,
       d_l_lockVec_0_held$EMPTY_N,
       d_l_lockVec_0_held$ENQ;

  // ports of submodule d_l_lockVec_1_held
  wire [1 : 0] d_l_lockVec_1_held$D_IN;
  wire d_l_lockVec_1_held$CLR,
       d_l_lockVec_1_held$DEQ,
       d_l_lockVec_1_held$EMPTY_N,
       d_l_lockVec_1_held$ENQ;

  // ports of submodule d_l_lockVec_2_held
  wire [1 : 0] d_l_lockVec_2_held$D_IN;
  wire d_l_lockVec_2_held$CLR,
       d_l_lockVec_2_held$DEQ,
       d_l_lockVec_2_held$EMPTY_N,
       d_l_lockVec_2_held$ENQ;

  // ports of submodule d_l_lockVec_3_held
  wire [1 : 0] d_l_lockVec_3_held$D_IN;
  wire d_l_lockVec_3_held$CLR,
       d_l_lockVec_3_held$DEQ,
       d_l_lockVec_3_held$EMPTY_N,
       d_l_lockVec_3_held$ENQ;

  // ports of submodule div
  reg [31 : 0] div$req_denom, div$req_num;
  wire [31 : 0] div$peek, div$req_acc, div$req_quot;
  wire [4 : 0] div$req_cnt;
  wire div$EN_req,
       div$EN_resp,
       div$RDY_checkHandle,
       div$RDY_peek,
       div$RDY_req,
       div$RDY_resp,
       div$checkHandle,
       div$checkHandle_handle,
       div$req,
       div$req_retQuot;

  // ports of submodule i_l_held
  wire [1 : 0] i_l_held$D_IN;
  wire i_l_held$CLR, i_l_held$DEQ, i_l_held$EMPTY_N, i_l_held$ENQ;

  // ports of submodule r_l_lockVec_0_held
  wire [1 : 0] r_l_lockVec_0_held$D_IN, r_l_lockVec_0_held$D_OUT;
  wire r_l_lockVec_0_held$CLR,
       r_l_lockVec_0_held$DEQ,
       r_l_lockVec_0_held$EMPTY_N,
       r_l_lockVec_0_held$ENQ,
       r_l_lockVec_0_held$FULL_N;

  // ports of submodule r_l_lockVec_1_held
  wire [1 : 0] r_l_lockVec_1_held$D_IN, r_l_lockVec_1_held$D_OUT;
  wire r_l_lockVec_1_held$CLR,
       r_l_lockVec_1_held$DEQ,
       r_l_lockVec_1_held$EMPTY_N,
       r_l_lockVec_1_held$ENQ,
       r_l_lockVec_1_held$FULL_N;

  // ports of submodule r_l_lockVec_2_held
  wire [1 : 0] r_l_lockVec_2_held$D_IN, r_l_lockVec_2_held$D_OUT;
  wire r_l_lockVec_2_held$CLR,
       r_l_lockVec_2_held$DEQ,
       r_l_lockVec_2_held$EMPTY_N,
       r_l_lockVec_2_held$ENQ,
       r_l_lockVec_2_held$FULL_N;

  // ports of submodule r_l_lockVec_3_held
  wire [1 : 0] r_l_lockVec_3_held$D_IN, r_l_lockVec_3_held$D_OUT;
  wire r_l_lockVec_3_held$CLR,
       r_l_lockVec_3_held$DEQ,
       r_l_lockVec_3_held$EMPTY_N,
       r_l_lockVec_3_held$ENQ,
       r_l_lockVec_3_held$FULL_N;

  // ports of submodule rf_rf
  wire [31 : 0] rf_rf$D_IN, rf_rf$D_OUT_1, rf_rf$D_OUT_2;
  wire [4 : 0] rf_rf$ADDR_1,
	       rf_rf$ADDR_2,
	       rf_rf$ADDR_3,
	       rf_rf$ADDR_4,
	       rf_rf$ADDR_5,
	       rf_rf$ADDR_IN;
  wire rf_rf$WE;

  // rule scheduling signals
  wire CAN_FIRE_RL_c_s_Stage__47_execute,
       CAN_FIRE_RL_c_s_Stage__53_execute,
       CAN_FIRE_RL_r_l_freelock,
       CAN_FIRE_RL_r_l_freelock_1,
       CAN_FIRE_RL_r_l_freelock_2,
       CAN_FIRE_RL_r_l_freelock_3,
       WILL_FIRE_RL_c_s_Stage__0_execute,
       WILL_FIRE_RL_c_s_Stage__13_execute,
       WILL_FIRE_RL_c_s_Stage__47_execute,
       WILL_FIRE_RL_c_s_Stage__53_execute,
       WILL_FIRE_RL_c_s_Start_execute,
       WILL_FIRE_RL_d_amem_moveToOutFifo,
       WILL_FIRE_RL_i_amem_moveToOutFifo;

  // inputs to muxes for submodule ports
  wire [51 : 0] MUX_d_amem_toMem$wset_1__VAL_1,
		MUX_d_amem_toMem$wset_1__VAL_2,
		MUX_i_amem_toMem$wset_1__VAL_1,
		MUX_i_amem_toMem$wset_1__VAL_2;
  wire [18 : 0] MUX_c_fifo__input__TO_Start_enq_data$wset_1__VAL_1,
		MUX_c_fifo__input__TO_Start_enq_data$wset_1__VAL_2;
  wire [5 : 0] MUX_r_l_entryVec_0$write_1__VAL_1;
  wire [3 : 0] MUX_d_amem_nextData_1$wset_1__VAL_1;
  wire MUX_c_busyReg$write_1__SEL_1,
       MUX_c_fifo__input__TO_Start_enq_data$wset_1__SEL_1,
       MUX_d_amem_head$write_1__SEL_1,
       MUX_d_amem_nextData_1$wset_1__SEL_1,
       MUX_d_amem_toMem$wset_1__SEL_1,
       MUX_d_amem_valid_0$write_1__SEL_1,
       MUX_d_amem_valid_0$write_1__SEL_2,
       MUX_d_amem_valid_0$write_1__SEL_3,
       MUX_d_amem_valid_1$write_1__SEL_1,
       MUX_d_amem_valid_1$write_1__SEL_2,
       MUX_d_amem_valid_1$write_1__SEL_3,
       MUX_d_amem_valid_2$write_1__SEL_1,
       MUX_d_amem_valid_2$write_1__SEL_2,
       MUX_d_amem_valid_2$write_1__SEL_3,
       MUX_d_amem_valid_3$write_1__SEL_1,
       MUX_d_amem_valid_3$write_1__SEL_2,
       MUX_d_amem_valid_3$write_1__SEL_3,
       MUX_d_amem_valid_4$write_1__SEL_1,
       MUX_d_amem_valid_4$write_1__SEL_2,
       MUX_d_amem_valid_4$write_1__SEL_3,
       MUX_d_amem_valid_5$write_1__SEL_1,
       MUX_d_amem_valid_5$write_1__SEL_2,
       MUX_d_amem_valid_5$write_1__SEL_3,
       MUX_d_amem_valid_6$write_1__SEL_1,
       MUX_d_amem_valid_6$write_1__SEL_2,
       MUX_d_amem_valid_6$write_1__SEL_3,
       MUX_d_amem_valid_7$write_1__SEL_1,
       MUX_d_amem_valid_7$write_1__SEL_2,
       MUX_d_amem_valid_7$write_1__SEL_3,
       MUX_i_amem_valid_0$write_1__SEL_1,
       MUX_i_amem_valid_0$write_1__SEL_2,
       MUX_i_amem_valid_0$write_1__SEL_3,
       MUX_i_amem_valid_1$write_1__SEL_1,
       MUX_i_amem_valid_1$write_1__SEL_2,
       MUX_i_amem_valid_1$write_1__SEL_3,
       MUX_i_amem_valid_2$write_1__SEL_1,
       MUX_i_amem_valid_2$write_1__SEL_2,
       MUX_i_amem_valid_2$write_1__SEL_3,
       MUX_i_amem_valid_3$write_1__SEL_1,
       MUX_i_amem_valid_3$write_1__SEL_2,
       MUX_i_amem_valid_3$write_1__SEL_3,
       MUX_i_amem_valid_4$write_1__SEL_1,
       MUX_i_amem_valid_4$write_1__SEL_2,
       MUX_i_amem_valid_4$write_1__SEL_3,
       MUX_i_amem_valid_5$write_1__SEL_1,
       MUX_i_amem_valid_5$write_1__SEL_2,
       MUX_i_amem_valid_5$write_1__SEL_3,
       MUX_i_amem_valid_6$write_1__SEL_1,
       MUX_i_amem_valid_6$write_1__SEL_2,
       MUX_i_amem_valid_6$write_1__SEL_3,
       MUX_i_amem_valid_7$write_1__SEL_1,
       MUX_i_amem_valid_7$write_1__SEL_2,
       MUX_i_amem_valid_7$write_1__SEL_3,
       MUX_r_l_entryVec_0$write_1__SEL_1,
       MUX_r_l_entryVec_1$write_1__SEL_1,
       MUX_r_l_entryVec_2$write_1__SEL_1,
       MUX_r_l_entryVec_3$write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_c_fifo_Stage__13_TO_Stage__34D_OUT_BITS__ETC__q15,
	       CASE_c_fifo_Stage__47_TO_Stage__53D_OUT_BITS__ETC__q6,
	       SEL_ARR_d_amem_outData_0_read__92_d_amem_outDa_ETC___d801,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230;
  reg [15 : 0] IF_c_fifo_Stage__0_TO_Stage__13_first__10_BITS_ETC___d171;
  reg [3 : 0] x__h21333;
  reg [1 : 0] SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d490,
	      SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d491;
  reg CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d295,
      CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d684,
      CASE_IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_ETC___d306,
      SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d897,
      SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d931,
      SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d339,
      SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d378,
      SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d724,
      SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d730,
      SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848,
      SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d397,
      SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968,
      SEL_ARR_r_l_lockVec_0_held_first__95_EQ_IF_c_f_ETC___d707;
  wire [265 : 0] NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d508;
  wire [184 : 0] c_fifo_Start_TO_Stage__0_first__28_BITS_18_TO__ETC___d506;
  wire [128 : 0] IF_NOT_SEL_ARR_i_amem_outData_0_read__19_i_ame_ETC___d502;
  wire [63 : 0] IF_IF_c_fifo_Stage__13_TO_Stage__34_first__12__ETC___d621,
		IF_c_fifo_Stage__13_TO_Stage__34_first__12_BIT_ETC___d619;
  wire [60 : 0] SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d499;
  wire [31 : 0] IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d640,
		IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d641,
		IF_c_fifo_Stage__0_TO_Stage__13_first__10_BIT__ETC___d181,
		IF_c_fifo_Stage__0_TO_Stage__13_first__10_BIT__ETC___d185,
		IF_c_fifo_Stage__13_TO_Stage__34_first__12_BIT_ETC___d630,
		IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d803,
		IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d806,
		IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d823,
		SEXT_c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_18_ETC__q12,
		b__h15777,
		c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_216_TO_ETC__q10,
		c_fifo_Stage__13_TO_Stage__34D_OUT_BITS_299_T_ETC__q14,
		c_fifo_Stage__13_TO_Stage__34_first__12_BITS_1_ETC___d546,
		c_fifo_Stage__13_TO_Stage__34_first__12_BITS_1_ETC___d549,
		c_fifo_Stage__13_TO_Stage__34_first__12_BITS_2_ETC___d596,
		x__h17296,
		x__h17306;
  wire [29 : 0] c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_216_TO__ETC__q11;
  wire [20 : 0] SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q18;
  wire [15 : 0] IF_NOT_c_fifo_Stage__0_TO_Stage__13_first__10__ETC___d175,
		IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d564,
		IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC__q5,
		c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_184_TO_ETC__q9,
		c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_232_TO_ETC__q1,
		c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_282_TO_ETC__q7,
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132,
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d152,
		c_fifo_Stage__47_TO_Stage__53D_OUT_BITS_102_T_ETC__q3;
  wire [13 : 0] c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_232_TO__ETC__q2,
		c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_282_TO__ETC__q8;
  wire [12 : 0] SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q17;
  wire [11 : 0] SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q13,
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q16;
  wire [7 : 0] IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC__q4;
  wire [4 : 0] x__h19234, x__h21535;
  wire [2 : 0] d_amem_head_47_PLUS_1___d938;
  wire [1 : 0] IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d553,
	       IF_NOT_d_l_entryVec_0_read__0_BIT_16_1_86_OR_N_ETC___d894,
	       IF_NOT_d_l_entryVec_0_read__0_BIT_16_1_86_OR_N_ETC___d928,
	       IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d288,
	       IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d336,
	       IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d375,
	       IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d677,
	       IF_r_l_entryVec_1_read__2_BIT_5_3_AND_r_l_entr_ETC___d304,
	       IF_r_l_entryVec_3_read__8_BIT_5_9_AND_IF_r_l_e_ETC___d493,
	       x__h13394,
	       x__h13954,
	       x__h14721,
	       x__h14776,
	       x__h17921,
	       x__h20454,
	       x__h21022,
	       x__h21440;
  wire IF_d_l_entryVec_0_read__0_BIT_16_1_THEN_d_l_en_ETC___d874,
       IF_d_l_entryVec_1_read__9_BIT_16_0_THEN_d_l_en_ETC___d870,
       IF_d_l_entryVec_2_read__7_BIT_16_8_THEN_d_l_en_ETC___d866,
       IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d269,
       IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d319,
       IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d359,
       IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d665,
       IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d265,
       IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d317,
       IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d357,
       IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d662,
       IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d447,
       IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d450,
       IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d452,
       IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d454,
       IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d261,
       IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d315,
       IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d355,
       IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d659,
       IF_r_l_entryVec_3_read__8_BIT_5_9_AND_IF_r_l_e_ETC___d308,
       IF_r_l_entryVec_3_read__8_BIT_5_9_AND_IF_r_l_e_ETC___d708,
       IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d257,
       IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d656,
       NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d380,
       NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417,
       NOT_c_fifo_Stage__34_TO_Stage__47_first__44_BI_ETC___d903,
       NOT_d_l_entryVec_1_read__9_BIT_16_0_83_OR_NOT__ETC___d892,
       NOT_d_l_entryVec_1_read__9_BIT_16_0_83_OR_NOT__ETC___d926,
       NOT_d_l_entryVec_2_read__7_BIT_16_8_80_OR_NOT__ETC___d890,
       NOT_d_l_entryVec_2_read__7_BIT_16_8_80_OR_NOT__ETC___d924,
       NOT_d_l_entryVec_3_read__5_BIT_16_6_98_OR_NOT__ETC___d901,
       NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d286,
       NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d334,
       NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d373,
       NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d674,
       NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d284,
       NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d332,
       NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d371,
       NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d669,
       NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_I_ETC___d445,
       NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_I_ETC___d685,
       NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_r_ETC___d342,
       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d344,
       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d386,
       _dfoo25,
       _dfoo27,
       _dfoo29,
       _dfoo31,
       _dfoo33,
       _dfoo35,
       _dfoo37,
       _dfoo39,
       _dfoo41,
       c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d149,
       c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d157,
       c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d162,
       c_fifo_Stage__0_TO_Stage__13_i_notFull__18_AND_ETC___d310,
       c_fifo_Stage__34_TO_Stage__47_first__44_BIT_3__ETC___d933,
       c_fifo_Stage__34_TO_Stage__47_i_notFull__11_AN_ETC___d529,
       c_fifo_Stage__47_TO_Stage__53_first__48_BIT_14_ETC___d830,
       d_l_entryVec_2_read__7_BIT_16_8_AND_IF_d_l_ent_ETC___d877,
       d_l_entryVec_2_read__7_BIT_16_8_AND_IF_d_l_ent_ETC___d915,
       r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d272,
       r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d322,
       r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d362,
       r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d693,
       r_l_lockVec_0_held_first__95_EQ_IF_c_fifo_Stag_ETC___d699,
       r_l_lockVec_1_held_first__00_EQ_IF_c_fifo_Stag_ETC___d701,
       r_l_lockVec_2_held_first__02_EQ_IF_c_fifo_Stag_ETC___d703,
       r_l_lockVec_3_held_first__04_EQ_IF_c_fifo_Stag_ETC___d705;

  // actionvalue method _intc_req
  assign _intc_req = c ;
  assign RDY__intc_req = !c_busyReg && c_fifo__input__TO_Start_f$FULL_N ;

  // action method _intc_resp
  assign RDY__intc_resp = c_outputQueue$EMPTY_N ;

  // value method _intc_checkHandle
  assign _intc_checkHandle =
	     _intc_checkHandle_handle == c_outputQueue$D_OUT[3:1] ;
  assign RDY__intc_checkHandle = c_outputQueue$EMPTY_N ;

  // value method _intc_peek
  assign _intc_peek = c_outputQueue$D_OUT[0] ;
  assign RDY__intc_peek = c_outputQueue$EMPTY_N ;

  // actionvalue method imem_req
  assign imem_req = i_amem_head ;
  assign RDY_imem_req =
	     !SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968 ;

  // value method imem_peekResp
  always@(imem_peekResp_a or
	  i_amem_outData_0 or
	  i_amem_outData_1 or
	  i_amem_outData_2 or
	  i_amem_outData_3 or
	  i_amem_outData_4 or
	  i_amem_outData_5 or i_amem_outData_6 or i_amem_outData_7)
  begin
    case (imem_peekResp_a)
      3'd0: imem_peekResp = i_amem_outData_0;
      3'd1: imem_peekResp = i_amem_outData_1;
      3'd2: imem_peekResp = i_amem_outData_2;
      3'd3: imem_peekResp = i_amem_outData_3;
      3'd4: imem_peekResp = i_amem_outData_4;
      3'd5: imem_peekResp = i_amem_outData_5;
      3'd6: imem_peekResp = i_amem_outData_6;
      3'd7: imem_peekResp = i_amem_outData_7;
    endcase
  end
  assign RDY_imem_peekResp = 1'd1 ;

  // value method imem_checkRespId
  always@(imem_checkRespId_a or
	  i_amem_valid_0 or
	  i_amem_valid_1 or
	  i_amem_valid_2 or
	  i_amem_valid_3 or
	  i_amem_valid_4 or
	  i_amem_valid_5 or i_amem_valid_6 or i_amem_valid_7)
  begin
    case (imem_checkRespId_a)
      3'd0: imem_checkRespId = i_amem_valid_0;
      3'd1: imem_checkRespId = i_amem_valid_1;
      3'd2: imem_checkRespId = i_amem_valid_2;
      3'd3: imem_checkRespId = i_amem_valid_3;
      3'd4: imem_checkRespId = i_amem_valid_4;
      3'd5: imem_checkRespId = i_amem_valid_5;
      3'd6: imem_checkRespId = i_amem_valid_6;
      3'd7: imem_checkRespId = i_amem_valid_7;
    endcase
  end
  assign RDY_imem_checkRespId = 1'd1 ;

  // action method imem_resp
  assign RDY_imem_resp = 1'd1 ;

  // actionvalue method imem_bram_client_request_get
  assign imem_bram_client_request_get =
	     WILL_FIRE_RL_c_s_Start_execute ?
	       MUX_i_amem_toMem$wset_1__VAL_1 :
	       MUX_i_amem_toMem$wset_1__VAL_2 ;
  assign RDY_imem_bram_client_request_get =
	     WILL_FIRE_RL_c_s_Start_execute || EN_imem_req ;

  // action method imem_bram_client_response_put
  assign RDY_imem_bram_client_response_put = 1'd1 ;

  // actionvalue method dmem_req
  assign dmem_req = d_amem_head ;
  assign RDY_dmem_req =
	     !SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848 ;

  // value method dmem_peekResp
  always@(dmem_peekResp_a or
	  d_amem_outData_0 or
	  d_amem_outData_1 or
	  d_amem_outData_2 or
	  d_amem_outData_3 or
	  d_amem_outData_4 or
	  d_amem_outData_5 or d_amem_outData_6 or d_amem_outData_7)
  begin
    case (dmem_peekResp_a)
      3'd0: dmem_peekResp = d_amem_outData_0;
      3'd1: dmem_peekResp = d_amem_outData_1;
      3'd2: dmem_peekResp = d_amem_outData_2;
      3'd3: dmem_peekResp = d_amem_outData_3;
      3'd4: dmem_peekResp = d_amem_outData_4;
      3'd5: dmem_peekResp = d_amem_outData_5;
      3'd6: dmem_peekResp = d_amem_outData_6;
      3'd7: dmem_peekResp = d_amem_outData_7;
    endcase
  end
  assign RDY_dmem_peekResp = 1'd1 ;

  // value method dmem_checkRespId
  always@(dmem_checkRespId_a or
	  d_amem_valid_0 or
	  d_amem_valid_1 or
	  d_amem_valid_2 or
	  d_amem_valid_3 or
	  d_amem_valid_4 or
	  d_amem_valid_5 or d_amem_valid_6 or d_amem_valid_7)
  begin
    case (dmem_checkRespId_a)
      3'd0: dmem_checkRespId = d_amem_valid_0;
      3'd1: dmem_checkRespId = d_amem_valid_1;
      3'd2: dmem_checkRespId = d_amem_valid_2;
      3'd3: dmem_checkRespId = d_amem_valid_3;
      3'd4: dmem_checkRespId = d_amem_valid_4;
      3'd5: dmem_checkRespId = d_amem_valid_5;
      3'd6: dmem_checkRespId = d_amem_valid_6;
      3'd7: dmem_checkRespId = d_amem_valid_7;
    endcase
  end
  assign RDY_dmem_checkRespId = 1'd1 ;

  // action method dmem_resp
  assign RDY_dmem_resp = 1'd1 ;

  // actionvalue method dmem_bram_client_request_get
  assign dmem_bram_client_request_get =
	     MUX_d_amem_toMem$wset_1__SEL_1 ?
	       MUX_d_amem_toMem$wset_1__VAL_1 :
	       MUX_d_amem_toMem$wset_1__VAL_2 ;
  assign RDY_dmem_bram_client_request_get =
	     MUX_d_amem_toMem$wset_1__SEL_1 || EN_dmem_req ;

  // action method dmem_bram_client_response_put
  assign RDY_dmem_bram_client_response_put = 1'd1 ;

  // submodule c_fifo_Stage__0_TO_Stage__13
  FIFO2 #(.width(32'd299),
	  .guarded(1'd1)) c_fifo_Stage__0_TO_Stage__13(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(c_fifo_Stage__0_TO_Stage__13$D_IN),
						       .ENQ(c_fifo_Stage__0_TO_Stage__13$ENQ),
						       .DEQ(c_fifo_Stage__0_TO_Stage__13$DEQ),
						       .CLR(c_fifo_Stage__0_TO_Stage__13$CLR),
						       .D_OUT(c_fifo_Stage__0_TO_Stage__13$D_OUT),
						       .FULL_N(c_fifo_Stage__0_TO_Stage__13$FULL_N),
						       .EMPTY_N(c_fifo_Stage__0_TO_Stage__13$EMPTY_N));

  // submodule c_fifo_Stage__13_TO_Stage__34
  FIFO2 #(.width(32'd300),
	  .guarded(1'd1)) c_fifo_Stage__13_TO_Stage__34(.RST(RST_N),
							.CLK(CLK),
							.D_IN(c_fifo_Stage__13_TO_Stage__34$D_IN),
							.ENQ(c_fifo_Stage__13_TO_Stage__34$ENQ),
							.DEQ(c_fifo_Stage__13_TO_Stage__34$DEQ),
							.CLR(c_fifo_Stage__13_TO_Stage__34$CLR),
							.D_OUT(c_fifo_Stage__13_TO_Stage__34$D_OUT),
							.FULL_N(c_fifo_Stage__13_TO_Stage__34$FULL_N),
							.EMPTY_N(c_fifo_Stage__13_TO_Stage__34$EMPTY_N));

  // submodule c_fifo_Stage__34_TO_Stage__47
  FIFO2 #(.width(32'd150),
	  .guarded(1'd1)) c_fifo_Stage__34_TO_Stage__47(.RST(RST_N),
							.CLK(CLK),
							.D_IN(c_fifo_Stage__34_TO_Stage__47$D_IN),
							.ENQ(c_fifo_Stage__34_TO_Stage__47$ENQ),
							.DEQ(c_fifo_Stage__34_TO_Stage__47$DEQ),
							.CLR(c_fifo_Stage__34_TO_Stage__47$CLR),
							.D_OUT(c_fifo_Stage__34_TO_Stage__47$D_OUT),
							.FULL_N(c_fifo_Stage__34_TO_Stage__47$FULL_N),
							.EMPTY_N(c_fifo_Stage__34_TO_Stage__47$EMPTY_N));

  // submodule c_fifo_Stage__47_TO_Stage__53
  FIFO2 #(.width(32'd141),
	  .guarded(1'd1)) c_fifo_Stage__47_TO_Stage__53(.RST(RST_N),
							.CLK(CLK),
							.D_IN(c_fifo_Stage__47_TO_Stage__53$D_IN),
							.ENQ(c_fifo_Stage__47_TO_Stage__53$ENQ),
							.DEQ(c_fifo_Stage__47_TO_Stage__53$DEQ),
							.CLR(c_fifo_Stage__47_TO_Stage__53$CLR),
							.D_OUT(c_fifo_Stage__47_TO_Stage__53$D_OUT),
							.FULL_N(c_fifo_Stage__47_TO_Stage__53$FULL_N),
							.EMPTY_N(c_fifo_Stage__47_TO_Stage__53$EMPTY_N));

  // submodule c_fifo_Start_TO_Stage__0
  FIFO2 #(.width(32'd22),
	  .guarded(1'd1)) c_fifo_Start_TO_Stage__0(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(c_fifo_Start_TO_Stage__0$D_IN),
						   .ENQ(c_fifo_Start_TO_Stage__0$ENQ),
						   .DEQ(c_fifo_Start_TO_Stage__0$DEQ),
						   .CLR(c_fifo_Start_TO_Stage__0$CLR),
						   .D_OUT(c_fifo_Start_TO_Stage__0$D_OUT),
						   .FULL_N(c_fifo_Start_TO_Stage__0$FULL_N),
						   .EMPTY_N(c_fifo_Start_TO_Stage__0$EMPTY_N));

  // submodule c_fifo__input__TO_Start_f
  FIFO2 #(.width(32'd19),
	  .guarded(1'd1)) c_fifo__input__TO_Start_f(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(c_fifo__input__TO_Start_f$D_IN),
						    .ENQ(c_fifo__input__TO_Start_f$ENQ),
						    .DEQ(c_fifo__input__TO_Start_f$DEQ),
						    .CLR(c_fifo__input__TO_Start_f$CLR),
						    .D_OUT(c_fifo__input__TO_Start_f$D_OUT),
						    .FULL_N(c_fifo__input__TO_Start_f$FULL_N),
						    .EMPTY_N(c_fifo__input__TO_Start_f$EMPTY_N));

  // submodule c_outputQueue
  FIFO2 #(.width(32'd4), .guarded(1'd1)) c_outputQueue(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(c_outputQueue$D_IN),
						       .ENQ(c_outputQueue$ENQ),
						       .DEQ(c_outputQueue$DEQ),
						       .CLR(c_outputQueue$CLR),
						       .D_OUT(c_outputQueue$D_OUT),
						       .FULL_N(c_outputQueue$FULL_N),
						       .EMPTY_N(c_outputQueue$EMPTY_N));

  // submodule d_l_lockVec_0_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) d_l_lockVec_0_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(d_l_lockVec_0_held$D_IN),
						 .ENQ(d_l_lockVec_0_held$ENQ),
						 .DEQ(d_l_lockVec_0_held$DEQ),
						 .CLR(d_l_lockVec_0_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(d_l_lockVec_0_held$EMPTY_N));

  // submodule d_l_lockVec_1_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) d_l_lockVec_1_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(d_l_lockVec_1_held$D_IN),
						 .ENQ(d_l_lockVec_1_held$ENQ),
						 .DEQ(d_l_lockVec_1_held$DEQ),
						 .CLR(d_l_lockVec_1_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(d_l_lockVec_1_held$EMPTY_N));

  // submodule d_l_lockVec_2_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) d_l_lockVec_2_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(d_l_lockVec_2_held$D_IN),
						 .ENQ(d_l_lockVec_2_held$ENQ),
						 .DEQ(d_l_lockVec_2_held$DEQ),
						 .CLR(d_l_lockVec_2_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(d_l_lockVec_2_held$EMPTY_N));

  // submodule d_l_lockVec_3_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) d_l_lockVec_3_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(d_l_lockVec_3_held$D_IN),
						 .ENQ(d_l_lockVec_3_held$ENQ),
						 .DEQ(d_l_lockVec_3_held$DEQ),
						 .CLR(d_l_lockVec_3_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(d_l_lockVec_3_held$EMPTY_N));

  // submodule div
  mkMulti_stg_div div(.CLK(CLK),
		      .RST_N(RST_N),
		      .checkHandle_handle(div$checkHandle_handle),
		      .req_acc(div$req_acc),
		      .req_cnt(div$req_cnt),
		      .req_denom(div$req_denom),
		      .req_num(div$req_num),
		      .req_quot(div$req_quot),
		      .req_retQuot(div$req_retQuot),
		      .EN_req(div$EN_req),
		      .EN_resp(div$EN_resp),
		      .req(div$req),
		      .RDY_req(div$RDY_req),
		      .RDY_resp(div$RDY_resp),
		      .checkHandle(div$checkHandle),
		      .RDY_checkHandle(div$RDY_checkHandle),
		      .peek(div$peek),
		      .RDY_peek(div$RDY_peek));

  // submodule i_l_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) i_l_held(.RST(RST_N),
				       .CLK(CLK),
				       .D_IN(i_l_held$D_IN),
				       .ENQ(i_l_held$ENQ),
				       .DEQ(i_l_held$DEQ),
				       .CLR(i_l_held$CLR),
				       .D_OUT(),
				       .FULL_N(),
				       .EMPTY_N(i_l_held$EMPTY_N));

  // submodule r_l_lockVec_0_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) r_l_lockVec_0_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(r_l_lockVec_0_held$D_IN),
						 .ENQ(r_l_lockVec_0_held$ENQ),
						 .DEQ(r_l_lockVec_0_held$DEQ),
						 .CLR(r_l_lockVec_0_held$CLR),
						 .D_OUT(r_l_lockVec_0_held$D_OUT),
						 .FULL_N(r_l_lockVec_0_held$FULL_N),
						 .EMPTY_N(r_l_lockVec_0_held$EMPTY_N));

  // submodule r_l_lockVec_1_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) r_l_lockVec_1_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(r_l_lockVec_1_held$D_IN),
						 .ENQ(r_l_lockVec_1_held$ENQ),
						 .DEQ(r_l_lockVec_1_held$DEQ),
						 .CLR(r_l_lockVec_1_held$CLR),
						 .D_OUT(r_l_lockVec_1_held$D_OUT),
						 .FULL_N(r_l_lockVec_1_held$FULL_N),
						 .EMPTY_N(r_l_lockVec_1_held$EMPTY_N));

  // submodule r_l_lockVec_2_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) r_l_lockVec_2_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(r_l_lockVec_2_held$D_IN),
						 .ENQ(r_l_lockVec_2_held$ENQ),
						 .DEQ(r_l_lockVec_2_held$DEQ),
						 .CLR(r_l_lockVec_2_held$CLR),
						 .D_OUT(r_l_lockVec_2_held$D_OUT),
						 .FULL_N(r_l_lockVec_2_held$FULL_N),
						 .EMPTY_N(r_l_lockVec_2_held$EMPTY_N));

  // submodule r_l_lockVec_3_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) r_l_lockVec_3_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(r_l_lockVec_3_held$D_IN),
						 .ENQ(r_l_lockVec_3_held$ENQ),
						 .DEQ(r_l_lockVec_3_held$DEQ),
						 .CLR(r_l_lockVec_3_held$CLR),
						 .D_OUT(r_l_lockVec_3_held$D_OUT),
						 .FULL_N(r_l_lockVec_3_held$FULL_N),
						 .EMPTY_N(r_l_lockVec_3_held$EMPTY_N));

  // submodule rf_rf
  RegFileLoad #(.file("rf"),
		.addr_width(32'd5),
		.data_width(32'd32),
		.lo(5'h0),
		.hi(5'd31),
		.binary(1'd0)) rf_rf(.CLK(CLK),
				     .ADDR_1(rf_rf$ADDR_1),
				     .ADDR_2(rf_rf$ADDR_2),
				     .ADDR_3(rf_rf$ADDR_3),
				     .ADDR_4(rf_rf$ADDR_4),
				     .ADDR_5(rf_rf$ADDR_5),
				     .ADDR_IN(rf_rf$ADDR_IN),
				     .D_IN(rf_rf$D_IN),
				     .WE(rf_rf$WE),
				     .D_OUT_1(rf_rf$D_OUT_1),
				     .D_OUT_2(rf_rf$D_OUT_2),
				     .D_OUT_3(),
				     .D_OUT_4(),
				     .D_OUT_5());

  // rule RL_i_amem_moveToOutFifo
  assign WILL_FIRE_RL_i_amem_moveToOutFifo =
	     EN_imem_bram_client_response_put && i_amem_nextData[3] ;

  // rule RL_d_amem_moveToOutFifo
  assign WILL_FIRE_RL_d_amem_moveToOutFifo =
	     EN_dmem_bram_client_response_put && d_amem_nextData[3] ;

  // rule RL_c_s_Stage__13_execute
  assign WILL_FIRE_RL_c_s_Stage__13_execute =
	     c_fifo_Stage__0_TO_Stage__13$EMPTY_N &&
	     c_fifo_Stage__13_TO_Stage__34$FULL_N &&
	     (c_fifo_Stage__0_TO_Stage__13$D_OUT[130] ||
	      c_fifo__input__TO_Start_f$FULL_N) &&
	     (!c_fifo_Stage__0_TO_Stage__13$D_OUT[61] || div$RDY_req) ;

  // rule RL_c_s_Stage__0_execute
  assign WILL_FIRE_RL_c_s_Stage__0_execute =
	     c_fifo_Start_TO_Stage__0$EMPTY_N &&
	     c_fifo_Stage__0_TO_Stage__13_i_notFull__18_AND_ETC___d310 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d344 &&
	     NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d380 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d386 &&
	     SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d397 ;

  // rule RL_r_l_freelock
  assign CAN_FIRE_RL_r_l_freelock =
	     !r_l_lockVec_0_held$EMPTY_N && r_l_entryVec_0[5] &&
	     !r_l_resVec_0$whas ;

  // rule RL_r_l_freelock_1
  assign CAN_FIRE_RL_r_l_freelock_1 =
	     !r_l_lockVec_1_held$EMPTY_N && r_l_entryVec_1[5] &&
	     !r_l_resVec_1$whas ;

  // rule RL_r_l_freelock_2
  assign CAN_FIRE_RL_r_l_freelock_2 =
	     !r_l_lockVec_2_held$EMPTY_N && r_l_entryVec_2[5] &&
	     !r_l_resVec_2$whas ;

  // rule RL_r_l_freelock_3
  assign CAN_FIRE_RL_r_l_freelock_3 =
	     !r_l_lockVec_3_held$EMPTY_N && r_l_entryVec_3[5] &&
	     !r_l_resVec_3$whas ;

  // rule RL_c_s_Stage__53_execute
  assign CAN_FIRE_RL_c_s_Stage__53_execute =
	     c_fifo_Stage__47_TO_Stage__53$EMPTY_N &&
	     (!c_fifo_Stage__47_TO_Stage__53$D_OUT[80] ||
	      c_outputQueue$FULL_N) &&
	     (!c_fifo_Stage__47_TO_Stage__53$D_OUT[140] ||
	      NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_I_ETC___d685) &&
	     (!c_fifo_Stage__47_TO_Stage__53$D_OUT[80] || c_busyReg) &&
	     (!c_fifo_Stage__47_TO_Stage__53$D_OUT[140] ||
	      IF_r_l_entryVec_3_read__8_BIT_5_9_AND_IF_r_l_e_ETC___d708) &&
	     (c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] != 2'd1 ||
	      SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d724) &&
	     (c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] != 2'd0 ||
	      SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d730) ;
  assign WILL_FIRE_RL_c_s_Stage__53_execute =
	     CAN_FIRE_RL_c_s_Stage__53_execute && !EN__intc_req ;

  // rule RL_c_s_Stage__47_execute
  assign CAN_FIRE_RL_c_s_Stage__47_execute =
	     c_fifo_Stage__34_TO_Stage__47$EMPTY_N &&
	     c_fifo_Stage__47_TO_Stage__53$FULL_N &&
	     (!c_fifo_Stage__34_TO_Stage__47$D_OUT[3] ||
	      !SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848) &&
	     (c_fifo_Stage__34_TO_Stage__47$D_OUT[3] ||
	      !c_fifo_Stage__34_TO_Stage__47$D_OUT[95] ||
	      !SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848) &&
	     NOT_c_fifo_Stage__34_TO_Stage__47_first__44_BI_ETC___d903 &&
	     c_fifo_Stage__34_TO_Stage__47_first__44_BIT_3__ETC___d933 ;
  assign WILL_FIRE_RL_c_s_Stage__47_execute =
	     CAN_FIRE_RL_c_s_Stage__47_execute && !EN_dmem_req ;

  // rule RL_c_s_Start_execute
  assign WILL_FIRE_RL_c_s_Start_execute =
	     !SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968 &&
	     c_fifo__input__TO_Start_f$EMPTY_N &&
	     c_fifo_Start_TO_Stage__0$FULL_N &&
	     !i_l_held$EMPTY_N &&
	     !EN_imem_req ;

  // inputs to muxes for submodule ports
  assign MUX_c_busyReg$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__53_execute &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[80] ;
  assign MUX_c_fifo__input__TO_Start_enq_data$wset_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__13_execute &&
	     !c_fifo_Stage__0_TO_Stage__13$D_OUT[130] ;
  assign MUX_d_amem_head$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__47_execute && _dfoo41 ;
  assign MUX_d_amem_nextData_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__47_execute && _dfoo41 ;
  assign MUX_d_amem_toMem$wset_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__47_execute && _dfoo41 ;
  assign MUX_d_amem_valid_0$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo39 ;
  assign MUX_d_amem_valid_0$write_1__SEL_2 =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd0 ;
  assign MUX_d_amem_valid_0$write_1__SEL_3 =
	     EN_dmem_resp && dmem_resp_a == 3'd0 ;
  assign MUX_d_amem_valid_1$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo37 ;
  assign MUX_d_amem_valid_1$write_1__SEL_2 =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd1 ;
  assign MUX_d_amem_valid_1$write_1__SEL_3 =
	     EN_dmem_resp && dmem_resp_a == 3'd1 ;
  assign MUX_d_amem_valid_2$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo35 ;
  assign MUX_d_amem_valid_2$write_1__SEL_2 =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd2 ;
  assign MUX_d_amem_valid_2$write_1__SEL_3 =
	     EN_dmem_resp && dmem_resp_a == 3'd2 ;
  assign MUX_d_amem_valid_3$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo33 ;
  assign MUX_d_amem_valid_3$write_1__SEL_2 =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd3 ;
  assign MUX_d_amem_valid_3$write_1__SEL_3 =
	     EN_dmem_resp && dmem_resp_a == 3'd3 ;
  assign MUX_d_amem_valid_4$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo31 ;
  assign MUX_d_amem_valid_4$write_1__SEL_2 =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd4 ;
  assign MUX_d_amem_valid_4$write_1__SEL_3 =
	     EN_dmem_resp && dmem_resp_a == 3'd4 ;
  assign MUX_d_amem_valid_5$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo29 ;
  assign MUX_d_amem_valid_5$write_1__SEL_2 =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd5 ;
  assign MUX_d_amem_valid_5$write_1__SEL_3 =
	     EN_dmem_resp && dmem_resp_a == 3'd5 ;
  assign MUX_d_amem_valid_6$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo27 ;
  assign MUX_d_amem_valid_6$write_1__SEL_2 =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd6 ;
  assign MUX_d_amem_valid_6$write_1__SEL_3 =
	     EN_dmem_resp && dmem_resp_a == 3'd6 ;
  assign MUX_d_amem_valid_7$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo25 ;
  assign MUX_d_amem_valid_7$write_1__SEL_2 =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd7 ;
  assign MUX_d_amem_valid_7$write_1__SEL_3 =
	     EN_dmem_resp && dmem_resp_a == 3'd7 ;
  assign MUX_i_amem_valid_0$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd0 ;
  assign MUX_i_amem_valid_0$write_1__SEL_2 =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd0 ;
  assign MUX_i_amem_valid_0$write_1__SEL_3 =
	     EN_imem_resp && imem_resp_a == 3'd0 ;
  assign MUX_i_amem_valid_1$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd1 ;
  assign MUX_i_amem_valid_1$write_1__SEL_2 =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd1 ;
  assign MUX_i_amem_valid_1$write_1__SEL_3 =
	     EN_imem_resp && imem_resp_a == 3'd1 ;
  assign MUX_i_amem_valid_2$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd2 ;
  assign MUX_i_amem_valid_2$write_1__SEL_2 =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd2 ;
  assign MUX_i_amem_valid_2$write_1__SEL_3 =
	     EN_imem_resp && imem_resp_a == 3'd2 ;
  assign MUX_i_amem_valid_3$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd3 ;
  assign MUX_i_amem_valid_3$write_1__SEL_2 =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd3 ;
  assign MUX_i_amem_valid_3$write_1__SEL_3 =
	     EN_imem_resp && imem_resp_a == 3'd3 ;
  assign MUX_i_amem_valid_4$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd4 ;
  assign MUX_i_amem_valid_4$write_1__SEL_2 =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd4 ;
  assign MUX_i_amem_valid_4$write_1__SEL_3 =
	     EN_imem_resp && imem_resp_a == 3'd4 ;
  assign MUX_i_amem_valid_5$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd5 ;
  assign MUX_i_amem_valid_5$write_1__SEL_2 =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd5 ;
  assign MUX_i_amem_valid_5$write_1__SEL_3 =
	     EN_imem_resp && imem_resp_a == 3'd5 ;
  assign MUX_i_amem_valid_6$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd6 ;
  assign MUX_i_amem_valid_6$write_1__SEL_2 =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd6 ;
  assign MUX_i_amem_valid_6$write_1__SEL_3 =
	     EN_imem_resp && imem_resp_a == 3'd6 ;
  assign MUX_i_amem_valid_7$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd7 ;
  assign MUX_i_amem_valid_7$write_1__SEL_2 =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd7 ;
  assign MUX_i_amem_valid_7$write_1__SEL_3 =
	     EN_imem_resp && imem_resp_a == 3'd7 ;
  assign MUX_r_l_entryVec_0$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d447 ;
  assign MUX_r_l_entryVec_1$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d450 ;
  assign MUX_r_l_entryVec_2$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d452 ;
  assign MUX_r_l_entryVec_3$write_1__SEL_1 =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d454 ;
  assign MUX_c_fifo__input__TO_Start_enq_data$wset_1__VAL_1 =
	     { IF_NOT_c_fifo_Stage__0_TO_Stage__13_first__10__ETC___d175,
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[2:0] } ;
  assign MUX_c_fifo__input__TO_Start_enq_data$wset_1__VAL_2 =
	     { _intc_req_pc, c } ;
  assign MUX_d_amem_nextData_1$wset_1__VAL_1 = { 1'd1, d_amem_head } ;
  assign MUX_d_amem_toMem$wset_1__VAL_1 =
	     c_fifo_Stage__34_TO_Stage__47$D_OUT[3] ?
	       { 4'd0, c_fifo_Stage__34_TO_Stage__47$D_OUT[86:39] } :
	       { x__h21333,
		 c_fifo_Stage__34_TO_Stage__47$D_OUT[86:71],
		 c_fifo_Stage__34_TO_Stage__47$D_OUT[149:118] << x__h21535 } ;
  assign MUX_d_amem_toMem$wset_1__VAL_2 =
	     { dmem_req_wmask, dmem_req_a, dmem_req_b } ;
  assign MUX_i_amem_toMem$wset_1__VAL_1 =
	     { 4'd0, c_fifo__input__TO_Start_f$D_OUT, 29'h0AAAAAAA } ;
  assign MUX_i_amem_toMem$wset_1__VAL_2 =
	     { imem_req_wmask, imem_req_a, imem_req_b } ;
  assign MUX_r_l_entryVec_0$write_1__VAL_1 =
	     { 1'd1,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] } ;

  // inlined wires
  assign i_amem_nextData_1$wget = { 1'd1, i_amem_head } ;
  assign d_amem_nextData_1$wget =
	     MUX_d_amem_nextData_1$wset_1__SEL_1 ?
	       MUX_d_amem_nextData_1$wset_1__VAL_1 :
	       MUX_d_amem_nextData_1$wset_1__VAL_1 ;
  assign d_amem_nextData_1$whas =
	     WILL_FIRE_RL_c_s_Stage__47_execute && _dfoo41 || EN_dmem_req ;
  assign r_l_resVec_0$whas =
	     WILL_FIRE_RL_c_s_Stage__0_execute && x__h14721 == 2'd0 &&
	     NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ;
  assign r_l_resVec_1$whas =
	     WILL_FIRE_RL_c_s_Stage__0_execute && x__h14721 == 2'd1 &&
	     NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ;
  assign r_l_resVec_2$whas =
	     WILL_FIRE_RL_c_s_Stage__0_execute && x__h14721 == 2'd2 &&
	     NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ;
  assign r_l_resVec_3$whas =
	     WILL_FIRE_RL_c_s_Stage__0_execute && x__h14721 == 2'd3 &&
	     NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ;
  assign c_fifo__input__TO_Start_enq_data$wget =
	     MUX_c_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ?
	       MUX_c_fifo__input__TO_Start_enq_data$wset_1__VAL_1 :
	       MUX_c_fifo__input__TO_Start_enq_data$wset_1__VAL_2 ;
  assign c_fifo__input__TO_Start_enq_data$whas =
	     WILL_FIRE_RL_c_s_Stage__13_execute &&
	     !c_fifo_Stage__0_TO_Stage__13$D_OUT[130] ||
	     EN__intc_req ;

  // register c
  assign c$D_IN = c + 3'd1 ;
  assign c$EN = EN__intc_req ;

  // register c_busyReg
  assign c_busyReg$D_IN = !MUX_c_busyReg$write_1__SEL_1 ;
  assign c_busyReg$EN =
	     WILL_FIRE_RL_c_s_Stage__53_execute &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[80] ||
	     EN__intc_req ;

  // register c_div_lock_region
  assign c_div_lock_region$D_IN = 1'b0 ;
  assign c_div_lock_region$EN = 1'b0 ;

  // register c_dmem_lock_region
  assign c_dmem_lock_region$D_IN = 1'b0 ;
  assign c_dmem_lock_region$EN = 1'b0 ;

  // register c_imem_lock_region
  assign c_imem_lock_region$D_IN = 1'b0 ;
  assign c_imem_lock_region$EN = 1'b0 ;

  // register c_rf_lock_region
  assign c_rf_lock_region$D_IN = 1'b0 ;
  assign c_rf_lock_region$EN = 1'b0 ;

  // register d_amem_head
  assign d_amem_head$D_IN =
	     MUX_d_amem_head$write_1__SEL_1 ?
	       d_amem_head_47_PLUS_1___d938 :
	       d_amem_head_47_PLUS_1___d938 ;
  assign d_amem_head$EN =
	     WILL_FIRE_RL_c_s_Stage__47_execute && _dfoo41 || EN_dmem_req ;

  // register d_amem_nextData
  assign d_amem_nextData$D_IN =
	     d_amem_nextData_1$whas ? d_amem_nextData_1$wget : 4'd2 ;
  assign d_amem_nextData$EN = 1'd1 ;

  // register d_amem_outData_0
  assign d_amem_outData_0$D_IN = dmem_bram_client_response_put ;
  assign d_amem_outData_0$EN = MUX_d_amem_valid_0$write_1__SEL_2 ;

  // register d_amem_outData_1
  assign d_amem_outData_1$D_IN = dmem_bram_client_response_put ;
  assign d_amem_outData_1$EN = MUX_d_amem_valid_1$write_1__SEL_2 ;

  // register d_amem_outData_2
  assign d_amem_outData_2$D_IN = dmem_bram_client_response_put ;
  assign d_amem_outData_2$EN = MUX_d_amem_valid_2$write_1__SEL_2 ;

  // register d_amem_outData_3
  assign d_amem_outData_3$D_IN = dmem_bram_client_response_put ;
  assign d_amem_outData_3$EN = MUX_d_amem_valid_3$write_1__SEL_2 ;

  // register d_amem_outData_4
  assign d_amem_outData_4$D_IN = dmem_bram_client_response_put ;
  assign d_amem_outData_4$EN = MUX_d_amem_valid_4$write_1__SEL_2 ;

  // register d_amem_outData_5
  assign d_amem_outData_5$D_IN = dmem_bram_client_response_put ;
  assign d_amem_outData_5$EN = MUX_d_amem_valid_5$write_1__SEL_2 ;

  // register d_amem_outData_6
  assign d_amem_outData_6$D_IN = dmem_bram_client_response_put ;
  assign d_amem_outData_6$EN = MUX_d_amem_valid_6$write_1__SEL_2 ;

  // register d_amem_outData_7
  assign d_amem_outData_7$D_IN = dmem_bram_client_response_put ;
  assign d_amem_outData_7$EN = MUX_d_amem_valid_7$write_1__SEL_2 ;

  // register d_amem_valid_0
  always@(MUX_d_amem_valid_0$write_1__SEL_1 or
	  MUX_d_amem_valid_0$write_1__SEL_2 or
	  MUX_d_amem_valid_0$write_1__SEL_3)
  case (1'b1)
    MUX_d_amem_valid_0$write_1__SEL_1: d_amem_valid_0$D_IN = 1'd0;
    MUX_d_amem_valid_0$write_1__SEL_2: d_amem_valid_0$D_IN = 1'd1;
    MUX_d_amem_valid_0$write_1__SEL_3: d_amem_valid_0$D_IN = 1'd0;
    default: d_amem_valid_0$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign d_amem_valid_0$EN =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd0 ||
	     EN_dmem_resp && dmem_resp_a == 3'd0 ||
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo39 ;

  // register d_amem_valid_1
  always@(MUX_d_amem_valid_1$write_1__SEL_1 or
	  MUX_d_amem_valid_1$write_1__SEL_2 or
	  MUX_d_amem_valid_1$write_1__SEL_3)
  case (1'b1)
    MUX_d_amem_valid_1$write_1__SEL_1: d_amem_valid_1$D_IN = 1'd0;
    MUX_d_amem_valid_1$write_1__SEL_2: d_amem_valid_1$D_IN = 1'd1;
    MUX_d_amem_valid_1$write_1__SEL_3: d_amem_valid_1$D_IN = 1'd0;
    default: d_amem_valid_1$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign d_amem_valid_1$EN =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd1 ||
	     EN_dmem_resp && dmem_resp_a == 3'd1 ||
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo37 ;

  // register d_amem_valid_2
  always@(MUX_d_amem_valid_2$write_1__SEL_1 or
	  MUX_d_amem_valid_2$write_1__SEL_2 or
	  MUX_d_amem_valid_2$write_1__SEL_3)
  case (1'b1)
    MUX_d_amem_valid_2$write_1__SEL_1: d_amem_valid_2$D_IN = 1'd0;
    MUX_d_amem_valid_2$write_1__SEL_2: d_amem_valid_2$D_IN = 1'd1;
    MUX_d_amem_valid_2$write_1__SEL_3: d_amem_valid_2$D_IN = 1'd0;
    default: d_amem_valid_2$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign d_amem_valid_2$EN =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd2 ||
	     EN_dmem_resp && dmem_resp_a == 3'd2 ||
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo35 ;

  // register d_amem_valid_3
  always@(MUX_d_amem_valid_3$write_1__SEL_1 or
	  MUX_d_amem_valid_3$write_1__SEL_2 or
	  MUX_d_amem_valid_3$write_1__SEL_3)
  case (1'b1)
    MUX_d_amem_valid_3$write_1__SEL_1: d_amem_valid_3$D_IN = 1'd0;
    MUX_d_amem_valid_3$write_1__SEL_2: d_amem_valid_3$D_IN = 1'd1;
    MUX_d_amem_valid_3$write_1__SEL_3: d_amem_valid_3$D_IN = 1'd0;
    default: d_amem_valid_3$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign d_amem_valid_3$EN =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd3 ||
	     EN_dmem_resp && dmem_resp_a == 3'd3 ||
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo33 ;

  // register d_amem_valid_4
  always@(MUX_d_amem_valid_4$write_1__SEL_1 or
	  MUX_d_amem_valid_4$write_1__SEL_2 or
	  MUX_d_amem_valid_4$write_1__SEL_3)
  case (1'b1)
    MUX_d_amem_valid_4$write_1__SEL_1: d_amem_valid_4$D_IN = 1'd0;
    MUX_d_amem_valid_4$write_1__SEL_2: d_amem_valid_4$D_IN = 1'd1;
    MUX_d_amem_valid_4$write_1__SEL_3: d_amem_valid_4$D_IN = 1'd0;
    default: d_amem_valid_4$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign d_amem_valid_4$EN =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd4 ||
	     EN_dmem_resp && dmem_resp_a == 3'd4 ||
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo31 ;

  // register d_amem_valid_5
  always@(MUX_d_amem_valid_5$write_1__SEL_1 or
	  MUX_d_amem_valid_5$write_1__SEL_2 or
	  MUX_d_amem_valid_5$write_1__SEL_3)
  case (1'b1)
    MUX_d_amem_valid_5$write_1__SEL_1: d_amem_valid_5$D_IN = 1'd0;
    MUX_d_amem_valid_5$write_1__SEL_2: d_amem_valid_5$D_IN = 1'd1;
    MUX_d_amem_valid_5$write_1__SEL_3: d_amem_valid_5$D_IN = 1'd0;
    default: d_amem_valid_5$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign d_amem_valid_5$EN =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd5 ||
	     EN_dmem_resp && dmem_resp_a == 3'd5 ||
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo29 ;

  // register d_amem_valid_6
  always@(MUX_d_amem_valid_6$write_1__SEL_1 or
	  MUX_d_amem_valid_6$write_1__SEL_2 or
	  MUX_d_amem_valid_6$write_1__SEL_3)
  case (1'b1)
    MUX_d_amem_valid_6$write_1__SEL_1: d_amem_valid_6$D_IN = 1'd0;
    MUX_d_amem_valid_6$write_1__SEL_2: d_amem_valid_6$D_IN = 1'd1;
    MUX_d_amem_valid_6$write_1__SEL_3: d_amem_valid_6$D_IN = 1'd0;
    default: d_amem_valid_6$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign d_amem_valid_6$EN =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd6 ||
	     EN_dmem_resp && dmem_resp_a == 3'd6 ||
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo27 ;

  // register d_amem_valid_7
  always@(MUX_d_amem_valid_7$write_1__SEL_1 or
	  MUX_d_amem_valid_7$write_1__SEL_2 or
	  MUX_d_amem_valid_7$write_1__SEL_3)
  case (1'b1)
    MUX_d_amem_valid_7$write_1__SEL_1: d_amem_valid_7$D_IN = 1'd0;
    MUX_d_amem_valid_7$write_1__SEL_2: d_amem_valid_7$D_IN = 1'd1;
    MUX_d_amem_valid_7$write_1__SEL_3: d_amem_valid_7$D_IN = 1'd0;
    default: d_amem_valid_7$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign d_amem_valid_7$EN =
	     WILL_FIRE_RL_d_amem_moveToOutFifo &&
	     d_amem_nextData[2:0] == 3'd7 ||
	     EN_dmem_resp && dmem_resp_a == 3'd7 ||
	     WILL_FIRE_RL_c_s_Stage__53_execute && _dfoo25 ;

  // register d_l_entryVec_0
  assign d_l_entryVec_0$D_IN = 17'd43690 ;
  assign d_l_entryVec_0$EN =
	     !d_l_lockVec_0_held$EMPTY_N && d_l_entryVec_0[16] ;

  // register d_l_entryVec_1
  assign d_l_entryVec_1$D_IN = 17'd43690 ;
  assign d_l_entryVec_1$EN =
	     !d_l_lockVec_1_held$EMPTY_N && d_l_entryVec_1[16] ;

  // register d_l_entryVec_2
  assign d_l_entryVec_2$D_IN = 17'd43690 ;
  assign d_l_entryVec_2$EN =
	     !d_l_lockVec_2_held$EMPTY_N && d_l_entryVec_2[16] ;

  // register d_l_entryVec_3
  assign d_l_entryVec_3$D_IN = 17'd43690 ;
  assign d_l_entryVec_3$EN =
	     !d_l_lockVec_3_held$EMPTY_N && d_l_entryVec_3[16] ;

  // register d_l_lockVec_0_cnt
  assign d_l_lockVec_0_cnt$D_IN = 2'h0 ;
  assign d_l_lockVec_0_cnt$EN = 1'b0 ;

  // register d_l_lockVec_0_nextId
  assign d_l_lockVec_0_nextId$D_IN = 2'h0 ;
  assign d_l_lockVec_0_nextId$EN = 1'b0 ;

  // register d_l_lockVec_1_cnt
  assign d_l_lockVec_1_cnt$D_IN = 2'h0 ;
  assign d_l_lockVec_1_cnt$EN = 1'b0 ;

  // register d_l_lockVec_1_nextId
  assign d_l_lockVec_1_nextId$D_IN = 2'h0 ;
  assign d_l_lockVec_1_nextId$EN = 1'b0 ;

  // register d_l_lockVec_2_cnt
  assign d_l_lockVec_2_cnt$D_IN = 2'h0 ;
  assign d_l_lockVec_2_cnt$EN = 1'b0 ;

  // register d_l_lockVec_2_nextId
  assign d_l_lockVec_2_nextId$D_IN = 2'h0 ;
  assign d_l_lockVec_2_nextId$EN = 1'b0 ;

  // register d_l_lockVec_3_cnt
  assign d_l_lockVec_3_cnt$D_IN = 2'h0 ;
  assign d_l_lockVec_3_cnt$EN = 1'b0 ;

  // register d_l_lockVec_3_nextId
  assign d_l_lockVec_3_nextId$D_IN = 2'h0 ;
  assign d_l_lockVec_3_nextId$EN = 1'b0 ;

  // register i_amem_head
  assign i_amem_head$D_IN = i_amem_head + 3'd1 ;
  assign i_amem_head$EN = RDY_imem_bram_client_request_get ;

  // register i_amem_nextData
  assign i_amem_nextData$D_IN =
	     RDY_imem_bram_client_request_get ?
	       i_amem_nextData_1$wget :
	       4'd2 ;
  assign i_amem_nextData$EN = 1'd1 ;

  // register i_amem_outData_0
  assign i_amem_outData_0$D_IN = imem_bram_client_response_put ;
  assign i_amem_outData_0$EN = MUX_i_amem_valid_0$write_1__SEL_2 ;

  // register i_amem_outData_1
  assign i_amem_outData_1$D_IN = imem_bram_client_response_put ;
  assign i_amem_outData_1$EN = MUX_i_amem_valid_1$write_1__SEL_2 ;

  // register i_amem_outData_2
  assign i_amem_outData_2$D_IN = imem_bram_client_response_put ;
  assign i_amem_outData_2$EN = MUX_i_amem_valid_2$write_1__SEL_2 ;

  // register i_amem_outData_3
  assign i_amem_outData_3$D_IN = imem_bram_client_response_put ;
  assign i_amem_outData_3$EN = MUX_i_amem_valid_3$write_1__SEL_2 ;

  // register i_amem_outData_4
  assign i_amem_outData_4$D_IN = imem_bram_client_response_put ;
  assign i_amem_outData_4$EN = MUX_i_amem_valid_4$write_1__SEL_2 ;

  // register i_amem_outData_5
  assign i_amem_outData_5$D_IN = imem_bram_client_response_put ;
  assign i_amem_outData_5$EN = MUX_i_amem_valid_5$write_1__SEL_2 ;

  // register i_amem_outData_6
  assign i_amem_outData_6$D_IN = imem_bram_client_response_put ;
  assign i_amem_outData_6$EN = MUX_i_amem_valid_6$write_1__SEL_2 ;

  // register i_amem_outData_7
  assign i_amem_outData_7$D_IN = imem_bram_client_response_put ;
  assign i_amem_outData_7$EN = MUX_i_amem_valid_7$write_1__SEL_2 ;

  // register i_amem_valid_0
  always@(MUX_i_amem_valid_0$write_1__SEL_1 or
	  MUX_i_amem_valid_0$write_1__SEL_2 or
	  MUX_i_amem_valid_0$write_1__SEL_3)
  case (1'b1)
    MUX_i_amem_valid_0$write_1__SEL_1: i_amem_valid_0$D_IN = 1'd0;
    MUX_i_amem_valid_0$write_1__SEL_2: i_amem_valid_0$D_IN = 1'd1;
    MUX_i_amem_valid_0$write_1__SEL_3: i_amem_valid_0$D_IN = 1'd0;
    default: i_amem_valid_0$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign i_amem_valid_0$EN =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd0 ||
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd0 ||
	     EN_imem_resp && imem_resp_a == 3'd0 ;

  // register i_amem_valid_1
  always@(MUX_i_amem_valid_1$write_1__SEL_1 or
	  MUX_i_amem_valid_1$write_1__SEL_2 or
	  MUX_i_amem_valid_1$write_1__SEL_3)
  case (1'b1)
    MUX_i_amem_valid_1$write_1__SEL_1: i_amem_valid_1$D_IN = 1'd0;
    MUX_i_amem_valid_1$write_1__SEL_2: i_amem_valid_1$D_IN = 1'd1;
    MUX_i_amem_valid_1$write_1__SEL_3: i_amem_valid_1$D_IN = 1'd0;
    default: i_amem_valid_1$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign i_amem_valid_1$EN =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd1 ||
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd1 ||
	     EN_imem_resp && imem_resp_a == 3'd1 ;

  // register i_amem_valid_2
  always@(MUX_i_amem_valid_2$write_1__SEL_1 or
	  MUX_i_amem_valid_2$write_1__SEL_2 or
	  MUX_i_amem_valid_2$write_1__SEL_3)
  case (1'b1)
    MUX_i_amem_valid_2$write_1__SEL_1: i_amem_valid_2$D_IN = 1'd0;
    MUX_i_amem_valid_2$write_1__SEL_2: i_amem_valid_2$D_IN = 1'd1;
    MUX_i_amem_valid_2$write_1__SEL_3: i_amem_valid_2$D_IN = 1'd0;
    default: i_amem_valid_2$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign i_amem_valid_2$EN =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd2 ||
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd2 ||
	     EN_imem_resp && imem_resp_a == 3'd2 ;

  // register i_amem_valid_3
  always@(MUX_i_amem_valid_3$write_1__SEL_1 or
	  MUX_i_amem_valid_3$write_1__SEL_2 or
	  MUX_i_amem_valid_3$write_1__SEL_3)
  case (1'b1)
    MUX_i_amem_valid_3$write_1__SEL_1: i_amem_valid_3$D_IN = 1'd0;
    MUX_i_amem_valid_3$write_1__SEL_2: i_amem_valid_3$D_IN = 1'd1;
    MUX_i_amem_valid_3$write_1__SEL_3: i_amem_valid_3$D_IN = 1'd0;
    default: i_amem_valid_3$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign i_amem_valid_3$EN =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd3 ||
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd3 ||
	     EN_imem_resp && imem_resp_a == 3'd3 ;

  // register i_amem_valid_4
  always@(MUX_i_amem_valid_4$write_1__SEL_1 or
	  MUX_i_amem_valid_4$write_1__SEL_2 or
	  MUX_i_amem_valid_4$write_1__SEL_3)
  case (1'b1)
    MUX_i_amem_valid_4$write_1__SEL_1: i_amem_valid_4$D_IN = 1'd0;
    MUX_i_amem_valid_4$write_1__SEL_2: i_amem_valid_4$D_IN = 1'd1;
    MUX_i_amem_valid_4$write_1__SEL_3: i_amem_valid_4$D_IN = 1'd0;
    default: i_amem_valid_4$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign i_amem_valid_4$EN =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd4 ||
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd4 ||
	     EN_imem_resp && imem_resp_a == 3'd4 ;

  // register i_amem_valid_5
  always@(MUX_i_amem_valid_5$write_1__SEL_1 or
	  MUX_i_amem_valid_5$write_1__SEL_2 or
	  MUX_i_amem_valid_5$write_1__SEL_3)
  case (1'b1)
    MUX_i_amem_valid_5$write_1__SEL_1: i_amem_valid_5$D_IN = 1'd0;
    MUX_i_amem_valid_5$write_1__SEL_2: i_amem_valid_5$D_IN = 1'd1;
    MUX_i_amem_valid_5$write_1__SEL_3: i_amem_valid_5$D_IN = 1'd0;
    default: i_amem_valid_5$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign i_amem_valid_5$EN =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd5 ||
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd5 ||
	     EN_imem_resp && imem_resp_a == 3'd5 ;

  // register i_amem_valid_6
  always@(MUX_i_amem_valid_6$write_1__SEL_1 or
	  MUX_i_amem_valid_6$write_1__SEL_2 or
	  MUX_i_amem_valid_6$write_1__SEL_3)
  case (1'b1)
    MUX_i_amem_valid_6$write_1__SEL_1: i_amem_valid_6$D_IN = 1'd0;
    MUX_i_amem_valid_6$write_1__SEL_2: i_amem_valid_6$D_IN = 1'd1;
    MUX_i_amem_valid_6$write_1__SEL_3: i_amem_valid_6$D_IN = 1'd0;
    default: i_amem_valid_6$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign i_amem_valid_6$EN =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd6 ||
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd6 ||
	     EN_imem_resp && imem_resp_a == 3'd6 ;

  // register i_amem_valid_7
  always@(MUX_i_amem_valid_7$write_1__SEL_1 or
	  MUX_i_amem_valid_7$write_1__SEL_2 or
	  MUX_i_amem_valid_7$write_1__SEL_3)
  case (1'b1)
    MUX_i_amem_valid_7$write_1__SEL_1: i_amem_valid_7$D_IN = 1'd0;
    MUX_i_amem_valid_7$write_1__SEL_2: i_amem_valid_7$D_IN = 1'd1;
    MUX_i_amem_valid_7$write_1__SEL_3: i_amem_valid_7$D_IN = 1'd0;
    default: i_amem_valid_7$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign i_amem_valid_7$EN =
	     WILL_FIRE_RL_i_amem_moveToOutFifo &&
	     i_amem_nextData[2:0] == 3'd7 ||
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     c_fifo_Start_TO_Stage__0$D_OUT[21:19] == 3'd7 ||
	     EN_imem_resp && imem_resp_a == 3'd7 ;

  // register i_l_cnt
  assign i_l_cnt$D_IN = 2'h0 ;
  assign i_l_cnt$EN = 1'b0 ;

  // register i_l_nextId
  assign i_l_nextId$D_IN = 2'h0 ;
  assign i_l_nextId$EN = 1'b0 ;

  // register r_l_entryVec_0
  assign r_l_entryVec_0$D_IN =
	     MUX_r_l_entryVec_0$write_1__SEL_1 ?
	       MUX_r_l_entryVec_0$write_1__VAL_1 :
	       6'd10 ;
  assign r_l_entryVec_0$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d447 ||
	     CAN_FIRE_RL_r_l_freelock && !WILL_FIRE_RL_c_s_Stage__0_execute ;

  // register r_l_entryVec_1
  assign r_l_entryVec_1$D_IN =
	     MUX_r_l_entryVec_1$write_1__SEL_1 ?
	       MUX_r_l_entryVec_0$write_1__VAL_1 :
	       6'd10 ;
  assign r_l_entryVec_1$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d450 ||
	     CAN_FIRE_RL_r_l_freelock_1 &&
	     !WILL_FIRE_RL_c_s_Stage__0_execute ;

  // register r_l_entryVec_2
  assign r_l_entryVec_2$D_IN =
	     MUX_r_l_entryVec_2$write_1__SEL_1 ?
	       MUX_r_l_entryVec_0$write_1__VAL_1 :
	       6'd10 ;
  assign r_l_entryVec_2$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d452 ||
	     CAN_FIRE_RL_r_l_freelock_2 &&
	     !WILL_FIRE_RL_c_s_Stage__0_execute ;

  // register r_l_entryVec_3
  assign r_l_entryVec_3$D_IN =
	     MUX_r_l_entryVec_3$write_1__SEL_1 ?
	       MUX_r_l_entryVec_0$write_1__VAL_1 :
	       6'd10 ;
  assign r_l_entryVec_3$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d454 ||
	     CAN_FIRE_RL_r_l_freelock_3 &&
	     !WILL_FIRE_RL_c_s_Stage__0_execute ;

  // register r_l_lockVec_0_cnt
  assign r_l_lockVec_0_cnt$D_IN = r_l_lockVec_0_cnt + 2'd1 ;
  assign r_l_lockVec_0_cnt$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd0 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d447) ;

  // register r_l_lockVec_0_nextId
  assign r_l_lockVec_0_nextId$D_IN = r_l_lockVec_0_nextId + 2'd1 ;
  assign r_l_lockVec_0_nextId$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd0 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d447) ;

  // register r_l_lockVec_1_cnt
  assign r_l_lockVec_1_cnt$D_IN = r_l_lockVec_1_cnt + 2'd1 ;
  assign r_l_lockVec_1_cnt$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd1 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d450) ;

  // register r_l_lockVec_1_nextId
  assign r_l_lockVec_1_nextId$D_IN = r_l_lockVec_1_nextId + 2'd1 ;
  assign r_l_lockVec_1_nextId$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd1 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d450) ;

  // register r_l_lockVec_2_cnt
  assign r_l_lockVec_2_cnt$D_IN = r_l_lockVec_2_cnt + 2'd1 ;
  assign r_l_lockVec_2_cnt$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd2 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d452) ;

  // register r_l_lockVec_2_nextId
  assign r_l_lockVec_2_nextId$D_IN = r_l_lockVec_2_nextId + 2'd1 ;
  assign r_l_lockVec_2_nextId$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd2 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d452) ;

  // register r_l_lockVec_3_cnt
  assign r_l_lockVec_3_cnt$D_IN = r_l_lockVec_3_cnt + 2'd1 ;
  assign r_l_lockVec_3_cnt$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd3 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d454) ;

  // register r_l_lockVec_3_nextId
  assign r_l_lockVec_3_nextId$D_IN = r_l_lockVec_3_nextId + 2'd1 ;
  assign r_l_lockVec_3_nextId$EN =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd3 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d454) ;

  // submodule c_fifo_Stage__0_TO_Stage__13
  assign c_fifo_Stage__0_TO_Stage__13$D_IN =
	     { (SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b1101111) ?
		 32'd0 :
		 rf_rf$D_OUT_2,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	       7'b0010111,
	       NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d508 } ;
  assign c_fifo_Stage__0_TO_Stage__13$ENQ =
	     WILL_FIRE_RL_c_s_Stage__0_execute ;
  assign c_fifo_Stage__0_TO_Stage__13$DEQ =
	     WILL_FIRE_RL_c_s_Stage__13_execute ;
  assign c_fifo_Stage__0_TO_Stage__13$CLR = 1'b0 ;

  // submodule c_fifo_Stage__13_TO_Stage__34
  assign c_fifo_Stage__13_TO_Stage__34$D_IN =
	     { c_fifo_Stage__0_TO_Stage__13$D_OUT[298:233],
	       !c_fifo_Stage__0_TO_Stage__13$D_OUT[61],
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[131] ?
		 c_fifo_Stage__0_TO_Stage__13$D_OUT[168:137] :
		 c_fifo_Stage__0_TO_Stage__13$D_OUT[128:97],
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[184:133],
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[61] &&
	       (c_fifo_Stage__0_TO_Stage__13$D_OUT[135:133] == 3'd4 ||
		c_fifo_Stage__0_TO_Stage__13$D_OUT[135:133] == 3'd6) &&
	       (c_fifo_Stage__0_TO_Stage__13$D_OUT[298] ?
		  32'hFFFFFFFF :
		  32'd1) !=
	       ((c_fifo_Stage__0_TO_Stage__13$D_OUT[135:133] == 3'd6) ?
		  32'd1 :
		  (c_fifo_Stage__0_TO_Stage__13$D_OUT[128] ?
		     32'hFFFFFFFF :
		     32'd1)),
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[132],
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[130],
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[40:36],
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[129:63],
	       32'd0,
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[61:57],
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[35:4],
	       div$req,
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[3:0] } ;
  assign c_fifo_Stage__13_TO_Stage__34$ENQ =
	     WILL_FIRE_RL_c_s_Stage__13_execute ;
  assign c_fifo_Stage__13_TO_Stage__34$DEQ =
	     c_fifo_Stage__13_TO_Stage__34$EMPTY_N &&
	     c_fifo_Stage__34_TO_Stage__47_i_notFull__11_AN_ETC___d529 &&
	     (c_fifo_Stage__13_TO_Stage__34$D_OUT[233] || div$checkHandle) ;
  assign c_fifo_Stage__13_TO_Stage__34$CLR = 1'b0 ;

  // submodule c_fifo_Stage__34_TO_Stage__47
  assign c_fifo_Stage__34_TO_Stage__47$D_IN =
	     { c_fifo_Stage__13_TO_Stage__34$D_OUT[139:108],
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[266],
	       IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d553,
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[200:185],
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[151:149],
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[147:140],
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[40],
	       IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d564,
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[39:5],
	       IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d641,
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[3:0] } ;
  assign c_fifo_Stage__34_TO_Stage__47$ENQ =
	     c_fifo_Stage__13_TO_Stage__34$EMPTY_N &&
	     c_fifo_Stage__34_TO_Stage__47_i_notFull__11_AN_ETC___d529 &&
	     (c_fifo_Stage__13_TO_Stage__34$D_OUT[233] || div$checkHandle) ;
  assign c_fifo_Stage__34_TO_Stage__47$DEQ =
	     WILL_FIRE_RL_c_s_Stage__47_execute ;
  assign c_fifo_Stage__34_TO_Stage__47$CLR = 1'b0 ;

  // submodule c_fifo_Stage__47_TO_Stage__53
  assign c_fifo_Stage__47_TO_Stage__53$D_IN =
	     { c_fifo_Stage__34_TO_Stage__47$D_OUT[117],
	       d_amem_head,
	       32'd0,
	       c_fifo_Stage__34_TO_Stage__47$D_OUT[116:99],
	       d_amem_head,
	       c_fifo_Stage__34_TO_Stage__47$D_OUT[98:96],
	       c_fifo_Stage__34_TO_Stage__47$D_OUT[94:87],
	       c_fifo_Stage__34_TO_Stage__47$D_OUT[70:3],
	       c_fifo_Stage__34_TO_Stage__47$D_OUT[3] ?
		 2'd0 :
		 (c_fifo_Stage__34_TO_Stage__47$D_OUT[95] ? 2'd1 : 2'd2),
	       c_fifo_Stage__34_TO_Stage__47$D_OUT[2:0] } ;
  assign c_fifo_Stage__47_TO_Stage__53$ENQ =
	     WILL_FIRE_RL_c_s_Stage__47_execute ;
  assign c_fifo_Stage__47_TO_Stage__53$DEQ =
	     WILL_FIRE_RL_c_s_Stage__53_execute ;
  assign c_fifo_Stage__47_TO_Stage__53$CLR = 1'b0 ;

  // submodule c_fifo_Start_TO_Stage__0
  assign c_fifo_Start_TO_Stage__0$D_IN =
	     { i_amem_head, c_fifo__input__TO_Start_f$D_OUT } ;
  assign c_fifo_Start_TO_Stage__0$ENQ = WILL_FIRE_RL_c_s_Start_execute ;
  assign c_fifo_Start_TO_Stage__0$DEQ = WILL_FIRE_RL_c_s_Stage__0_execute ;
  assign c_fifo_Start_TO_Stage__0$CLR = 1'b0 ;

  // submodule c_fifo__input__TO_Start_f
  assign c_fifo__input__TO_Start_f$D_IN =
	     c_fifo__input__TO_Start_enq_data$wget ;
  assign c_fifo__input__TO_Start_f$ENQ =
	     c_fifo__input__TO_Start_f$FULL_N &&
	     c_fifo__input__TO_Start_enq_data$whas ;
  assign c_fifo__input__TO_Start_f$DEQ = WILL_FIRE_RL_c_s_Start_execute ;
  assign c_fifo__input__TO_Start_f$CLR = 1'b0 ;

  // submodule c_outputQueue
  assign c_outputQueue$D_IN =
	     { c_fifo_Stage__47_TO_Stage__53$D_OUT[2:0], 1'd1 } ;
  assign c_outputQueue$ENQ = MUX_c_busyReg$write_1__SEL_1 ;
  assign c_outputQueue$DEQ = EN__intc_resp ;
  assign c_outputQueue$CLR = 1'b0 ;

  // submodule d_l_lockVec_0_held
  assign d_l_lockVec_0_held$D_IN = 2'h0 ;
  assign d_l_lockVec_0_held$ENQ = 1'b0 ;
  assign d_l_lockVec_0_held$DEQ = 1'b0 ;
  assign d_l_lockVec_0_held$CLR = 1'b0 ;

  // submodule d_l_lockVec_1_held
  assign d_l_lockVec_1_held$D_IN = 2'h0 ;
  assign d_l_lockVec_1_held$ENQ = 1'b0 ;
  assign d_l_lockVec_1_held$DEQ = 1'b0 ;
  assign d_l_lockVec_1_held$CLR = 1'b0 ;

  // submodule d_l_lockVec_2_held
  assign d_l_lockVec_2_held$D_IN = 2'h0 ;
  assign d_l_lockVec_2_held$ENQ = 1'b0 ;
  assign d_l_lockVec_2_held$DEQ = 1'b0 ;
  assign d_l_lockVec_2_held$CLR = 1'b0 ;

  // submodule d_l_lockVec_3_held
  assign d_l_lockVec_3_held$D_IN = 2'h0 ;
  assign d_l_lockVec_3_held$ENQ = 1'b0 ;
  assign d_l_lockVec_3_held$DEQ = 1'b0 ;
  assign d_l_lockVec_3_held$CLR = 1'b0 ;

  // submodule div
  assign div$checkHandle_handle = c_fifo_Stage__13_TO_Stage__34$D_OUT[4] ;
  assign div$req_acc = 32'd0 ;
  assign div$req_cnt = 5'd0 ;
  always@(c_fifo_Stage__0_TO_Stage__13$D_OUT or
	  IF_c_fifo_Stage__0_TO_Stage__13_first__10_BIT__ETC___d185)
  begin
    case (c_fifo_Stage__0_TO_Stage__13$D_OUT[135:133])
      3'd4, 3'd6:
	  div$req_denom =
	      IF_c_fifo_Stage__0_TO_Stage__13_first__10_BIT__ETC___d185;
      default: div$req_denom = c_fifo_Stage__0_TO_Stage__13$D_OUT[128:97];
    endcase
  end
  always@(c_fifo_Stage__0_TO_Stage__13$D_OUT or
	  IF_c_fifo_Stage__0_TO_Stage__13_first__10_BIT__ETC___d181)
  begin
    case (c_fifo_Stage__0_TO_Stage__13$D_OUT[135:133])
      3'd4, 3'd6:
	  div$req_num =
	      IF_c_fifo_Stage__0_TO_Stage__13_first__10_BIT__ETC___d181;
      default: div$req_num = c_fifo_Stage__0_TO_Stage__13$D_OUT[298:267];
    endcase
  end
  assign div$req_quot = 32'd0 ;
  assign div$req_retQuot =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[135:133] <= 3'd5 ;
  assign div$EN_req =
	     WILL_FIRE_RL_c_s_Stage__13_execute &&
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[61] ;
  assign div$EN_resp =
	     c_fifo_Stage__13_TO_Stage__34$EMPTY_N &&
	     c_fifo_Stage__34_TO_Stage__47_i_notFull__11_AN_ETC___d529 &&
	     (c_fifo_Stage__13_TO_Stage__34$D_OUT[233] || div$checkHandle) &&
	     !c_fifo_Stage__13_TO_Stage__34$D_OUT[233] ;

  // submodule i_l_held
  assign i_l_held$D_IN = 2'h0 ;
  assign i_l_held$ENQ = 1'b0 ;
  assign i_l_held$DEQ = 1'b0 ;
  assign i_l_held$CLR = 1'b0 ;

  // submodule r_l_lockVec_0_held
  assign r_l_lockVec_0_held$D_IN = r_l_lockVec_0_nextId ;
  assign r_l_lockVec_0_held$ENQ =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd0 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d447) ;
  assign r_l_lockVec_0_held$DEQ =
	     WILL_FIRE_RL_c_s_Stage__53_execute &&
	     r_l_lockVec_0_held_first__95_EQ_IF_c_fifo_Stag_ETC___d699 &&
	     x__h17921 == 2'd0 &&
	     c_fifo_Stage__47_TO_Stage__53_first__48_BIT_14_ETC___d830 ;
  assign r_l_lockVec_0_held$CLR = 1'b0 ;

  // submodule r_l_lockVec_1_held
  assign r_l_lockVec_1_held$D_IN = r_l_lockVec_1_nextId ;
  assign r_l_lockVec_1_held$ENQ =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd1 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d450) ;
  assign r_l_lockVec_1_held$DEQ =
	     WILL_FIRE_RL_c_s_Stage__53_execute &&
	     r_l_lockVec_1_held_first__00_EQ_IF_c_fifo_Stag_ETC___d701 &&
	     x__h17921 == 2'd1 &&
	     c_fifo_Stage__47_TO_Stage__53_first__48_BIT_14_ETC___d830 ;
  assign r_l_lockVec_1_held$CLR = 1'b0 ;

  // submodule r_l_lockVec_2_held
  assign r_l_lockVec_2_held$D_IN = r_l_lockVec_2_nextId ;
  assign r_l_lockVec_2_held$ENQ =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd2 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d452) ;
  assign r_l_lockVec_2_held$DEQ =
	     WILL_FIRE_RL_c_s_Stage__53_execute &&
	     r_l_lockVec_2_held_first__02_EQ_IF_c_fifo_Stag_ETC___d703 &&
	     x__h17921 == 2'd2 &&
	     c_fifo_Stage__47_TO_Stage__53_first__48_BIT_14_ETC___d830 ;
  assign r_l_lockVec_2_held$CLR = 1'b0 ;

  // submodule r_l_lockVec_3_held
  assign r_l_lockVec_3_held$D_IN = r_l_lockVec_3_nextId ;
  assign r_l_lockVec_3_held$ENQ =
	     WILL_FIRE_RL_c_s_Stage__0_execute &&
	     (x__h14721 == 2'd3 &&
	      NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 ||
	      IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d454) ;
  assign r_l_lockVec_3_held$DEQ =
	     WILL_FIRE_RL_c_s_Stage__53_execute &&
	     r_l_lockVec_3_held_first__04_EQ_IF_c_fifo_Stag_ETC___d705 &&
	     x__h17921 == 2'd3 &&
	     c_fifo_Stage__47_TO_Stage__53_first__48_BIT_14_ETC___d830 ;
  assign r_l_lockVec_3_held$CLR = 1'b0 ;

  // submodule rf_rf
  assign rf_rf$ADDR_1 =
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[24:20] ;
  assign rf_rf$ADDR_2 =
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[19:15] ;
  assign rf_rf$ADDR_3 = 5'h0 ;
  assign rf_rf$ADDR_4 = 5'h0 ;
  assign rf_rf$ADDR_5 = 5'h0 ;
  assign rf_rf$ADDR_IN = c_fifo_Stage__47_TO_Stage__53$D_OUT[79:75] ;
  assign rf_rf$D_IN =
	     (c_fifo_Stage__47_TO_Stage__53$D_OUT[140] &&
	      !c_fifo_Stage__47_TO_Stage__53$D_OUT[5] &&
	      !c_fifo_Stage__47_TO_Stage__53$D_OUT[74] &&
	      !c_fifo_Stage__47_TO_Stage__53$D_OUT[73]) ?
	       c_fifo_Stage__47_TO_Stage__53$D_OUT[37:6] :
	       IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d823 ;
  assign rf_rf$WE =
	     WILL_FIRE_RL_c_s_Stage__53_execute &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[140] ;

  // remaining internal signals
  assign IF_IF_c_fifo_Stage__13_TO_Stage__34_first__12__ETC___d621 =
	     (((c_fifo_Stage__13_TO_Stage__34$D_OUT[151:149] == 3'd3) ?
		 32'd1 :
		 (c_fifo_Stage__13_TO_Stage__34$D_OUT[299] ?
		    32'hFFFFFFFF :
		    32'd1)) ==
	      ((c_fifo_Stage__13_TO_Stage__34$D_OUT[151:149] < 3'd2) ?
		 (c_fifo_Stage__13_TO_Stage__34$D_OUT[139] ?
		    32'hFFFFFFFF :
		    32'd1) :
		 32'd1)) ?
	       IF_c_fifo_Stage__13_TO_Stage__34_first__12_BIT_ETC___d619 :
	       -IF_c_fifo_Stage__13_TO_Stage__34_first__12_BIT_ETC___d619 ;
  assign IF_NOT_SEL_ARR_i_amem_outData_0_read__19_i_ame_ETC___d502 =
	     { (SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
		7'b0110011 &&
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
		7'b1100011 &&
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
		7'b0100011 &&
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
		7'b1100111) ?
		 32'd0 :
		 rf_rf$D_OUT_1,
	       { {20{SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q16[11]}},
		 SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q16 },
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	       7'b0010011 &&
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[30],
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[31:25] ==
	       7'd1 &&
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	       7'b0110011,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	       7'b1100011,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[31:25] ==
	       7'd1 &&
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	       7'b0110011 &&
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[14:12] >=
	       3'd4,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d499 } ;
  assign IF_NOT_c_fifo_Stage__0_TO_Stage__13_first__10__ETC___d175 =
	     (!c_fifo_Stage__0_TO_Stage__13$D_OUT[62] &&
	      !c_fifo_Stage__0_TO_Stage__13$D_OUT[129] &&
	      !c_fifo_Stage__0_TO_Stage__13$D_OUT[60]) ?
	       c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132 :
	       ((!c_fifo_Stage__0_TO_Stage__13$D_OUT[62] &&
		 !c_fifo_Stage__0_TO_Stage__13$D_OUT[129] &&
		 c_fifo_Stage__0_TO_Stage__13$D_OUT[60]) ?
		  { {2{c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_282_TO__ETC__q8[13]}},
		    c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_282_TO__ETC__q8 } :
		  ((!c_fifo_Stage__0_TO_Stage__13$D_OUT[62] &&
		    c_fifo_Stage__0_TO_Stage__13$D_OUT[129]) ?
		     SEXT_c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_18_ETC__q12[15:0] :
		     IF_c_fifo_Stage__0_TO_Stage__13_first__10_BITS_ETC___d171)) ;
  assign IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d553 =
	     (!c_fifo_Stage__13_TO_Stage__34$D_OUT[147] &&
	      !c_fifo_Stage__13_TO_Stage__34$D_OUT[3]) ?
	       2'd0 :
	       ((!c_fifo_Stage__13_TO_Stage__34$D_OUT[147] &&
		 c_fifo_Stage__13_TO_Stage__34$D_OUT[3]) ?
		  c_fifo_Stage__13_TO_Stage__34_first__12_BITS_1_ETC___d546[1:0] :
		  c_fifo_Stage__13_TO_Stage__34_first__12_BITS_1_ETC___d549[1:0]) ;
  assign IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d564 =
	     (!c_fifo_Stage__13_TO_Stage__34$D_OUT[147] &&
	      !c_fifo_Stage__13_TO_Stage__34$D_OUT[3]) ?
	       16'd0 :
	       ((!c_fifo_Stage__13_TO_Stage__34$D_OUT[147] &&
		 c_fifo_Stage__13_TO_Stage__34$D_OUT[3]) ?
		  c_fifo_Stage__13_TO_Stage__34_first__12_BITS_1_ETC___d546[17:2] :
		  c_fifo_Stage__13_TO_Stage__34_first__12_BITS_1_ETC___d549[17:2]) ;
  assign IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d640 =
	     (!c_fifo_Stage__13_TO_Stage__34$D_OUT[152] &&
	      !c_fifo_Stage__13_TO_Stage__34$D_OUT[267] &&
	      !c_fifo_Stage__13_TO_Stage__34$D_OUT[41] &&
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[74]) ?
	       ((c_fifo_Stage__13_TO_Stage__34$D_OUT[151:149] == 3'd0) ?
		  IF_IF_c_fifo_Stage__13_TO_Stage__34_first__12__ETC___d621[31:0] :
		  IF_IF_c_fifo_Stage__13_TO_Stage__34_first__12__ETC___d621[63:32]) :
	       ((!c_fifo_Stage__13_TO_Stage__34$D_OUT[152] &&
		 !c_fifo_Stage__13_TO_Stage__34$D_OUT[267] &&
		 c_fifo_Stage__13_TO_Stage__34$D_OUT[41]) ?
		  (c_fifo_Stage__13_TO_Stage__34$D_OUT[148] ?
		     -IF_c_fifo_Stage__13_TO_Stage__34_first__12_BIT_ETC___d630 :
		     IF_c_fifo_Stage__13_TO_Stage__34_first__12_BIT_ETC___d630) :
		  ((!c_fifo_Stage__13_TO_Stage__34$D_OUT[152] &&
		    c_fifo_Stage__13_TO_Stage__34$D_OUT[267]) ?
		     { 14'd0,
		       c_fifo_Stage__13_TO_Stage__34$D_OUT[200:185],
		       2'd0 } +
		     c_fifo_Stage__13_TO_Stage__34$D_OUT[265:234] :
		     c_fifo_Stage__13_TO_Stage__34$D_OUT[265:234])) ;
  assign IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d641 =
	     (!c_fifo_Stage__13_TO_Stage__34$D_OUT[152] &&
	      !c_fifo_Stage__13_TO_Stage__34$D_OUT[267] &&
	      !c_fifo_Stage__13_TO_Stage__34$D_OUT[41] &&
	      !c_fifo_Stage__13_TO_Stage__34$D_OUT[74]) ?
	       CASE_c_fifo_Stage__13_TO_Stage__34D_OUT_BITS__ETC__q15 :
	       IF_NOT_c_fifo_Stage__13_TO_Stage__34_first__12_ETC___d640 ;
  assign IF_NOT_d_l_entryVec_0_read__0_BIT_16_1_86_OR_N_ETC___d894 =
	     ((!d_l_entryVec_0[16] ||
	       !IF_d_l_entryVec_0_read__0_BIT_16_1_THEN_d_l_en_ETC___d874) &&
	      d_l_entryVec_1[16] &&
	      IF_d_l_entryVec_1_read__9_BIT_16_0_THEN_d_l_en_ETC___d870) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_d_l_entryVec_0_read__0_BIT_16_1_86_OR_N_ETC___d928 =
	     ((!d_l_entryVec_0[16] ||
	       !IF_d_l_entryVec_0_read__0_BIT_16_1_THEN_d_l_en_ETC___d874) &&
	      d_l_entryVec_1[16] &&
	      IF_d_l_entryVec_1_read__9_BIT_16_0_THEN_d_l_en_ETC___d870) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d288 =
	     ((!r_l_entryVec_0[5] ||
	       !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d269) &&
	      r_l_entryVec_1[5] &&
	      IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d265) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d336 =
	     ((!r_l_entryVec_0[5] ||
	       !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d319) &&
	      r_l_entryVec_1[5] &&
	      IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d317) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d375 =
	     ((!r_l_entryVec_0[5] ||
	       !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d359) &&
	      r_l_entryVec_1[5] &&
	      IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d357) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d677 =
	     ((!r_l_entryVec_0[5] ||
	       !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d665) &&
	      r_l_entryVec_1[5] &&
	      IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d662) ?
	       2'd1 :
	       2'd0 ;
  assign IF_c_fifo_Stage__0_TO_Stage__13_first__10_BIT__ETC___d181 =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[298] ?
	       -c_fifo_Stage__0_TO_Stage__13$D_OUT[298:267] :
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[298:267] ;
  assign IF_c_fifo_Stage__0_TO_Stage__13_first__10_BIT__ETC___d185 =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[128] ?
	       -c_fifo_Stage__0_TO_Stage__13$D_OUT[128:97] :
	       c_fifo_Stage__0_TO_Stage__13$D_OUT[128:97] ;
  assign IF_c_fifo_Stage__13_TO_Stage__34_first__12_BIT_ETC___d619 =
	     x__h17296 * x__h17306 ;
  assign IF_c_fifo_Stage__13_TO_Stage__34_first__12_BIT_ETC___d630 =
	     c_fifo_Stage__13_TO_Stage__34$D_OUT[233] ?
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[73:42] :
	       div$peek ;
  assign IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d803 =
	     (c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd0) ?
	       SEL_ARR_d_amem_outData_0_read__92_d_amem_outDa_ETC___d801 :
	       c_fifo_Stage__47_TO_Stage__53$D_OUT[136:105] ;
  assign IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d806 =
	     IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d803 >>
	     x__h19234 |
	     ~(32'hFFFFFFFF >> x__h19234) &
	     {32{IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d803[31]}} ;
  assign IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d823 =
	     (c_fifo_Stage__47_TO_Stage__53$D_OUT[140] &&
	      !c_fifo_Stage__47_TO_Stage__53$D_OUT[5] &&
	      (c_fifo_Stage__47_TO_Stage__53$D_OUT[74] ||
	       c_fifo_Stage__47_TO_Stage__53$D_OUT[73])) ?
	       { 16'd0,
		 c_fifo_Stage__47_TO_Stage__53D_OUT_BITS_102_T_ETC__q3[13:0],
		 2'd0 } :
	       CASE_c_fifo_Stage__47_TO_Stage__53D_OUT_BITS__ETC__q6 ;
  assign IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC__q4 =
	     IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d806[7:0] ;
  assign IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC__q5 =
	     IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d806[15:0] ;
  assign IF_d_l_entryVec_0_read__0_BIT_16_1_THEN_d_l_en_ETC___d874 =
	     d_l_entryVec_0[15:0] ==
	     c_fifo_Stage__34_TO_Stage__47$D_OUT[86:71] ;
  assign IF_d_l_entryVec_1_read__9_BIT_16_0_THEN_d_l_en_ETC___d870 =
	     d_l_entryVec_1[15:0] ==
	     c_fifo_Stage__34_TO_Stage__47$D_OUT[86:71] ;
  assign IF_d_l_entryVec_2_read__7_BIT_16_8_THEN_d_l_en_ETC___d866 =
	     d_l_entryVec_2[15:0] ==
	     c_fifo_Stage__34_TO_Stage__47$D_OUT[86:71] ;
  assign IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d269 =
	     r_l_entryVec_0[4:0] ==
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] ;
  assign IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d319 =
	     r_l_entryVec_0[4:0] ==
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[19:15] ;
  assign IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d359 =
	     r_l_entryVec_0[4:0] ==
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[24:20] ;
  assign IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d665 =
	     r_l_entryVec_0[4:0] ==
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[79:75] ;
  assign IF_r_l_entryVec_1_read__2_BIT_5_3_AND_r_l_entr_ETC___d304 =
	     (r_l_entryVec_1[5] && r_l_entryVec_0[5] && !r_l_entryVec_2[5]) ?
	       2'd2 :
	       ((r_l_entryVec_0[5] && !r_l_entryVec_1[5]) ? 2'd1 : 2'd0) ;
  assign IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d265 =
	     r_l_entryVec_1[4:0] ==
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] ;
  assign IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d317 =
	     r_l_entryVec_1[4:0] ==
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[19:15] ;
  assign IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d357 =
	     r_l_entryVec_1[4:0] ==
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[24:20] ;
  assign IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d662 =
	     r_l_entryVec_1[4:0] ==
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[79:75] ;
  assign IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d447 =
	     x__h14776 == 2'd0 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] !=
	     5'd0 &&
	     (SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0110011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0010011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0000011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b1101111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b1100111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0110111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0010111) &&
	     NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_I_ETC___d445 ;
  assign IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d450 =
	     x__h14776 == 2'd1 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] !=
	     5'd0 &&
	     (SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0110011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0010011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0000011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b1101111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b1100111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0110111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0010111) &&
	     NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_I_ETC___d445 ;
  assign IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d452 =
	     x__h14776 == 2'd2 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] !=
	     5'd0 &&
	     (SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0110011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0010011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0000011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b1101111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b1100111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0110111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0010111) &&
	     NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_I_ETC___d445 ;
  assign IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_entr_ETC___d454 =
	     x__h14776 == 2'd3 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] !=
	     5'd0 &&
	     (SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0110011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0010011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0000011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b1101111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b1100111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0110111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0010111) &&
	     NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_I_ETC___d445 ;
  assign IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d261 =
	     r_l_entryVec_2[4:0] ==
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] ;
  assign IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d315 =
	     r_l_entryVec_2[4:0] ==
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[19:15] ;
  assign IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d355 =
	     r_l_entryVec_2[4:0] ==
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[24:20] ;
  assign IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d659 =
	     r_l_entryVec_2[4:0] ==
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[79:75] ;
  assign IF_r_l_entryVec_3_read__8_BIT_5_9_AND_IF_r_l_e_ETC___d308 =
	     (r_l_entryVec_3[5] &&
	      IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d257 ||
	      r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d272) ?
	       CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d295 :
	       r_l_entryVec_3[5] && r_l_entryVec_2[5] && r_l_entryVec_1[5] &&
	       r_l_entryVec_0[5] ||
	       CASE_IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_ETC___d306 ;
  assign IF_r_l_entryVec_3_read__8_BIT_5_9_AND_IF_r_l_e_ETC___d493 =
	     (r_l_entryVec_3[5] &&
	      IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d257 ||
	      r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d272) ?
	       SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d490 :
	       (NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_r_ETC___d342 ?
		  SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d491 :
		  2'd0) ;
  assign IF_r_l_entryVec_3_read__8_BIT_5_9_AND_IF_r_l_e_ETC___d708 =
	     (r_l_entryVec_3[5] &&
	      IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d656 ||
	      r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d693) ?
	       SEL_ARR_r_l_lockVec_0_held_first__95_EQ_IF_c_f_ETC___d707 :
	       NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_r_ETC___d342 ;
  assign IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d257 =
	     r_l_entryVec_3[4:0] ==
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] ;
  assign IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d656 =
	     r_l_entryVec_3[4:0] ==
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[79:75] ;
  assign NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d380 =
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b0110011 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b1100011 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b0100011 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b1100111 ||
	     ((r_l_entryVec_3[5] &&
	       r_l_entryVec_3[4:0] ==
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[24:20] ||
	       r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d362) ?
		SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d378 :
		NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_r_ETC___d342) ;
  assign NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d417 =
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] !=
	     5'd0 &&
	     (SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0110011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0010011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0000011 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b1101111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b1100111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0110111 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	      7'b0010111) &&
	     (r_l_entryVec_3[5] &&
	      IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d257 ||
	      r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d272) ;
  assign NOT_SEL_ARR_i_amem_outData_0_read__19_i_amem_o_ETC___d508 =
	     { SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] !=
	       5'd0 &&
	       (SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b0110011 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b0010011 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b0000011 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b1101111 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b1100111 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b0110111 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b0010111),
	       b__h15777,
	       { {3{SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q17[12]}},
		 SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q17 },
	       { {11{SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q18[20]}},
		 SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q18 },
	       c_fifo_Start_TO_Stage__0_first__28_BITS_18_TO__ETC___d506 } ;
  assign NOT_c_fifo_Stage__34_TO_Stage__47_first__44_BI_ETC___d903 =
	     !c_fifo_Stage__34_TO_Stage__47$D_OUT[3] ||
	     ((d_l_entryVec_3[16] &&
	       d_l_entryVec_3[15:0] ==
	       c_fifo_Stage__34_TO_Stage__47$D_OUT[86:71] ||
	       d_l_entryVec_2_read__7_BIT_16_8_AND_IF_d_l_ent_ETC___d877) ?
		SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d897 :
		NOT_d_l_entryVec_3_read__5_BIT_16_6_98_OR_NOT__ETC___d901) ;
  assign NOT_d_l_entryVec_1_read__9_BIT_16_0_83_OR_NOT__ETC___d892 =
	     (!d_l_entryVec_1[16] ||
	      !IF_d_l_entryVec_1_read__9_BIT_16_0_THEN_d_l_en_ETC___d870) &&
	     (!d_l_entryVec_0[16] ||
	      !IF_d_l_entryVec_0_read__0_BIT_16_1_THEN_d_l_en_ETC___d874) &&
	     d_l_entryVec_2[16] &&
	     IF_d_l_entryVec_2_read__7_BIT_16_8_THEN_d_l_en_ETC___d866 ;
  assign NOT_d_l_entryVec_1_read__9_BIT_16_0_83_OR_NOT__ETC___d926 =
	     (!d_l_entryVec_1[16] ||
	      !IF_d_l_entryVec_1_read__9_BIT_16_0_THEN_d_l_en_ETC___d870) &&
	     (!d_l_entryVec_0[16] ||
	      !IF_d_l_entryVec_0_read__0_BIT_16_1_THEN_d_l_en_ETC___d874) &&
	     d_l_entryVec_2[16] &&
	     IF_d_l_entryVec_2_read__7_BIT_16_8_THEN_d_l_en_ETC___d866 ;
  assign NOT_d_l_entryVec_2_read__7_BIT_16_8_80_OR_NOT__ETC___d890 =
	     (!d_l_entryVec_2[16] ||
	      !IF_d_l_entryVec_2_read__7_BIT_16_8_THEN_d_l_en_ETC___d866) &&
	     (!d_l_entryVec_1[16] ||
	      !IF_d_l_entryVec_1_read__9_BIT_16_0_THEN_d_l_en_ETC___d870) &&
	     (!d_l_entryVec_0[16] ||
	      !IF_d_l_entryVec_0_read__0_BIT_16_1_THEN_d_l_en_ETC___d874) ;
  assign NOT_d_l_entryVec_2_read__7_BIT_16_8_80_OR_NOT__ETC___d924 =
	     (!d_l_entryVec_2[16] ||
	      !IF_d_l_entryVec_2_read__7_BIT_16_8_THEN_d_l_en_ETC___d866) &&
	     (!d_l_entryVec_1[16] ||
	      !IF_d_l_entryVec_1_read__9_BIT_16_0_THEN_d_l_en_ETC___d870) &&
	     (!d_l_entryVec_0[16] ||
	      !IF_d_l_entryVec_0_read__0_BIT_16_1_THEN_d_l_en_ETC___d874) ;
  assign NOT_d_l_entryVec_3_read__5_BIT_16_6_98_OR_NOT__ETC___d901 =
	     !d_l_entryVec_3[16] || !d_l_entryVec_2[16] ||
	     !d_l_entryVec_1[16] ||
	     !d_l_entryVec_0[16] ;
  assign NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d286 =
	     (!r_l_entryVec_1[5] ||
	      !IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d265) &&
	     (!r_l_entryVec_0[5] ||
	      !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d269) &&
	     r_l_entryVec_2[5] &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d261 ;
  assign NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d334 =
	     (!r_l_entryVec_1[5] ||
	      !IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d317) &&
	     (!r_l_entryVec_0[5] ||
	      !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d319) &&
	     r_l_entryVec_2[5] &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d315 ;
  assign NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d373 =
	     (!r_l_entryVec_1[5] ||
	      !IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d357) &&
	     (!r_l_entryVec_0[5] ||
	      !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d359) &&
	     r_l_entryVec_2[5] &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d355 ;
  assign NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d674 =
	     (!r_l_entryVec_1[5] ||
	      !IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d662) &&
	     (!r_l_entryVec_0[5] ||
	      !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d665) &&
	     r_l_entryVec_2[5] &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d659 ;
  assign NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d284 =
	     (!r_l_entryVec_2[5] ||
	      !IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d261) &&
	     (!r_l_entryVec_1[5] ||
	      !IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d265) &&
	     (!r_l_entryVec_0[5] ||
	      !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d269) ;
  assign NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d332 =
	     (!r_l_entryVec_2[5] ||
	      !IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d315) &&
	     (!r_l_entryVec_1[5] ||
	      !IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d317) &&
	     (!r_l_entryVec_0[5] ||
	      !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d319) ;
  assign NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d371 =
	     (!r_l_entryVec_2[5] ||
	      !IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d355) &&
	     (!r_l_entryVec_1[5] ||
	      !IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d357) &&
	     (!r_l_entryVec_0[5] ||
	      !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d359) ;
  assign NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d669 =
	     (!r_l_entryVec_2[5] ||
	      !IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d659) &&
	     (!r_l_entryVec_1[5] ||
	      !IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d662) &&
	     (!r_l_entryVec_0[5] ||
	      !IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d665) ;
  assign NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_I_ETC___d445 =
	     (!r_l_entryVec_3[5] ||
	      !IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d257) &&
	     NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d284 &&
	     NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_r_ETC___d342 ;
  assign NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_I_ETC___d685 =
	     (!r_l_entryVec_3[5] ||
	      !IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d656) &&
	     NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d669 ||
	     CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d684 ;
  assign NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_r_ETC___d342 =
	     !r_l_entryVec_3[5] || !r_l_entryVec_2[5] || !r_l_entryVec_1[5] ||
	     !r_l_entryVec_0[5] ;
  assign SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d344 =
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	     7'b1101111 ||
	     ((r_l_entryVec_3[5] &&
	       r_l_entryVec_3[4:0] ==
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[19:15] ||
	       r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d322) ?
		SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d339 :
		NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_r_ETC___d342) ;
  assign SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d386 =
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] ==
	     5'd0 ||
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b0110011 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b0010011 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b0000011 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b1101111 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b1100111 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b0110111 &&
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	     7'b0010111 ||
	     IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d257 ||
	     IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d261 ||
	     IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d265 ||
	     IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d269 ||
	     NOT_r_l_entryVec_3_read__8_BIT_5_9_99_OR_NOT_r_ETC___d342 ;
  assign SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d499 =
	     { SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	       7'b1100111,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] !=
	       5'd0 &&
	       (SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b0110011 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b0010011 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b0000011 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b1101111 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b1100111 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b0110111 ||
		SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
		7'b0010111),
	       IF_r_l_entryVec_3_read__8_BIT_5_9_AND_IF_r_l_e_ETC___d493,
	       { {4{SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q13[11]}},
		 SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q13 },
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7],
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	       7'b0000011,
	       c_fifo_Start_TO_Stage__0$D_OUT[2:0] } ;
  assign SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q13 =
	     SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[31:20] ;
  assign SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q16 =
	     { SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[31:25],
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] } ;
  assign SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q17 =
	     { SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[31],
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[7],
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[30:25],
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:8],
	       1'd0 } ;
  assign SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q18 =
	     { SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[31],
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[19:12],
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[20],
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[30:21],
	       1'd0 } ;
  assign SEXT_c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_18_ETC__q12 =
	     { {16{c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_184_TO_ETC__q9[15]}},
	       c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_184_TO_ETC__q9 } +
	     { {2{c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_216_TO__ETC__q11[29]}},
	       c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_216_TO__ETC__q11 } ;
  assign _dfoo25 =
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[86:84] == 3'd7 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd1 ||
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[139:137] == 3'd7 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd0 ;
  assign _dfoo27 =
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[86:84] == 3'd6 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd1 ||
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[139:137] == 3'd6 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd0 ;
  assign _dfoo29 =
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[86:84] == 3'd5 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd1 ||
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[139:137] == 3'd5 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd0 ;
  assign _dfoo31 =
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[86:84] == 3'd4 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd1 ||
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[139:137] == 3'd4 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd0 ;
  assign _dfoo33 =
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[86:84] == 3'd3 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd1 ||
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[139:137] == 3'd3 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd0 ;
  assign _dfoo35 =
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[86:84] == 3'd2 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd1 ||
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[139:137] == 3'd2 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd0 ;
  assign _dfoo37 =
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[86:84] == 3'd1 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd1 ||
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[139:137] == 3'd1 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd0 ;
  assign _dfoo39 =
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[86:84] == 3'd0 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd1 ||
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[139:137] == 3'd0 &&
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[4:3] == 2'd0 ;
  assign _dfoo41 =
	     c_fifo_Stage__34_TO_Stage__47$D_OUT[3] ||
	     c_fifo_Stage__34_TO_Stage__47$D_OUT[95] ;
  assign b__h15777 =
	     { SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[31:12],
	       12'd0 } ;
  assign c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_184_TO_ETC__q9 =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[184:169] ;
  assign c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_216_TO_ETC__q10 =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[216:185] ;
  assign c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_216_TO__ETC__q11 =
	     c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_216_TO_ETC__q10[31:2] ;
  assign c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_232_TO_ETC__q1 =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[232:217] ;
  assign c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_232_TO__ETC__q2 =
	     c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_232_TO_ETC__q1[15:2] ;
  assign c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_282_TO_ETC__q7 =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[282:267] +
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[56:41] ;
  assign c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_282_TO__ETC__q8 =
	     c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_282_TO_ETC__q7[15:2] ;
  assign c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132 =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[184:169] + 16'd1 ;
  assign c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d152 =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[184:169] +
	     { {2{c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_232_TO__ETC__q2[13]}},
	       c_fifo_Stage__0_TO_Stage__13D_OUT_BITS_232_TO__ETC__q2 } ;
  assign c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d149 =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[298:267] ==
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[128:97] ;
  assign c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d157 =
	     (c_fifo_Stage__0_TO_Stage__13$D_OUT[298:267] ^ 32'h80000000) <
	     (c_fifo_Stage__0_TO_Stage__13$D_OUT[128:97] ^ 32'h80000000) ;
  assign c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d162 =
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[298:267] <
	     c_fifo_Stage__0_TO_Stage__13$D_OUT[128:97] ;
  assign c_fifo_Stage__0_TO_Stage__13_i_notFull__18_AND_ETC___d310 =
	     c_fifo_Stage__0_TO_Stage__13$FULL_N &&
	     (SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[11:7] ==
	      5'd0 ||
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	      7'b0110011 &&
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	      7'b0010011 &&
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	      7'b0000011 &&
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	      7'b1101111 &&
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	      7'b1100111 &&
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	      7'b0110111 &&
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] !=
	      7'b0010111 ||
	      IF_r_l_entryVec_3_read__8_BIT_5_9_AND_IF_r_l_e_ETC___d308) ;
  assign c_fifo_Stage__13_TO_Stage__34D_OUT_BITS_299_T_ETC__q14 =
	     c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] ;
  assign c_fifo_Stage__13_TO_Stage__34_first__12_BITS_1_ETC___d546 =
	     c_fifo_Stage__13_TO_Stage__34$D_OUT[184:153] +
	     c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] ;
  assign c_fifo_Stage__13_TO_Stage__34_first__12_BITS_1_ETC___d549 =
	     c_fifo_Stage__13_TO_Stage__34$D_OUT[107:76] +
	     c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] ;
  assign c_fifo_Stage__13_TO_Stage__34_first__12_BITS_2_ETC___d596 =
	     c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] &
	     c_fifo_Stage__13_TO_Stage__34$D_OUT[232:201] ;
  assign c_fifo_Stage__34_TO_Stage__47_first__44_BIT_3__ETC___d933 =
	     c_fifo_Stage__34_TO_Stage__47$D_OUT[3] ||
	     !c_fifo_Stage__34_TO_Stage__47$D_OUT[95] ||
	     ((d_l_entryVec_3[16] &&
	       d_l_entryVec_3[15:0] ==
	       c_fifo_Stage__34_TO_Stage__47$D_OUT[86:71] ||
	       d_l_entryVec_2_read__7_BIT_16_8_AND_IF_d_l_ent_ETC___d915) ?
		SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d931 :
		NOT_d_l_entryVec_3_read__5_BIT_16_6_98_OR_NOT__ETC___d901) ;
  assign c_fifo_Stage__34_TO_Stage__47_i_notFull__11_AN_ETC___d529 =
	     c_fifo_Stage__34_TO_Stage__47$FULL_N &&
	     (c_fifo_Stage__13_TO_Stage__34$D_OUT[233] ||
	      div$RDY_checkHandle) &&
	     (c_fifo_Stage__13_TO_Stage__34$D_OUT[233] || div$RDY_resp) &&
	     (c_fifo_Stage__13_TO_Stage__34$D_OUT[152] ||
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[267] ||
	      !c_fifo_Stage__13_TO_Stage__34$D_OUT[41] ||
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[233] ||
	      div$RDY_peek) ;
  assign c_fifo_Stage__47_TO_Stage__53D_OUT_BITS_102_T_ETC__q3 =
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[102:87] + 16'd1 ;
  assign c_fifo_Stage__47_TO_Stage__53_first__48_BIT_14_ETC___d830 =
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[140] &&
	     (r_l_entryVec_3[5] &&
	      IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d656 ||
	      r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d693) ;
  assign c_fifo_Start_TO_Stage__0_first__28_BITS_18_TO__ETC___d506 =
	     { c_fifo_Start_TO_Stage__0$D_OUT[18:3],
	       { {20{SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q13[11]}},
		 SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC__q13 },
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	       7'b0110111,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[14:12],
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	       7'b0100011,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	       7'b0010011,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230 ==
	       32'h0000006F,
	       SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[6:0] ==
	       7'b1101111,
	       IF_NOT_SEL_ARR_i_amem_outData_0_read__19_i_ame_ETC___d502 } ;
  assign d_amem_head_47_PLUS_1___d938 = d_amem_head + 3'd1 ;
  assign d_l_entryVec_2_read__7_BIT_16_8_AND_IF_d_l_ent_ETC___d877 =
	     d_l_entryVec_2[16] &&
	     IF_d_l_entryVec_2_read__7_BIT_16_8_THEN_d_l_en_ETC___d866 ||
	     d_l_entryVec_1[16] &&
	     IF_d_l_entryVec_1_read__9_BIT_16_0_THEN_d_l_en_ETC___d870 ||
	     d_l_entryVec_0[16] &&
	     IF_d_l_entryVec_0_read__0_BIT_16_1_THEN_d_l_en_ETC___d874 ;
  assign d_l_entryVec_2_read__7_BIT_16_8_AND_IF_d_l_ent_ETC___d915 =
	     d_l_entryVec_2[16] &&
	     IF_d_l_entryVec_2_read__7_BIT_16_8_THEN_d_l_en_ETC___d866 ||
	     d_l_entryVec_1[16] &&
	     IF_d_l_entryVec_1_read__9_BIT_16_0_THEN_d_l_en_ETC___d870 ||
	     d_l_entryVec_0[16] &&
	     IF_d_l_entryVec_0_read__0_BIT_16_1_THEN_d_l_en_ETC___d874 ;
  assign r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d272 =
	     r_l_entryVec_2[5] &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d261 ||
	     r_l_entryVec_1[5] &&
	     IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d265 ||
	     r_l_entryVec_0[5] &&
	     IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d269 ;
  assign r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d322 =
	     r_l_entryVec_2[5] &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d315 ||
	     r_l_entryVec_1[5] &&
	     IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d317 ||
	     r_l_entryVec_0[5] &&
	     IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d319 ;
  assign r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d362 =
	     r_l_entryVec_2[5] &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d355 ||
	     r_l_entryVec_1[5] &&
	     IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d357 ||
	     r_l_entryVec_0[5] &&
	     IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d359 ;
  assign r_l_entryVec_2_read__0_BIT_5_1_AND_IF_r_l_entr_ETC___d693 =
	     r_l_entryVec_2[5] &&
	     IF_r_l_entryVec_2_read__0_BIT_5_1_THEN_r_l_ent_ETC___d659 ||
	     r_l_entryVec_1[5] &&
	     IF_r_l_entryVec_1_read__2_BIT_5_3_THEN_r_l_ent_ETC___d662 ||
	     r_l_entryVec_0[5] &&
	     IF_r_l_entryVec_0_read__3_BIT_5_4_THEN_r_l_ent_ETC___d665 ;
  assign r_l_lockVec_0_held_first__95_EQ_IF_c_fifo_Stag_ETC___d699 =
	     r_l_lockVec_0_held$D_OUT ==
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[71:70] ;
  assign r_l_lockVec_1_held_first__00_EQ_IF_c_fifo_Stag_ETC___d701 =
	     r_l_lockVec_1_held$D_OUT ==
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[71:70] ;
  assign r_l_lockVec_2_held_first__02_EQ_IF_c_fifo_Stag_ETC___d703 =
	     r_l_lockVec_2_held$D_OUT ==
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[71:70] ;
  assign r_l_lockVec_3_held_first__04_EQ_IF_c_fifo_Stag_ETC___d705 =
	     r_l_lockVec_3_held$D_OUT ==
	     c_fifo_Stage__47_TO_Stage__53$D_OUT[71:70] ;
  assign x__h13394 =
	     (NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d332 &&
	      r_l_entryVec_3[5] &&
	      r_l_entryVec_3[4:0] ==
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[19:15]) ?
	       2'd3 :
	       (NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d334 ?
		  2'd2 :
		  IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d336) ;
  assign x__h13954 =
	     (NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d371 &&
	      r_l_entryVec_3[5] &&
	      r_l_entryVec_3[4:0] ==
	      SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230[24:20]) ?
	       2'd3 :
	       (NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d373 ?
		  2'd2 :
		  IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d375) ;
  assign x__h14721 =
	     (NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d284 &&
	      r_l_entryVec_3[5] &&
	      IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d257) ?
	       2'd3 :
	       (NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d286 ?
		  2'd2 :
		  IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d288) ;
  assign x__h14776 =
	     (r_l_entryVec_2[5] && r_l_entryVec_1[5] && r_l_entryVec_0[5] &&
	      !r_l_entryVec_3[5]) ?
	       2'd3 :
	       IF_r_l_entryVec_1_read__2_BIT_5_3_AND_r_l_entr_ETC___d304 ;
  assign x__h17296 =
	     c_fifo_Stage__13_TO_Stage__34$D_OUT[299] ?
	       -c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] :
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] ;
  assign x__h17306 =
	     c_fifo_Stage__13_TO_Stage__34$D_OUT[139] ?
	       -c_fifo_Stage__13_TO_Stage__34$D_OUT[139:108] :
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[139:108] ;
  assign x__h17921 =
	     (NOT_r_l_entryVec_2_read__0_BIT_5_1_74_OR_NOT_I_ETC___d669 &&
	      r_l_entryVec_3[5] &&
	      IF_r_l_entryVec_3_read__8_BIT_5_9_THEN_r_l_ent_ETC___d656) ?
	       2'd3 :
	       (NOT_r_l_entryVec_1_read__2_BIT_5_3_77_OR_NOT_I_ETC___d674 ?
		  2'd2 :
		  IF_NOT_r_l_entryVec_0_read__3_BIT_5_4_80_OR_NO_ETC___d677) ;
  assign x__h19234 = { c_fifo_Stage__47_TO_Stage__53$D_OUT[104:103], 3'd0 } ;
  assign x__h20454 =
	     (NOT_d_l_entryVec_2_read__7_BIT_16_8_80_OR_NOT__ETC___d890 &&
	      d_l_entryVec_3[16] &&
	      d_l_entryVec_3[15:0] ==
	      c_fifo_Stage__34_TO_Stage__47$D_OUT[86:71]) ?
	       2'd3 :
	       (NOT_d_l_entryVec_1_read__9_BIT_16_0_83_OR_NOT__ETC___d892 ?
		  2'd2 :
		  IF_NOT_d_l_entryVec_0_read__0_BIT_16_1_86_OR_N_ETC___d894) ;
  assign x__h21022 =
	     (NOT_d_l_entryVec_2_read__7_BIT_16_8_80_OR_NOT__ETC___d924 &&
	      d_l_entryVec_3[16] &&
	      d_l_entryVec_3[15:0] ==
	      c_fifo_Stage__34_TO_Stage__47$D_OUT[86:71]) ?
	       2'd3 :
	       (NOT_d_l_entryVec_1_read__9_BIT_16_0_83_OR_NOT__ETC___d926 ?
		  2'd2 :
		  IF_NOT_d_l_entryVec_0_read__0_BIT_16_1_86_OR_N_ETC___d928) ;
  assign x__h21440 = { c_fifo_Stage__34_TO_Stage__47$D_OUT[116], 1'd0 } ;
  assign x__h21535 = { c_fifo_Stage__34_TO_Stage__47$D_OUT[116:115], 3'd0 } ;
  always@(c_fifo_Stage__34_TO_Stage__47$D_OUT or x__h21440)
  begin
    case (c_fifo_Stage__34_TO_Stage__47$D_OUT[98:96])
      3'd0:
	  x__h21333 = 4'b0001 << c_fifo_Stage__34_TO_Stage__47$D_OUT[116:115];
      3'd1: x__h21333 = 4'b0011 << x__h21440;
      default: x__h21333 = 4'b1111;
    endcase
  end
  always@(c_fifo_Start_TO_Stage__0$D_OUT or
	  i_amem_outData_0 or
	  i_amem_outData_1 or
	  i_amem_outData_2 or
	  i_amem_outData_3 or
	  i_amem_outData_4 or
	  i_amem_outData_5 or i_amem_outData_6 or i_amem_outData_7)
  begin
    case (c_fifo_Start_TO_Stage__0$D_OUT[21:19])
      3'd0:
	  SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230 =
	      i_amem_outData_0;
      3'd1:
	  SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230 =
	      i_amem_outData_1;
      3'd2:
	  SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230 =
	      i_amem_outData_2;
      3'd3:
	  SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230 =
	      i_amem_outData_3;
      3'd4:
	  SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230 =
	      i_amem_outData_4;
      3'd5:
	  SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230 =
	      i_amem_outData_5;
      3'd6:
	  SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230 =
	      i_amem_outData_6;
      3'd7:
	  SEL_ARR_i_amem_outData_0_read__19_i_amem_outDa_ETC___d230 =
	      i_amem_outData_7;
    endcase
  end
  always@(x__h13394 or
	  r_l_lockVec_0_held$EMPTY_N or
	  r_l_lockVec_1_held$EMPTY_N or
	  r_l_lockVec_2_held$EMPTY_N or r_l_lockVec_3_held$EMPTY_N)
  begin
    case (x__h13394)
      2'd0:
	  SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d339 =
	      !r_l_lockVec_0_held$EMPTY_N;
      2'd1:
	  SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d339 =
	      !r_l_lockVec_1_held$EMPTY_N;
      2'd2:
	  SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d339 =
	      !r_l_lockVec_2_held$EMPTY_N;
      2'd3:
	  SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d339 =
	      !r_l_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(x__h14721 or
	  r_l_lockVec_0_held$FULL_N or
	  r_l_lockVec_1_held$FULL_N or
	  r_l_lockVec_2_held$FULL_N or r_l_lockVec_3_held$FULL_N)
  begin
    case (x__h14721)
      2'd0:
	  CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d295 =
	      r_l_lockVec_0_held$FULL_N;
      2'd1:
	  CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d295 =
	      r_l_lockVec_1_held$FULL_N;
      2'd2:
	  CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d295 =
	      r_l_lockVec_2_held$FULL_N;
      2'd3:
	  CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d295 =
	      r_l_lockVec_3_held$FULL_N;
    endcase
  end
  always@(x__h14776 or
	  r_l_lockVec_0_held$FULL_N or
	  r_l_lockVec_1_held$FULL_N or
	  r_l_lockVec_2_held$FULL_N or r_l_lockVec_3_held$FULL_N)
  begin
    case (x__h14776)
      2'd0:
	  CASE_IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_ETC___d306 =
	      r_l_lockVec_0_held$FULL_N;
      2'd1:
	  CASE_IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_ETC___d306 =
	      r_l_lockVec_1_held$FULL_N;
      2'd2:
	  CASE_IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_ETC___d306 =
	      r_l_lockVec_2_held$FULL_N;
      2'd3:
	  CASE_IF_r_l_entryVec_2_read__0_BIT_5_1_AND_r_l_ETC___d306 =
	      r_l_lockVec_3_held$FULL_N;
    endcase
  end
  always@(x__h13954 or
	  r_l_lockVec_0_held$EMPTY_N or
	  r_l_lockVec_1_held$EMPTY_N or
	  r_l_lockVec_2_held$EMPTY_N or r_l_lockVec_3_held$EMPTY_N)
  begin
    case (x__h13954)
      2'd0:
	  SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d378 =
	      !r_l_lockVec_0_held$EMPTY_N;
      2'd1:
	  SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d378 =
	      !r_l_lockVec_1_held$EMPTY_N;
      2'd2:
	  SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d378 =
	      !r_l_lockVec_2_held$EMPTY_N;
      2'd3:
	  SEL_ARR_NOT_r_l_lockVec_0_held_notEmpty__1_2_N_ETC___d378 =
	      !r_l_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(x__h17921 or
	  r_l_lockVec_0_held_first__95_EQ_IF_c_fifo_Stag_ETC___d699 or
	  r_l_lockVec_1_held_first__00_EQ_IF_c_fifo_Stag_ETC___d701 or
	  r_l_lockVec_2_held_first__02_EQ_IF_c_fifo_Stag_ETC___d703 or
	  r_l_lockVec_3_held_first__04_EQ_IF_c_fifo_Stag_ETC___d705)
  begin
    case (x__h17921)
      2'd0:
	  SEL_ARR_r_l_lockVec_0_held_first__95_EQ_IF_c_f_ETC___d707 =
	      r_l_lockVec_0_held_first__95_EQ_IF_c_fifo_Stag_ETC___d699;
      2'd1:
	  SEL_ARR_r_l_lockVec_0_held_first__95_EQ_IF_c_f_ETC___d707 =
	      r_l_lockVec_1_held_first__00_EQ_IF_c_fifo_Stag_ETC___d701;
      2'd2:
	  SEL_ARR_r_l_lockVec_0_held_first__95_EQ_IF_c_f_ETC___d707 =
	      r_l_lockVec_2_held_first__02_EQ_IF_c_fifo_Stag_ETC___d703;
      2'd3:
	  SEL_ARR_r_l_lockVec_0_held_first__95_EQ_IF_c_f_ETC___d707 =
	      r_l_lockVec_3_held_first__04_EQ_IF_c_fifo_Stag_ETC___d705;
    endcase
  end
  always@(x__h17921 or
	  r_l_lockVec_0_held$EMPTY_N or
	  r_l_lockVec_1_held$EMPTY_N or
	  r_l_lockVec_2_held$EMPTY_N or r_l_lockVec_3_held$EMPTY_N)
  begin
    case (x__h17921)
      2'd0:
	  CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d684 =
	      r_l_lockVec_0_held$EMPTY_N;
      2'd1:
	  CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d684 =
	      r_l_lockVec_1_held$EMPTY_N;
      2'd2:
	  CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d684 =
	      r_l_lockVec_2_held$EMPTY_N;
      2'd3:
	  CASE_IF_NOT_r_l_entryVec_2_read__0_BIT_5_1_74__ETC___d684 =
	      r_l_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(c_fifo_Stage__47_TO_Stage__53$D_OUT or
	  d_amem_valid_0 or
	  d_amem_valid_1 or
	  d_amem_valid_2 or
	  d_amem_valid_3 or
	  d_amem_valid_4 or
	  d_amem_valid_5 or d_amem_valid_6 or d_amem_valid_7)
  begin
    case (c_fifo_Stage__47_TO_Stage__53$D_OUT[86:84])
      3'd0:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d724 =
	      d_amem_valid_0;
      3'd1:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d724 =
	      d_amem_valid_1;
      3'd2:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d724 =
	      d_amem_valid_2;
      3'd3:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d724 =
	      d_amem_valid_3;
      3'd4:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d724 =
	      d_amem_valid_4;
      3'd5:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d724 =
	      d_amem_valid_5;
      3'd6:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d724 =
	      d_amem_valid_6;
      3'd7:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d724 =
	      d_amem_valid_7;
    endcase
  end
  always@(c_fifo_Stage__47_TO_Stage__53$D_OUT or
	  d_amem_outData_0 or
	  d_amem_outData_1 or
	  d_amem_outData_2 or
	  d_amem_outData_3 or
	  d_amem_outData_4 or
	  d_amem_outData_5 or d_amem_outData_6 or d_amem_outData_7)
  begin
    case (c_fifo_Stage__47_TO_Stage__53$D_OUT[139:137])
      3'd0:
	  SEL_ARR_d_amem_outData_0_read__92_d_amem_outDa_ETC___d801 =
	      d_amem_outData_0;
      3'd1:
	  SEL_ARR_d_amem_outData_0_read__92_d_amem_outDa_ETC___d801 =
	      d_amem_outData_1;
      3'd2:
	  SEL_ARR_d_amem_outData_0_read__92_d_amem_outDa_ETC___d801 =
	      d_amem_outData_2;
      3'd3:
	  SEL_ARR_d_amem_outData_0_read__92_d_amem_outDa_ETC___d801 =
	      d_amem_outData_3;
      3'd4:
	  SEL_ARR_d_amem_outData_0_read__92_d_amem_outDa_ETC___d801 =
	      d_amem_outData_4;
      3'd5:
	  SEL_ARR_d_amem_outData_0_read__92_d_amem_outDa_ETC___d801 =
	      d_amem_outData_5;
      3'd6:
	  SEL_ARR_d_amem_outData_0_read__92_d_amem_outDa_ETC___d801 =
	      d_amem_outData_6;
      3'd7:
	  SEL_ARR_d_amem_outData_0_read__92_d_amem_outDa_ETC___d801 =
	      d_amem_outData_7;
    endcase
  end
  always@(c_fifo_Stage__47_TO_Stage__53$D_OUT or
	  IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC__q4 or
	  IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC__q5 or
	  IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d803 or
	  IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d806)
  begin
    case (c_fifo_Stage__47_TO_Stage__53$D_OUT[83:81])
      3'd0:
	  CASE_c_fifo_Stage__47_TO_Stage__53D_OUT_BITS__ETC__q6 =
	      { {24{IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC__q4[7]}},
		IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC__q4 };
      3'd1:
	  CASE_c_fifo_Stage__47_TO_Stage__53D_OUT_BITS__ETC__q6 =
	      { {16{IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC__q5[15]}},
		IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC__q5 };
      3'd2:
	  CASE_c_fifo_Stage__47_TO_Stage__53D_OUT_BITS__ETC__q6 =
	      IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d803;
      3'd4:
	  CASE_c_fifo_Stage__47_TO_Stage__53D_OUT_BITS__ETC__q6 =
	      { 24'd0,
		IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d806[7:0] };
      3'd5:
	  CASE_c_fifo_Stage__47_TO_Stage__53D_OUT_BITS__ETC__q6 =
	      { 16'd0,
		IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d806[15:0] };
      default: CASE_c_fifo_Stage__47_TO_Stage__53D_OUT_BITS__ETC__q6 = 32'd0;
    endcase
  end
  always@(d_amem_head or
	  d_amem_valid_0 or
	  d_amem_valid_1 or
	  d_amem_valid_2 or
	  d_amem_valid_3 or
	  d_amem_valid_4 or
	  d_amem_valid_5 or d_amem_valid_6 or d_amem_valid_7)
  begin
    case (d_amem_head)
      3'd0:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848 =
	      d_amem_valid_0;
      3'd1:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848 =
	      d_amem_valid_1;
      3'd2:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848 =
	      d_amem_valid_2;
      3'd3:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848 =
	      d_amem_valid_3;
      3'd4:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848 =
	      d_amem_valid_4;
      3'd5:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848 =
	      d_amem_valid_5;
      3'd6:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848 =
	      d_amem_valid_6;
      3'd7:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d848 =
	      d_amem_valid_7;
    endcase
  end
  always@(x__h20454 or
	  d_l_lockVec_0_held$EMPTY_N or
	  d_l_lockVec_1_held$EMPTY_N or
	  d_l_lockVec_2_held$EMPTY_N or d_l_lockVec_3_held$EMPTY_N)
  begin
    case (x__h20454)
      2'd0:
	  SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d897 =
	      !d_l_lockVec_0_held$EMPTY_N;
      2'd1:
	  SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d897 =
	      !d_l_lockVec_1_held$EMPTY_N;
      2'd2:
	  SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d897 =
	      !d_l_lockVec_2_held$EMPTY_N;
      2'd3:
	  SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d897 =
	      !d_l_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(x__h21022 or
	  d_l_lockVec_0_held$EMPTY_N or
	  d_l_lockVec_1_held$EMPTY_N or
	  d_l_lockVec_2_held$EMPTY_N or d_l_lockVec_3_held$EMPTY_N)
  begin
    case (x__h21022)
      2'd0:
	  SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d931 =
	      !d_l_lockVec_0_held$EMPTY_N;
      2'd1:
	  SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d931 =
	      !d_l_lockVec_1_held$EMPTY_N;
      2'd2:
	  SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d931 =
	      !d_l_lockVec_2_held$EMPTY_N;
      2'd3:
	  SEL_ARR_NOT_d_l_lockVec_0_held_notEmpty__8_9_N_ETC___d931 =
	      !d_l_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(i_amem_head or
	  i_amem_valid_0 or
	  i_amem_valid_1 or
	  i_amem_valid_2 or
	  i_amem_valid_3 or
	  i_amem_valid_4 or
	  i_amem_valid_5 or i_amem_valid_6 or i_amem_valid_7)
  begin
    case (i_amem_head)
      3'd0:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968 =
	      i_amem_valid_0;
      3'd1:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968 =
	      i_amem_valid_1;
      3'd2:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968 =
	      i_amem_valid_2;
      3'd3:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968 =
	      i_amem_valid_3;
      3'd4:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968 =
	      i_amem_valid_4;
      3'd5:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968 =
	      i_amem_valid_5;
      3'd6:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968 =
	      i_amem_valid_6;
      3'd7:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d968 =
	      i_amem_valid_7;
    endcase
  end
  always@(c_fifo_Stage__0_TO_Stage__13$D_OUT or
	  c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132 or
	  c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d149 or
	  c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d152 or
	  c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d157 or
	  c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d162)
  begin
    case (c_fifo_Stage__0_TO_Stage__13$D_OUT[135:133])
      3'd0:
	  IF_c_fifo_Stage__0_TO_Stage__13_first__10_BITS_ETC___d171 =
	      c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d149 ?
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d152 :
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132;
      3'd1:
	  IF_c_fifo_Stage__0_TO_Stage__13_first__10_BITS_ETC___d171 =
	      c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d149 ?
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132 :
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d152;
      3'd4:
	  IF_c_fifo_Stage__0_TO_Stage__13_first__10_BITS_ETC___d171 =
	      c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d157 ?
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d152 :
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132;
      3'd5:
	  IF_c_fifo_Stage__0_TO_Stage__13_first__10_BITS_ETC___d171 =
	      c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d157 ?
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132 :
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d152;
      3'd6:
	  IF_c_fifo_Stage__0_TO_Stage__13_first__10_BITS_ETC___d171 =
	      c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d162 ?
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d152 :
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132;
      3'd7:
	  IF_c_fifo_Stage__0_TO_Stage__13_first__10_BITS_ETC___d171 =
	      c_fifo_Stage__0_TO_Stage__13_first__10_BITS_29_ETC___d162 ?
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132 :
		c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d152;
      default: IF_c_fifo_Stage__0_TO_Stage__13_first__10_BITS_ETC___d171 =
		   c_fifo_Stage__0_TO_Stage__13_first__10_BITS_18_ETC___d132;
    endcase
  end
  always@(x__h14721 or
	  r_l_lockVec_0_nextId or
	  r_l_lockVec_1_nextId or
	  r_l_lockVec_2_nextId or r_l_lockVec_3_nextId)
  begin
    case (x__h14721)
      2'd0:
	  SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d490 =
	      r_l_lockVec_0_nextId;
      2'd1:
	  SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d490 =
	      r_l_lockVec_1_nextId;
      2'd2:
	  SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d490 =
	      r_l_lockVec_2_nextId;
      2'd3:
	  SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d490 =
	      r_l_lockVec_3_nextId;
    endcase
  end
  always@(x__h14776 or
	  r_l_lockVec_0_nextId or
	  r_l_lockVec_1_nextId or
	  r_l_lockVec_2_nextId or r_l_lockVec_3_nextId)
  begin
    case (x__h14776)
      2'd0:
	  SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d491 =
	      r_l_lockVec_0_nextId;
      2'd1:
	  SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d491 =
	      r_l_lockVec_1_nextId;
      2'd2:
	  SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d491 =
	      r_l_lockVec_2_nextId;
      2'd3:
	  SEL_ARR_r_l_lockVec_0_nextId_25_r_l_lockVec_1__ETC___d491 =
	      r_l_lockVec_3_nextId;
    endcase
  end
  always@(c_fifo_Stage__13_TO_Stage__34$D_OUT or
	  c_fifo_Stage__13_TO_Stage__34_first__12_BITS_2_ETC___d596 or
	  c_fifo_Stage__13_TO_Stage__34D_OUT_BITS_299_T_ETC__q14)
  begin
    case (c_fifo_Stage__13_TO_Stage__34$D_OUT[151:149])
      3'd0:
	  CASE_c_fifo_Stage__13_TO_Stage__34D_OUT_BITS__ETC__q15 =
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[75] ?
		c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] -
		c_fifo_Stage__13_TO_Stage__34$D_OUT[232:201] :
		c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] +
		c_fifo_Stage__13_TO_Stage__34$D_OUT[232:201];
      3'd1:
	  CASE_c_fifo_Stage__13_TO_Stage__34D_OUT_BITS__ETC__q15 =
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] <<
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[205:201];
      3'd2:
	  CASE_c_fifo_Stage__13_TO_Stage__34D_OUT_BITS__ETC__q15 =
	      ((c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] ^ 32'h80000000) <
	       (c_fifo_Stage__13_TO_Stage__34$D_OUT[232:201] ^
		32'h80000000)) ?
		32'd1 :
		32'd0;
      3'd3:
	  CASE_c_fifo_Stage__13_TO_Stage__34D_OUT_BITS__ETC__q15 =
	      (c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] <
	       c_fifo_Stage__13_TO_Stage__34$D_OUT[232:201]) ?
		32'd1 :
		32'd0;
      3'd4:
	  CASE_c_fifo_Stage__13_TO_Stage__34D_OUT_BITS__ETC__q15 =
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] ^
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[232:201];
      3'd5:
	  CASE_c_fifo_Stage__13_TO_Stage__34D_OUT_BITS__ETC__q15 =
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[75] ?
		c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] >>
		c_fifo_Stage__13_TO_Stage__34$D_OUT[205:201] |
		~(32'hFFFFFFFF >>
		  c_fifo_Stage__13_TO_Stage__34$D_OUT[205:201]) &
		{32{c_fifo_Stage__13_TO_Stage__34D_OUT_BITS_299_T_ETC__q14[31]}} :
		c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] >>
		c_fifo_Stage__13_TO_Stage__34$D_OUT[205:201];
      3'd6:
	  CASE_c_fifo_Stage__13_TO_Stage__34D_OUT_BITS__ETC__q15 =
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[299:268] |
	      c_fifo_Stage__13_TO_Stage__34$D_OUT[232:201];
      3'd7:
	  CASE_c_fifo_Stage__13_TO_Stage__34D_OUT_BITS__ETC__q15 =
	      c_fifo_Stage__13_TO_Stage__34_first__12_BITS_2_ETC___d596;
    endcase
  end
  always@(c_fifo_Start_TO_Stage__0$D_OUT or
	  i_amem_valid_0 or
	  i_amem_valid_1 or
	  i_amem_valid_2 or
	  i_amem_valid_3 or
	  i_amem_valid_4 or
	  i_amem_valid_5 or i_amem_valid_6 or i_amem_valid_7)
  begin
    case (c_fifo_Start_TO_Stage__0$D_OUT[21:19])
      3'd0:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d397 =
	      i_amem_valid_0;
      3'd1:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d397 =
	      i_amem_valid_1;
      3'd2:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d397 =
	      i_amem_valid_2;
      3'd3:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d397 =
	      i_amem_valid_3;
      3'd4:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d397 =
	      i_amem_valid_4;
      3'd5:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d397 =
	      i_amem_valid_5;
      3'd6:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d397 =
	      i_amem_valid_6;
      3'd7:
	  SEL_ARR_i_amem_valid_0_read__88_i_amem_valid_1_ETC___d397 =
	      i_amem_valid_7;
    endcase
  end
  always@(c_fifo_Stage__47_TO_Stage__53$D_OUT or
	  d_amem_valid_0 or
	  d_amem_valid_1 or
	  d_amem_valid_2 or
	  d_amem_valid_3 or
	  d_amem_valid_4 or
	  d_amem_valid_5 or d_amem_valid_6 or d_amem_valid_7)
  begin
    case (c_fifo_Stage__47_TO_Stage__53$D_OUT[139:137])
      3'd0:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d730 =
	      d_amem_valid_0;
      3'd1:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d730 =
	      d_amem_valid_1;
      3'd2:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d730 =
	      d_amem_valid_2;
      3'd3:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d730 =
	      d_amem_valid_3;
      3'd4:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d730 =
	      d_amem_valid_4;
      3'd5:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d730 =
	      d_amem_valid_5;
      3'd6:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d730 =
	      d_amem_valid_6;
      3'd7:
	  SEL_ARR_d_amem_valid_0_read__14_d_amem_valid_1_ETC___d730 =
	      d_amem_valid_7;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        c <= `BSV_ASSIGNMENT_DELAY 3'd0;
	c_busyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	c_div_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	c_dmem_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	c_imem_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	c_rf_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	d_amem_head <= `BSV_ASSIGNMENT_DELAY 3'd0;
	d_amem_nextData <= `BSV_ASSIGNMENT_DELAY 4'd2;
	d_amem_outData_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_amem_outData_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_amem_outData_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_amem_outData_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_amem_outData_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_amem_outData_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_amem_outData_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_amem_outData_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_amem_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_amem_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_amem_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_amem_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_amem_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_amem_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_amem_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_amem_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 17'd43690;
	d_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 17'd43690;
	d_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 17'd43690;
	d_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 17'd43690;
	d_l_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_l_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_l_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_l_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_l_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_l_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_l_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_l_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	i_amem_head <= `BSV_ASSIGNMENT_DELAY 3'd0;
	i_amem_nextData <= `BSV_ASSIGNMENT_DELAY 4'd2;
	i_amem_outData_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_amem_outData_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_amem_outData_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_amem_outData_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_amem_outData_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_amem_outData_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_amem_outData_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_amem_outData_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_amem_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_amem_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_amem_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_amem_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_amem_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_amem_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_amem_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_amem_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_l_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	i_l_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	r_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 6'd10;
	r_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 6'd10;
	r_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 6'd10;
	r_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 6'd10;
	r_l_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	r_l_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	r_l_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	r_l_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	r_l_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	r_l_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	r_l_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	r_l_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (c$EN) c <= `BSV_ASSIGNMENT_DELAY c$D_IN;
	if (c_busyReg$EN) c_busyReg <= `BSV_ASSIGNMENT_DELAY c_busyReg$D_IN;
	if (c_div_lock_region$EN)
	  c_div_lock_region <= `BSV_ASSIGNMENT_DELAY c_div_lock_region$D_IN;
	if (c_dmem_lock_region$EN)
	  c_dmem_lock_region <= `BSV_ASSIGNMENT_DELAY c_dmem_lock_region$D_IN;
	if (c_imem_lock_region$EN)
	  c_imem_lock_region <= `BSV_ASSIGNMENT_DELAY c_imem_lock_region$D_IN;
	if (c_rf_lock_region$EN)
	  c_rf_lock_region <= `BSV_ASSIGNMENT_DELAY c_rf_lock_region$D_IN;
	if (d_amem_head$EN)
	  d_amem_head <= `BSV_ASSIGNMENT_DELAY d_amem_head$D_IN;
	if (d_amem_nextData$EN)
	  d_amem_nextData <= `BSV_ASSIGNMENT_DELAY d_amem_nextData$D_IN;
	if (d_amem_outData_0$EN)
	  d_amem_outData_0 <= `BSV_ASSIGNMENT_DELAY d_amem_outData_0$D_IN;
	if (d_amem_outData_1$EN)
	  d_amem_outData_1 <= `BSV_ASSIGNMENT_DELAY d_amem_outData_1$D_IN;
	if (d_amem_outData_2$EN)
	  d_amem_outData_2 <= `BSV_ASSIGNMENT_DELAY d_amem_outData_2$D_IN;
	if (d_amem_outData_3$EN)
	  d_amem_outData_3 <= `BSV_ASSIGNMENT_DELAY d_amem_outData_3$D_IN;
	if (d_amem_outData_4$EN)
	  d_amem_outData_4 <= `BSV_ASSIGNMENT_DELAY d_amem_outData_4$D_IN;
	if (d_amem_outData_5$EN)
	  d_amem_outData_5 <= `BSV_ASSIGNMENT_DELAY d_amem_outData_5$D_IN;
	if (d_amem_outData_6$EN)
	  d_amem_outData_6 <= `BSV_ASSIGNMENT_DELAY d_amem_outData_6$D_IN;
	if (d_amem_outData_7$EN)
	  d_amem_outData_7 <= `BSV_ASSIGNMENT_DELAY d_amem_outData_7$D_IN;
	if (d_amem_valid_0$EN)
	  d_amem_valid_0 <= `BSV_ASSIGNMENT_DELAY d_amem_valid_0$D_IN;
	if (d_amem_valid_1$EN)
	  d_amem_valid_1 <= `BSV_ASSIGNMENT_DELAY d_amem_valid_1$D_IN;
	if (d_amem_valid_2$EN)
	  d_amem_valid_2 <= `BSV_ASSIGNMENT_DELAY d_amem_valid_2$D_IN;
	if (d_amem_valid_3$EN)
	  d_amem_valid_3 <= `BSV_ASSIGNMENT_DELAY d_amem_valid_3$D_IN;
	if (d_amem_valid_4$EN)
	  d_amem_valid_4 <= `BSV_ASSIGNMENT_DELAY d_amem_valid_4$D_IN;
	if (d_amem_valid_5$EN)
	  d_amem_valid_5 <= `BSV_ASSIGNMENT_DELAY d_amem_valid_5$D_IN;
	if (d_amem_valid_6$EN)
	  d_amem_valid_6 <= `BSV_ASSIGNMENT_DELAY d_amem_valid_6$D_IN;
	if (d_amem_valid_7$EN)
	  d_amem_valid_7 <= `BSV_ASSIGNMENT_DELAY d_amem_valid_7$D_IN;
	if (d_l_entryVec_0$EN)
	  d_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY d_l_entryVec_0$D_IN;
	if (d_l_entryVec_1$EN)
	  d_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY d_l_entryVec_1$D_IN;
	if (d_l_entryVec_2$EN)
	  d_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY d_l_entryVec_2$D_IN;
	if (d_l_entryVec_3$EN)
	  d_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY d_l_entryVec_3$D_IN;
	if (d_l_lockVec_0_cnt$EN)
	  d_l_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY d_l_lockVec_0_cnt$D_IN;
	if (d_l_lockVec_0_nextId$EN)
	  d_l_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY
	      d_l_lockVec_0_nextId$D_IN;
	if (d_l_lockVec_1_cnt$EN)
	  d_l_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY d_l_lockVec_1_cnt$D_IN;
	if (d_l_lockVec_1_nextId$EN)
	  d_l_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY
	      d_l_lockVec_1_nextId$D_IN;
	if (d_l_lockVec_2_cnt$EN)
	  d_l_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY d_l_lockVec_2_cnt$D_IN;
	if (d_l_lockVec_2_nextId$EN)
	  d_l_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY
	      d_l_lockVec_2_nextId$D_IN;
	if (d_l_lockVec_3_cnt$EN)
	  d_l_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY d_l_lockVec_3_cnt$D_IN;
	if (d_l_lockVec_3_nextId$EN)
	  d_l_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY
	      d_l_lockVec_3_nextId$D_IN;
	if (i_amem_head$EN)
	  i_amem_head <= `BSV_ASSIGNMENT_DELAY i_amem_head$D_IN;
	if (i_amem_nextData$EN)
	  i_amem_nextData <= `BSV_ASSIGNMENT_DELAY i_amem_nextData$D_IN;
	if (i_amem_outData_0$EN)
	  i_amem_outData_0 <= `BSV_ASSIGNMENT_DELAY i_amem_outData_0$D_IN;
	if (i_amem_outData_1$EN)
	  i_amem_outData_1 <= `BSV_ASSIGNMENT_DELAY i_amem_outData_1$D_IN;
	if (i_amem_outData_2$EN)
	  i_amem_outData_2 <= `BSV_ASSIGNMENT_DELAY i_amem_outData_2$D_IN;
	if (i_amem_outData_3$EN)
	  i_amem_outData_3 <= `BSV_ASSIGNMENT_DELAY i_amem_outData_3$D_IN;
	if (i_amem_outData_4$EN)
	  i_amem_outData_4 <= `BSV_ASSIGNMENT_DELAY i_amem_outData_4$D_IN;
	if (i_amem_outData_5$EN)
	  i_amem_outData_5 <= `BSV_ASSIGNMENT_DELAY i_amem_outData_5$D_IN;
	if (i_amem_outData_6$EN)
	  i_amem_outData_6 <= `BSV_ASSIGNMENT_DELAY i_amem_outData_6$D_IN;
	if (i_amem_outData_7$EN)
	  i_amem_outData_7 <= `BSV_ASSIGNMENT_DELAY i_amem_outData_7$D_IN;
	if (i_amem_valid_0$EN)
	  i_amem_valid_0 <= `BSV_ASSIGNMENT_DELAY i_amem_valid_0$D_IN;
	if (i_amem_valid_1$EN)
	  i_amem_valid_1 <= `BSV_ASSIGNMENT_DELAY i_amem_valid_1$D_IN;
	if (i_amem_valid_2$EN)
	  i_amem_valid_2 <= `BSV_ASSIGNMENT_DELAY i_amem_valid_2$D_IN;
	if (i_amem_valid_3$EN)
	  i_amem_valid_3 <= `BSV_ASSIGNMENT_DELAY i_amem_valid_3$D_IN;
	if (i_amem_valid_4$EN)
	  i_amem_valid_4 <= `BSV_ASSIGNMENT_DELAY i_amem_valid_4$D_IN;
	if (i_amem_valid_5$EN)
	  i_amem_valid_5 <= `BSV_ASSIGNMENT_DELAY i_amem_valid_5$D_IN;
	if (i_amem_valid_6$EN)
	  i_amem_valid_6 <= `BSV_ASSIGNMENT_DELAY i_amem_valid_6$D_IN;
	if (i_amem_valid_7$EN)
	  i_amem_valid_7 <= `BSV_ASSIGNMENT_DELAY i_amem_valid_7$D_IN;
	if (i_l_cnt$EN) i_l_cnt <= `BSV_ASSIGNMENT_DELAY i_l_cnt$D_IN;
	if (i_l_nextId$EN)
	  i_l_nextId <= `BSV_ASSIGNMENT_DELAY i_l_nextId$D_IN;
	if (r_l_entryVec_0$EN)
	  r_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY r_l_entryVec_0$D_IN;
	if (r_l_entryVec_1$EN)
	  r_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY r_l_entryVec_1$D_IN;
	if (r_l_entryVec_2$EN)
	  r_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY r_l_entryVec_2$D_IN;
	if (r_l_entryVec_3$EN)
	  r_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY r_l_entryVec_3$D_IN;
	if (r_l_lockVec_0_cnt$EN)
	  r_l_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY r_l_lockVec_0_cnt$D_IN;
	if (r_l_lockVec_0_nextId$EN)
	  r_l_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY
	      r_l_lockVec_0_nextId$D_IN;
	if (r_l_lockVec_1_cnt$EN)
	  r_l_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY r_l_lockVec_1_cnt$D_IN;
	if (r_l_lockVec_1_nextId$EN)
	  r_l_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY
	      r_l_lockVec_1_nextId$D_IN;
	if (r_l_lockVec_2_cnt$EN)
	  r_l_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY r_l_lockVec_2_cnt$D_IN;
	if (r_l_lockVec_2_nextId$EN)
	  r_l_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY
	      r_l_lockVec_2_nextId$D_IN;
	if (r_l_lockVec_3_cnt$EN)
	  r_l_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY r_l_lockVec_3_cnt$D_IN;
	if (r_l_lockVec_3_nextId$EN)
	  r_l_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY
	      r_l_lockVec_3_nextId$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    c = 3'h2;
    c_busyReg = 1'h0;
    c_div_lock_region = 1'h0;
    c_dmem_lock_region = 1'h0;
    c_imem_lock_region = 1'h0;
    c_rf_lock_region = 1'h0;
    d_amem_head = 3'h2;
    d_amem_nextData = 4'hA;
    d_amem_outData_0 = 32'hAAAAAAAA;
    d_amem_outData_1 = 32'hAAAAAAAA;
    d_amem_outData_2 = 32'hAAAAAAAA;
    d_amem_outData_3 = 32'hAAAAAAAA;
    d_amem_outData_4 = 32'hAAAAAAAA;
    d_amem_outData_5 = 32'hAAAAAAAA;
    d_amem_outData_6 = 32'hAAAAAAAA;
    d_amem_outData_7 = 32'hAAAAAAAA;
    d_amem_valid_0 = 1'h0;
    d_amem_valid_1 = 1'h0;
    d_amem_valid_2 = 1'h0;
    d_amem_valid_3 = 1'h0;
    d_amem_valid_4 = 1'h0;
    d_amem_valid_5 = 1'h0;
    d_amem_valid_6 = 1'h0;
    d_amem_valid_7 = 1'h0;
    d_l_entryVec_0 = 17'h0AAAA;
    d_l_entryVec_1 = 17'h0AAAA;
    d_l_entryVec_2 = 17'h0AAAA;
    d_l_entryVec_3 = 17'h0AAAA;
    d_l_lockVec_0_cnt = 2'h2;
    d_l_lockVec_0_nextId = 2'h2;
    d_l_lockVec_1_cnt = 2'h2;
    d_l_lockVec_1_nextId = 2'h2;
    d_l_lockVec_2_cnt = 2'h2;
    d_l_lockVec_2_nextId = 2'h2;
    d_l_lockVec_3_cnt = 2'h2;
    d_l_lockVec_3_nextId = 2'h2;
    i_amem_head = 3'h2;
    i_amem_nextData = 4'hA;
    i_amem_outData_0 = 32'hAAAAAAAA;
    i_amem_outData_1 = 32'hAAAAAAAA;
    i_amem_outData_2 = 32'hAAAAAAAA;
    i_amem_outData_3 = 32'hAAAAAAAA;
    i_amem_outData_4 = 32'hAAAAAAAA;
    i_amem_outData_5 = 32'hAAAAAAAA;
    i_amem_outData_6 = 32'hAAAAAAAA;
    i_amem_outData_7 = 32'hAAAAAAAA;
    i_amem_valid_0 = 1'h0;
    i_amem_valid_1 = 1'h0;
    i_amem_valid_2 = 1'h0;
    i_amem_valid_3 = 1'h0;
    i_amem_valid_4 = 1'h0;
    i_amem_valid_5 = 1'h0;
    i_amem_valid_6 = 1'h0;
    i_amem_valid_7 = 1'h0;
    i_l_cnt = 2'h2;
    i_l_nextId = 2'h2;
    r_l_entryVec_0 = 6'h2A;
    r_l_entryVec_1 = 6'h2A;
    r_l_entryVec_2 = 6'h2A;
    r_l_entryVec_3 = 6'h2A;
    r_l_lockVec_0_cnt = 2'h2;
    r_l_lockVec_0_nextId = 2'h2;
    r_l_lockVec_1_cnt = 2'h2;
    r_l_lockVec_1_nextId = 2'h2;
    r_l_lockVec_2_cnt = 2'h2;
    r_l_lockVec_2_nextId = 2'h2;
    r_l_lockVec_3_cnt = 2'h2;
    r_l_lockVec_3_nextId = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_c_s_Stage__53_execute)
	$display("PC: %h",
		 $signed({ c_fifo_Stage__47_TO_Stage__53$D_OUT[100:87],
			   2'd0 }));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_c_s_Stage__53_execute)
	$display("INSN: %h",
		 $signed(c_fifo_Stage__47_TO_Stage__53$D_OUT[69:38]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_c_s_Stage__53_execute &&
	  c_fifo_Stage__47_TO_Stage__53$D_OUT[140])
	$display("Writing %d to r%d",
		 $signed((c_fifo_Stage__47_TO_Stage__53$D_OUT[140] &&
			  !c_fifo_Stage__47_TO_Stage__53$D_OUT[5] &&
			  !c_fifo_Stage__47_TO_Stage__53$D_OUT[74] &&
			  !c_fifo_Stage__47_TO_Stage__53$D_OUT[73]) ?
			   c_fifo_Stage__47_TO_Stage__53$D_OUT[37:6] :
			   IF_c_fifo_Stage__47_TO_Stage__53_first__48_BIT_ETC___d823),
		 $unsigned(c_fifo_Stage__47_TO_Stage__53$D_OUT[79:75]));
  end
  // synopsys translate_on
endmodule  // mkCircuit

