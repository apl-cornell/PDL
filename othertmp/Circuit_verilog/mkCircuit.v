//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// _inthg_req                     O     3 reg
// RDY__inthg_req                 O     1
// RDY__inthg_resp                O     1 reg
// _inthg_checkHandle             O     1
// RDY__inthg_checkHandle         O     1 reg
// _inthg_peek                    O     1 reg
// RDY__inthg_peek                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _inthg_req_counter             I    10
// _inthg_checkHandle_handle      I     3
// EN__inthg_resp                 I     1
// EN__inthg_req                  I     1
//
// Combinational paths from inputs to outputs:
//   _inthg_checkHandle_handle -> _inthg_checkHandle
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCircuit(CLK,
		 RST_N,

		 _inthg_req_counter,
		 EN__inthg_req,
		 _inthg_req,
		 RDY__inthg_req,

		 EN__inthg_resp,
		 RDY__inthg_resp,

		 _inthg_checkHandle_handle,
		 _inthg_checkHandle,
		 RDY__inthg_checkHandle,

		 _inthg_peek,
		 RDY__inthg_peek);
  input  CLK;
  input  RST_N;

  // actionvalue method _inthg_req
  input  [9 : 0] _inthg_req_counter;
  input  EN__inthg_req;
  output [2 : 0] _inthg_req;
  output RDY__inthg_req;

  // action method _inthg_resp
  input  EN__inthg_resp;
  output RDY__inthg_resp;

  // value method _inthg_checkHandle
  input  [2 : 0] _inthg_checkHandle_handle;
  output _inthg_checkHandle;
  output RDY__inthg_checkHandle;

  // value method _inthg_peek
  output _inthg_peek;
  output RDY__inthg_peek;

  // signals for module outputs
  wire [2 : 0] _inthg_req;
  wire RDY__inthg_checkHandle,
       RDY__inthg_peek,
       RDY__inthg_req,
       RDY__inthg_resp,
       _inthg_checkHandle,
       _inthg_peek;

  // inlined wires
  wire [12 : 0] hg_fifo__input__TO_Start_enq_data$wget;
  wire [3 : 0] f_amem_nextData_1$wget,
	       h_amem_nextData_1$wget,
	       w_amem_nextData_1$wget;
  wire h_amem_nextData_1$whas,
       h_l_resVec_0$whas,
       h_l_resVec_1$whas,
       h_l_resVec_2$whas,
       h_l_resVec_3$whas,
       hg_fifo__input__TO_Start_enq_data$whas;

  // register f_amem_head
  reg [2 : 0] f_amem_head;
  wire [2 : 0] f_amem_head$D_IN;
  wire f_amem_head$EN;

  // register f_amem_nextData
  reg [3 : 0] f_amem_nextData;
  wire [3 : 0] f_amem_nextData$D_IN;
  wire f_amem_nextData$EN;

  // register f_amem_outData_0
  reg [15 : 0] f_amem_outData_0;
  wire [15 : 0] f_amem_outData_0$D_IN;
  wire f_amem_outData_0$EN;

  // register f_amem_outData_1
  reg [15 : 0] f_amem_outData_1;
  wire [15 : 0] f_amem_outData_1$D_IN;
  wire f_amem_outData_1$EN;

  // register f_amem_outData_2
  reg [15 : 0] f_amem_outData_2;
  wire [15 : 0] f_amem_outData_2$D_IN;
  wire f_amem_outData_2$EN;

  // register f_amem_outData_3
  reg [15 : 0] f_amem_outData_3;
  wire [15 : 0] f_amem_outData_3$D_IN;
  wire f_amem_outData_3$EN;

  // register f_amem_outData_4
  reg [15 : 0] f_amem_outData_4;
  wire [15 : 0] f_amem_outData_4$D_IN;
  wire f_amem_outData_4$EN;

  // register f_amem_outData_5
  reg [15 : 0] f_amem_outData_5;
  wire [15 : 0] f_amem_outData_5$D_IN;
  wire f_amem_outData_5$EN;

  // register f_amem_outData_6
  reg [15 : 0] f_amem_outData_6;
  wire [15 : 0] f_amem_outData_6$D_IN;
  wire f_amem_outData_6$EN;

  // register f_amem_outData_7
  reg [15 : 0] f_amem_outData_7;
  wire [15 : 0] f_amem_outData_7$D_IN;
  wire f_amem_outData_7$EN;

  // register f_amem_valid_0
  reg f_amem_valid_0;
  wire f_amem_valid_0$D_IN, f_amem_valid_0$EN;

  // register f_amem_valid_1
  reg f_amem_valid_1;
  wire f_amem_valid_1$D_IN, f_amem_valid_1$EN;

  // register f_amem_valid_2
  reg f_amem_valid_2;
  wire f_amem_valid_2$D_IN, f_amem_valid_2$EN;

  // register f_amem_valid_3
  reg f_amem_valid_3;
  wire f_amem_valid_3$D_IN, f_amem_valid_3$EN;

  // register f_amem_valid_4
  reg f_amem_valid_4;
  wire f_amem_valid_4$D_IN, f_amem_valid_4$EN;

  // register f_amem_valid_5
  reg f_amem_valid_5;
  wire f_amem_valid_5$D_IN, f_amem_valid_5$EN;

  // register f_amem_valid_6
  reg f_amem_valid_6;
  wire f_amem_valid_6$D_IN, f_amem_valid_6$EN;

  // register f_amem_valid_7
  reg f_amem_valid_7;
  wire f_amem_valid_7$D_IN, f_amem_valid_7$EN;

  // register f_l_entryVec_0
  reg [10 : 0] f_l_entryVec_0;
  wire [10 : 0] f_l_entryVec_0$D_IN;
  wire f_l_entryVec_0$EN;

  // register f_l_entryVec_1
  reg [10 : 0] f_l_entryVec_1;
  wire [10 : 0] f_l_entryVec_1$D_IN;
  wire f_l_entryVec_1$EN;

  // register f_l_entryVec_2
  reg [10 : 0] f_l_entryVec_2;
  wire [10 : 0] f_l_entryVec_2$D_IN;
  wire f_l_entryVec_2$EN;

  // register f_l_entryVec_3
  reg [10 : 0] f_l_entryVec_3;
  wire [10 : 0] f_l_entryVec_3$D_IN;
  wire f_l_entryVec_3$EN;

  // register f_l_lockVec_0_cnt
  reg [1 : 0] f_l_lockVec_0_cnt;
  wire [1 : 0] f_l_lockVec_0_cnt$D_IN;
  wire f_l_lockVec_0_cnt$EN;

  // register f_l_lockVec_0_nextId
  reg [1 : 0] f_l_lockVec_0_nextId;
  wire [1 : 0] f_l_lockVec_0_nextId$D_IN;
  wire f_l_lockVec_0_nextId$EN;

  // register f_l_lockVec_1_cnt
  reg [1 : 0] f_l_lockVec_1_cnt;
  wire [1 : 0] f_l_lockVec_1_cnt$D_IN;
  wire f_l_lockVec_1_cnt$EN;

  // register f_l_lockVec_1_nextId
  reg [1 : 0] f_l_lockVec_1_nextId;
  wire [1 : 0] f_l_lockVec_1_nextId$D_IN;
  wire f_l_lockVec_1_nextId$EN;

  // register f_l_lockVec_2_cnt
  reg [1 : 0] f_l_lockVec_2_cnt;
  wire [1 : 0] f_l_lockVec_2_cnt$D_IN;
  wire f_l_lockVec_2_cnt$EN;

  // register f_l_lockVec_2_nextId
  reg [1 : 0] f_l_lockVec_2_nextId;
  wire [1 : 0] f_l_lockVec_2_nextId$D_IN;
  wire f_l_lockVec_2_nextId$EN;

  // register f_l_lockVec_3_cnt
  reg [1 : 0] f_l_lockVec_3_cnt;
  wire [1 : 0] f_l_lockVec_3_cnt$D_IN;
  wire f_l_lockVec_3_cnt$EN;

  // register f_l_lockVec_3_nextId
  reg [1 : 0] f_l_lockVec_3_nextId;
  wire [1 : 0] f_l_lockVec_3_nextId$D_IN;
  wire f_l_lockVec_3_nextId$EN;

  // register h_amem_head
  reg [2 : 0] h_amem_head;
  wire [2 : 0] h_amem_head$D_IN;
  wire h_amem_head$EN;

  // register h_amem_nextData
  reg [3 : 0] h_amem_nextData;
  wire [3 : 0] h_amem_nextData$D_IN;
  wire h_amem_nextData$EN;

  // register h_amem_outData_0
  reg [31 : 0] h_amem_outData_0;
  wire [31 : 0] h_amem_outData_0$D_IN;
  wire h_amem_outData_0$EN;

  // register h_amem_outData_1
  reg [31 : 0] h_amem_outData_1;
  wire [31 : 0] h_amem_outData_1$D_IN;
  wire h_amem_outData_1$EN;

  // register h_amem_outData_2
  reg [31 : 0] h_amem_outData_2;
  wire [31 : 0] h_amem_outData_2$D_IN;
  wire h_amem_outData_2$EN;

  // register h_amem_outData_3
  reg [31 : 0] h_amem_outData_3;
  wire [31 : 0] h_amem_outData_3$D_IN;
  wire h_amem_outData_3$EN;

  // register h_amem_outData_4
  reg [31 : 0] h_amem_outData_4;
  wire [31 : 0] h_amem_outData_4$D_IN;
  wire h_amem_outData_4$EN;

  // register h_amem_outData_5
  reg [31 : 0] h_amem_outData_5;
  wire [31 : 0] h_amem_outData_5$D_IN;
  wire h_amem_outData_5$EN;

  // register h_amem_outData_6
  reg [31 : 0] h_amem_outData_6;
  wire [31 : 0] h_amem_outData_6$D_IN;
  wire h_amem_outData_6$EN;

  // register h_amem_outData_7
  reg [31 : 0] h_amem_outData_7;
  wire [31 : 0] h_amem_outData_7$D_IN;
  wire h_amem_outData_7$EN;

  // register h_amem_valid_0
  reg h_amem_valid_0;
  wire h_amem_valid_0$D_IN, h_amem_valid_0$EN;

  // register h_amem_valid_1
  reg h_amem_valid_1;
  wire h_amem_valid_1$D_IN, h_amem_valid_1$EN;

  // register h_amem_valid_2
  reg h_amem_valid_2;
  wire h_amem_valid_2$D_IN, h_amem_valid_2$EN;

  // register h_amem_valid_3
  reg h_amem_valid_3;
  wire h_amem_valid_3$D_IN, h_amem_valid_3$EN;

  // register h_amem_valid_4
  reg h_amem_valid_4;
  wire h_amem_valid_4$D_IN, h_amem_valid_4$EN;

  // register h_amem_valid_5
  reg h_amem_valid_5;
  wire h_amem_valid_5$D_IN, h_amem_valid_5$EN;

  // register h_amem_valid_6
  reg h_amem_valid_6;
  wire h_amem_valid_6$D_IN, h_amem_valid_6$EN;

  // register h_amem_valid_7
  reg h_amem_valid_7;
  wire h_amem_valid_7$D_IN, h_amem_valid_7$EN;

  // register h_l_entryVec_0
  reg [10 : 0] h_l_entryVec_0;
  wire [10 : 0] h_l_entryVec_0$D_IN;
  wire h_l_entryVec_0$EN;

  // register h_l_entryVec_1
  reg [10 : 0] h_l_entryVec_1;
  wire [10 : 0] h_l_entryVec_1$D_IN;
  wire h_l_entryVec_1$EN;

  // register h_l_entryVec_2
  reg [10 : 0] h_l_entryVec_2;
  wire [10 : 0] h_l_entryVec_2$D_IN;
  wire h_l_entryVec_2$EN;

  // register h_l_entryVec_3
  reg [10 : 0] h_l_entryVec_3;
  wire [10 : 0] h_l_entryVec_3$D_IN;
  wire h_l_entryVec_3$EN;

  // register h_l_lockVec_0_cnt
  reg [1 : 0] h_l_lockVec_0_cnt;
  wire [1 : 0] h_l_lockVec_0_cnt$D_IN;
  wire h_l_lockVec_0_cnt$EN;

  // register h_l_lockVec_0_nextId
  reg [1 : 0] h_l_lockVec_0_nextId;
  wire [1 : 0] h_l_lockVec_0_nextId$D_IN;
  wire h_l_lockVec_0_nextId$EN;

  // register h_l_lockVec_1_cnt
  reg [1 : 0] h_l_lockVec_1_cnt;
  wire [1 : 0] h_l_lockVec_1_cnt$D_IN;
  wire h_l_lockVec_1_cnt$EN;

  // register h_l_lockVec_1_nextId
  reg [1 : 0] h_l_lockVec_1_nextId;
  wire [1 : 0] h_l_lockVec_1_nextId$D_IN;
  wire h_l_lockVec_1_nextId$EN;

  // register h_l_lockVec_2_cnt
  reg [1 : 0] h_l_lockVec_2_cnt;
  wire [1 : 0] h_l_lockVec_2_cnt$D_IN;
  wire h_l_lockVec_2_cnt$EN;

  // register h_l_lockVec_2_nextId
  reg [1 : 0] h_l_lockVec_2_nextId;
  wire [1 : 0] h_l_lockVec_2_nextId$D_IN;
  wire h_l_lockVec_2_nextId$EN;

  // register h_l_lockVec_3_cnt
  reg [1 : 0] h_l_lockVec_3_cnt;
  wire [1 : 0] h_l_lockVec_3_cnt$D_IN;
  wire h_l_lockVec_3_cnt$EN;

  // register h_l_lockVec_3_nextId
  reg [1 : 0] h_l_lockVec_3_nextId;
  wire [1 : 0] h_l_lockVec_3_nextId$D_IN;
  wire h_l_lockVec_3_nextId$EN;

  // register hg
  reg [2 : 0] hg;
  wire [2 : 0] hg$D_IN;
  wire hg$EN;

  // register hg_busyReg
  reg hg_busyReg;
  wire hg_busyReg$D_IN, hg_busyReg$EN;

  // register hg_feature_lock_region
  reg hg_feature_lock_region;
  wire hg_feature_lock_region$D_IN, hg_feature_lock_region$EN;

  // register hg_h_lock_region
  reg hg_h_lock_region;
  wire hg_h_lock_region$D_IN, hg_h_lock_region$EN;

  // register hg_weight_lock_region
  reg hg_weight_lock_region;
  wire hg_weight_lock_region$D_IN, hg_weight_lock_region$EN;

  // register w_amem_head
  reg [2 : 0] w_amem_head;
  wire [2 : 0] w_amem_head$D_IN;
  wire w_amem_head$EN;

  // register w_amem_nextData
  reg [3 : 0] w_amem_nextData;
  wire [3 : 0] w_amem_nextData$D_IN;
  wire w_amem_nextData$EN;

  // register w_amem_outData_0
  reg [31 : 0] w_amem_outData_0;
  wire [31 : 0] w_amem_outData_0$D_IN;
  wire w_amem_outData_0$EN;

  // register w_amem_outData_1
  reg [31 : 0] w_amem_outData_1;
  wire [31 : 0] w_amem_outData_1$D_IN;
  wire w_amem_outData_1$EN;

  // register w_amem_outData_2
  reg [31 : 0] w_amem_outData_2;
  wire [31 : 0] w_amem_outData_2$D_IN;
  wire w_amem_outData_2$EN;

  // register w_amem_outData_3
  reg [31 : 0] w_amem_outData_3;
  wire [31 : 0] w_amem_outData_3$D_IN;
  wire w_amem_outData_3$EN;

  // register w_amem_outData_4
  reg [31 : 0] w_amem_outData_4;
  wire [31 : 0] w_amem_outData_4$D_IN;
  wire w_amem_outData_4$EN;

  // register w_amem_outData_5
  reg [31 : 0] w_amem_outData_5;
  wire [31 : 0] w_amem_outData_5$D_IN;
  wire w_amem_outData_5$EN;

  // register w_amem_outData_6
  reg [31 : 0] w_amem_outData_6;
  wire [31 : 0] w_amem_outData_6$D_IN;
  wire w_amem_outData_6$EN;

  // register w_amem_outData_7
  reg [31 : 0] w_amem_outData_7;
  wire [31 : 0] w_amem_outData_7$D_IN;
  wire w_amem_outData_7$EN;

  // register w_amem_valid_0
  reg w_amem_valid_0;
  wire w_amem_valid_0$D_IN, w_amem_valid_0$EN;

  // register w_amem_valid_1
  reg w_amem_valid_1;
  wire w_amem_valid_1$D_IN, w_amem_valid_1$EN;

  // register w_amem_valid_2
  reg w_amem_valid_2;
  wire w_amem_valid_2$D_IN, w_amem_valid_2$EN;

  // register w_amem_valid_3
  reg w_amem_valid_3;
  wire w_amem_valid_3$D_IN, w_amem_valid_3$EN;

  // register w_amem_valid_4
  reg w_amem_valid_4;
  wire w_amem_valid_4$D_IN, w_amem_valid_4$EN;

  // register w_amem_valid_5
  reg w_amem_valid_5;
  wire w_amem_valid_5$D_IN, w_amem_valid_5$EN;

  // register w_amem_valid_6
  reg w_amem_valid_6;
  wire w_amem_valid_6$D_IN, w_amem_valid_6$EN;

  // register w_amem_valid_7
  reg w_amem_valid_7;
  wire w_amem_valid_7$D_IN, w_amem_valid_7$EN;

  // register w_l_entryVec_0
  reg [10 : 0] w_l_entryVec_0;
  wire [10 : 0] w_l_entryVec_0$D_IN;
  wire w_l_entryVec_0$EN;

  // register w_l_entryVec_1
  reg [10 : 0] w_l_entryVec_1;
  wire [10 : 0] w_l_entryVec_1$D_IN;
  wire w_l_entryVec_1$EN;

  // register w_l_entryVec_2
  reg [10 : 0] w_l_entryVec_2;
  wire [10 : 0] w_l_entryVec_2$D_IN;
  wire w_l_entryVec_2$EN;

  // register w_l_entryVec_3
  reg [10 : 0] w_l_entryVec_3;
  wire [10 : 0] w_l_entryVec_3$D_IN;
  wire w_l_entryVec_3$EN;

  // register w_l_lockVec_0_cnt
  reg [1 : 0] w_l_lockVec_0_cnt;
  wire [1 : 0] w_l_lockVec_0_cnt$D_IN;
  wire w_l_lockVec_0_cnt$EN;

  // register w_l_lockVec_0_nextId
  reg [1 : 0] w_l_lockVec_0_nextId;
  wire [1 : 0] w_l_lockVec_0_nextId$D_IN;
  wire w_l_lockVec_0_nextId$EN;

  // register w_l_lockVec_1_cnt
  reg [1 : 0] w_l_lockVec_1_cnt;
  wire [1 : 0] w_l_lockVec_1_cnt$D_IN;
  wire w_l_lockVec_1_cnt$EN;

  // register w_l_lockVec_1_nextId
  reg [1 : 0] w_l_lockVec_1_nextId;
  wire [1 : 0] w_l_lockVec_1_nextId$D_IN;
  wire w_l_lockVec_1_nextId$EN;

  // register w_l_lockVec_2_cnt
  reg [1 : 0] w_l_lockVec_2_cnt;
  wire [1 : 0] w_l_lockVec_2_cnt$D_IN;
  wire w_l_lockVec_2_cnt$EN;

  // register w_l_lockVec_2_nextId
  reg [1 : 0] w_l_lockVec_2_nextId;
  wire [1 : 0] w_l_lockVec_2_nextId$D_IN;
  wire w_l_lockVec_2_nextId$EN;

  // register w_l_lockVec_3_cnt
  reg [1 : 0] w_l_lockVec_3_cnt;
  wire [1 : 0] w_l_lockVec_3_cnt$D_IN;
  wire w_l_lockVec_3_cnt$EN;

  // register w_l_lockVec_3_nextId
  reg [1 : 0] w_l_lockVec_3_nextId;
  wire [1 : 0] w_l_lockVec_3_nextId$D_IN;
  wire w_l_lockVec_3_nextId$EN;

  // ports of submodule f_l_lockVec_0_held
  wire [1 : 0] f_l_lockVec_0_held$D_IN;
  wire f_l_lockVec_0_held$CLR,
       f_l_lockVec_0_held$DEQ,
       f_l_lockVec_0_held$EMPTY_N,
       f_l_lockVec_0_held$ENQ;

  // ports of submodule f_l_lockVec_1_held
  wire [1 : 0] f_l_lockVec_1_held$D_IN;
  wire f_l_lockVec_1_held$CLR,
       f_l_lockVec_1_held$DEQ,
       f_l_lockVec_1_held$EMPTY_N,
       f_l_lockVec_1_held$ENQ;

  // ports of submodule f_l_lockVec_2_held
  wire [1 : 0] f_l_lockVec_2_held$D_IN;
  wire f_l_lockVec_2_held$CLR,
       f_l_lockVec_2_held$DEQ,
       f_l_lockVec_2_held$EMPTY_N,
       f_l_lockVec_2_held$ENQ;

  // ports of submodule f_l_lockVec_3_held
  wire [1 : 0] f_l_lockVec_3_held$D_IN;
  wire f_l_lockVec_3_held$CLR,
       f_l_lockVec_3_held$DEQ,
       f_l_lockVec_3_held$EMPTY_N,
       f_l_lockVec_3_held$ENQ;

  // ports of submodule h_l_lockVec_0_held
  wire [1 : 0] h_l_lockVec_0_held$D_IN, h_l_lockVec_0_held$D_OUT;
  wire h_l_lockVec_0_held$CLR,
       h_l_lockVec_0_held$DEQ,
       h_l_lockVec_0_held$EMPTY_N,
       h_l_lockVec_0_held$ENQ,
       h_l_lockVec_0_held$FULL_N;

  // ports of submodule h_l_lockVec_1_held
  wire [1 : 0] h_l_lockVec_1_held$D_IN, h_l_lockVec_1_held$D_OUT;
  wire h_l_lockVec_1_held$CLR,
       h_l_lockVec_1_held$DEQ,
       h_l_lockVec_1_held$EMPTY_N,
       h_l_lockVec_1_held$ENQ,
       h_l_lockVec_1_held$FULL_N;

  // ports of submodule h_l_lockVec_2_held
  wire [1 : 0] h_l_lockVec_2_held$D_IN, h_l_lockVec_2_held$D_OUT;
  wire h_l_lockVec_2_held$CLR,
       h_l_lockVec_2_held$DEQ,
       h_l_lockVec_2_held$EMPTY_N,
       h_l_lockVec_2_held$ENQ,
       h_l_lockVec_2_held$FULL_N;

  // ports of submodule h_l_lockVec_3_held
  wire [1 : 0] h_l_lockVec_3_held$D_IN, h_l_lockVec_3_held$D_OUT;
  wire h_l_lockVec_3_held$CLR,
       h_l_lockVec_3_held$DEQ,
       h_l_lockVec_3_held$EMPTY_N,
       h_l_lockVec_3_held$ENQ,
       h_l_lockVec_3_held$FULL_N;

  // ports of submodule hg_fifo_Stage__1_TO_Stage__2
  wire [51 : 0] hg_fifo_Stage__1_TO_Stage__2$D_IN,
		hg_fifo_Stage__1_TO_Stage__2$D_OUT;
  wire hg_fifo_Stage__1_TO_Stage__2$CLR,
       hg_fifo_Stage__1_TO_Stage__2$DEQ,
       hg_fifo_Stage__1_TO_Stage__2$EMPTY_N,
       hg_fifo_Stage__1_TO_Stage__2$ENQ,
       hg_fifo_Stage__1_TO_Stage__2$FULL_N;

  // ports of submodule hg_fifo_Stage__2_TO_Stage__3
  wire [6 : 0] hg_fifo_Stage__2_TO_Stage__3$D_IN,
	       hg_fifo_Stage__2_TO_Stage__3$D_OUT;
  wire hg_fifo_Stage__2_TO_Stage__3$CLR,
       hg_fifo_Stage__2_TO_Stage__3$DEQ,
       hg_fifo_Stage__2_TO_Stage__3$EMPTY_N,
       hg_fifo_Stage__2_TO_Stage__3$ENQ,
       hg_fifo_Stage__2_TO_Stage__3$FULL_N;

  // ports of submodule hg_fifo_Stage__3_TO_Stage__5
  wire [3 : 0] hg_fifo_Stage__3_TO_Stage__5$D_IN,
	       hg_fifo_Stage__3_TO_Stage__5$D_OUT;
  wire hg_fifo_Stage__3_TO_Stage__5$CLR,
       hg_fifo_Stage__3_TO_Stage__5$DEQ,
       hg_fifo_Stage__3_TO_Stage__5$EMPTY_N,
       hg_fifo_Stage__3_TO_Stage__5$ENQ,
       hg_fifo_Stage__3_TO_Stage__5$FULL_N;

  // ports of submodule hg_fifo_Start_TO_Stage__1
  wire [9 : 0] hg_fifo_Start_TO_Stage__1$D_IN,
	       hg_fifo_Start_TO_Stage__1$D_OUT;
  wire hg_fifo_Start_TO_Stage__1$CLR,
       hg_fifo_Start_TO_Stage__1$DEQ,
       hg_fifo_Start_TO_Stage__1$EMPTY_N,
       hg_fifo_Start_TO_Stage__1$ENQ,
       hg_fifo_Start_TO_Stage__1$FULL_N;

  // ports of submodule hg_fifo_Start_TO_Stage__5
  wire [3 : 0] hg_fifo_Start_TO_Stage__5$D_IN,
	       hg_fifo_Start_TO_Stage__5$D_OUT;
  wire hg_fifo_Start_TO_Stage__5$CLR,
       hg_fifo_Start_TO_Stage__5$DEQ,
       hg_fifo_Start_TO_Stage__5$EMPTY_N,
       hg_fifo_Start_TO_Stage__5$ENQ,
       hg_fifo_Start_TO_Stage__5$FULL_N;

  // ports of submodule hg_fifo_Start_TO_Stage__5_1
  wire [3 : 0] hg_fifo_Start_TO_Stage__5_1$D_IN,
	       hg_fifo_Start_TO_Stage__5_1$D_OUT;
  wire hg_fifo_Start_TO_Stage__5_1$CLR,
       hg_fifo_Start_TO_Stage__5_1$DEQ,
       hg_fifo_Start_TO_Stage__5_1$EMPTY_N,
       hg_fifo_Start_TO_Stage__5_1$ENQ,
       hg_fifo_Start_TO_Stage__5_1$FULL_N;

  // ports of submodule hg_fifo__input__TO_Start_f
  wire [12 : 0] hg_fifo__input__TO_Start_f$D_IN,
		hg_fifo__input__TO_Start_f$D_OUT;
  wire hg_fifo__input__TO_Start_f$CLR,
       hg_fifo__input__TO_Start_f$DEQ,
       hg_fifo__input__TO_Start_f$EMPTY_N,
       hg_fifo__input__TO_Start_f$ENQ,
       hg_fifo__input__TO_Start_f$FULL_N;

  // ports of submodule hg_outputQueue
  wire [3 : 0] hg_outputQueue$D_IN, hg_outputQueue$D_OUT;
  wire hg_outputQueue$CLR,
       hg_outputQueue$DEQ,
       hg_outputQueue$EMPTY_N,
       hg_outputQueue$ENQ,
       hg_outputQueue$FULL_N;

  // ports of submodule tf_p
  wire [15 : 0] tf_p$DI, tf_p$DO;
  wire [9 : 0] tf_p$ADDR;
  wire [1 : 0] tf_p$WE;
  wire tf_p$EN;

  // ports of submodule th_p
  wire [31 : 0] th_p$DI, th_p$DO;
  wire [9 : 0] th_p$ADDR;
  wire [3 : 0] th_p$WE;
  wire th_p$EN;

  // ports of submodule tw_p
  wire [31 : 0] tw_p$DI, tw_p$DO;
  wire [9 : 0] tw_p$ADDR;
  wire [3 : 0] tw_p$WE;
  wire tw_p$EN;

  // ports of submodule w_l_lockVec_0_held
  wire [1 : 0] w_l_lockVec_0_held$D_IN;
  wire w_l_lockVec_0_held$CLR,
       w_l_lockVec_0_held$DEQ,
       w_l_lockVec_0_held$EMPTY_N,
       w_l_lockVec_0_held$ENQ;

  // ports of submodule w_l_lockVec_1_held
  wire [1 : 0] w_l_lockVec_1_held$D_IN;
  wire w_l_lockVec_1_held$CLR,
       w_l_lockVec_1_held$DEQ,
       w_l_lockVec_1_held$EMPTY_N,
       w_l_lockVec_1_held$ENQ;

  // ports of submodule w_l_lockVec_2_held
  wire [1 : 0] w_l_lockVec_2_held$D_IN;
  wire w_l_lockVec_2_held$CLR,
       w_l_lockVec_2_held$DEQ,
       w_l_lockVec_2_held$EMPTY_N,
       w_l_lockVec_2_held$ENQ;

  // ports of submodule w_l_lockVec_3_held
  wire [1 : 0] w_l_lockVec_3_held$D_IN;
  wire w_l_lockVec_3_held$CLR,
       w_l_lockVec_3_held$DEQ,
       w_l_lockVec_3_held$EMPTY_N,
       w_l_lockVec_3_held$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_h_l_freelock,
       CAN_FIRE_RL_h_l_freelock_1,
       CAN_FIRE_RL_h_l_freelock_2,
       CAN_FIRE_RL_h_l_freelock_3,
       CAN_FIRE_RL_hg_s_Stage__1_execute,
       WILL_FIRE_RL_hg_s_Stage__1_execute,
       WILL_FIRE_RL_hg_s_Stage__2_execute,
       WILL_FIRE_RL_hg_s_Stage__3_execute,
       WILL_FIRE_RL_hg_s_Stage__5_execute,
       WILL_FIRE_RL_hg_s_Start_execute;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_th_p$put_3__VAL_2;
  wire [12 : 0] MUX_hg_fifo__input__TO_Start_enq_data$wset_1__VAL_1,
		MUX_hg_fifo__input__TO_Start_enq_data$wset_1__VAL_2;
  wire [10 : 0] MUX_h_l_entryVec_0$write_1__VAL_1;
  wire MUX_f_amem_valid_0$write_1__SEL_1,
       MUX_f_amem_valid_0$write_1__SEL_2,
       MUX_f_amem_valid_1$write_1__SEL_1,
       MUX_f_amem_valid_1$write_1__SEL_2,
       MUX_f_amem_valid_2$write_1__SEL_1,
       MUX_f_amem_valid_2$write_1__SEL_2,
       MUX_f_amem_valid_3$write_1__SEL_1,
       MUX_f_amem_valid_3$write_1__SEL_2,
       MUX_f_amem_valid_4$write_1__SEL_1,
       MUX_f_amem_valid_4$write_1__SEL_2,
       MUX_f_amem_valid_5$write_1__SEL_1,
       MUX_f_amem_valid_5$write_1__SEL_2,
       MUX_f_amem_valid_6$write_1__SEL_1,
       MUX_f_amem_valid_6$write_1__SEL_2,
       MUX_f_amem_valid_7$write_1__SEL_1,
       MUX_f_amem_valid_7$write_1__SEL_2,
       MUX_h_amem_valid_0$write_1__SEL_1,
       MUX_h_amem_valid_0$write_1__SEL_2,
       MUX_h_amem_valid_0$write_1__SEL_3,
       MUX_h_amem_valid_1$write_1__SEL_1,
       MUX_h_amem_valid_1$write_1__SEL_2,
       MUX_h_amem_valid_1$write_1__SEL_3,
       MUX_h_amem_valid_2$write_1__SEL_1,
       MUX_h_amem_valid_2$write_1__SEL_2,
       MUX_h_amem_valid_2$write_1__SEL_3,
       MUX_h_amem_valid_3$write_1__SEL_1,
       MUX_h_amem_valid_3$write_1__SEL_2,
       MUX_h_amem_valid_3$write_1__SEL_3,
       MUX_h_amem_valid_4$write_1__SEL_1,
       MUX_h_amem_valid_4$write_1__SEL_2,
       MUX_h_amem_valid_4$write_1__SEL_3,
       MUX_h_amem_valid_5$write_1__SEL_1,
       MUX_h_amem_valid_5$write_1__SEL_2,
       MUX_h_amem_valid_5$write_1__SEL_3,
       MUX_h_amem_valid_6$write_1__SEL_1,
       MUX_h_amem_valid_6$write_1__SEL_2,
       MUX_h_amem_valid_6$write_1__SEL_3,
       MUX_h_amem_valid_7$write_1__SEL_1,
       MUX_h_amem_valid_7$write_1__SEL_2,
       MUX_h_amem_valid_7$write_1__SEL_3,
       MUX_h_l_entryVec_0$write_1__SEL_1,
       MUX_h_l_entryVec_1$write_1__SEL_1,
       MUX_h_l_entryVec_2$write_1__SEL_1,
       MUX_h_l_entryVec_3$write_1__SEL_1,
       MUX_hg_busyReg$write_1__SEL_1,
       MUX_hg_fifo__input__TO_Start_enq_data$wset_1__SEL_1,
       MUX_w_amem_valid_0$write_1__SEL_1,
       MUX_w_amem_valid_0$write_1__SEL_2,
       MUX_w_amem_valid_1$write_1__SEL_1,
       MUX_w_amem_valid_1$write_1__SEL_2,
       MUX_w_amem_valid_2$write_1__SEL_1,
       MUX_w_amem_valid_2$write_1__SEL_2,
       MUX_w_amem_valid_3$write_1__SEL_1,
       MUX_w_amem_valid_3$write_1__SEL_2,
       MUX_w_amem_valid_4$write_1__SEL_1,
       MUX_w_amem_valid_4$write_1__SEL_2,
       MUX_w_amem_valid_5$write_1__SEL_1,
       MUX_w_amem_valid_5$write_1__SEL_2,
       MUX_w_amem_valid_6$write_1__SEL_1,
       MUX_w_amem_valid_6$write_1__SEL_2,
       MUX_w_amem_valid_7$write_1__SEL_1,
       MUX_w_amem_valid_7$write_1__SEL_2;

  // remaining internal signals
  reg [31 : 0] SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232,
	       SEL_ARR_w_amem_outData_0_read__38_w_amem_outDa_ETC___d447;
  reg [15 : 0] SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297;
  reg [1 : 0] SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d433,
	      SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d434;
  reg CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d207,
      CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d328,
      CASE_IF_h_l_entryVec_2_read__33_BIT_10_34_AND__ETC___d338,
      SEL_ARR_NOT_f_l_lockVec_0_held_notEmpty__8_9_N_ETC___d511,
      SEL_ARR_NOT_h_l_lockVec_0_held_notEmpty__15_16_ETC___d352,
      SEL_ARR_NOT_w_l_lockVec_0_held_notEmpty__7_8_N_ETC___d551,
      SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d364,
      SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461,
      SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162,
      SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d213,
      SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d273,
      SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d376,
      SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464;
  wire [1 : 0] IF_NOT_f_l_entryVec_0_read__0_BIT_10_1_00_OR_N_ETC___d508,
	       IF_NOT_h_l_entryVec_0_read__17_BIT_10_18_85_OR_ETC___d200,
	       IF_NOT_h_l_entryVec_0_read__17_BIT_10_18_85_OR_ETC___d321,
	       IF_NOT_w_l_entryVec_0_read__9_BIT_10_0_40_OR_N_ETC___d548,
	       IF_h_l_entryVec_1_read__25_BIT_10_26_AND_h_l_e_ETC___d336,
	       IF_h_l_entryVec_3_read__41_BIT_10_42_AND_IF_h__ETC___d436,
	       x__h16133,
	       x__h17167,
	       x__h18821,
	       x__h20266,
	       x__h20788;
  wire IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d248,
       IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d253,
       IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d258,
       IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d263,
       IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d396,
       IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d398,
       IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d400,
       IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d402,
       IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d188,
       IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d305,
       IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d182,
       IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d303,
       IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d176,
       IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d301,
       IF_h_l_entryVec_3_read__41_BIT_10_42_AND_IF_h__ETC___d340,
       IF_h_l_entryVec_3_read__41_BIT_10_42_AND_IF_h__ETC___d353,
       IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d170,
       IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299,
       IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d365,
       IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d584,
       IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d590,
       IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d591,
       IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d596,
       NOT_f_l_entryVec_1_read__9_BIT_10_0_97_OR_NOT__ETC___d506,
       NOT_f_l_entryVec_2_read__7_BIT_10_8_94_OR_NOT__ETC___d504,
       NOT_h_l_entryVec_1_read__25_BIT_10_26_79_OR_NO_ETC___d197,
       NOT_h_l_entryVec_1_read__25_BIT_10_26_79_OR_NO_ETC___d319,
       NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_NO_ETC___d192,
       NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_NO_ETC___d317,
       NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d208,
       NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d349,
       NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423,
       NOT_hg_fifo__input__TO_Start_f_first__54_BITS__ETC___d517,
       NOT_hg_fifo__input__TO_Start_f_first__54_BITS__ETC___d557,
       NOT_w_l_entryVec_1_read__7_BIT_10_8_37_OR_NOT__ETC___d546,
       NOT_w_l_entryVec_2_read__5_BIT_10_6_34_OR_NOT__ETC___d544,
       f_l_entryVec_0_read__0_BITS_9_TO_0_87_EQ_hg_fi_ETC___d488,
       f_l_entryVec_1_read__9_BITS_9_TO_0_84_EQ_hg_fi_ETC___d485,
       f_l_entryVec_2_read__7_BITS_9_TO_0_81_EQ_hg_fi_ETC___d482,
       f_l_entryVec_2_read__7_BIT_10_8_AND_f_l_entryV_ETC___d491,
       h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d246,
       h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d308,
       hg_fifo_Start_TO_Stage__5_i_notFull__53_AND_hg_ETC___d476,
       hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456,
       w_l_entryVec_0_read__9_BITS_9_TO_0_27_EQ_hg_fi_ETC___d528,
       w_l_entryVec_1_read__7_BITS_9_TO_0_24_EQ_hg_fi_ETC___d525,
       w_l_entryVec_2_read__5_BITS_9_TO_0_21_EQ_hg_fi_ETC___d522,
       w_l_entryVec_2_read__5_BIT_10_6_AND_w_l_entryV_ETC___d531;

  // actionvalue method _inthg_req
  assign _inthg_req = hg ;
  assign RDY__inthg_req = !hg_busyReg && hg_fifo__input__TO_Start_f$FULL_N ;

  // action method _inthg_resp
  assign RDY__inthg_resp = hg_outputQueue$EMPTY_N ;

  // value method _inthg_checkHandle
  assign _inthg_checkHandle =
	     _inthg_checkHandle_handle == hg_outputQueue$D_OUT[3:1] ;
  assign RDY__inthg_checkHandle = hg_outputQueue$EMPTY_N ;

  // value method _inthg_peek
  assign _inthg_peek = hg_outputQueue$D_OUT[0] ;
  assign RDY__inthg_peek = hg_outputQueue$EMPTY_N ;

  // submodule f_l_lockVec_0_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) f_l_lockVec_0_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(f_l_lockVec_0_held$D_IN),
						 .ENQ(f_l_lockVec_0_held$ENQ),
						 .DEQ(f_l_lockVec_0_held$DEQ),
						 .CLR(f_l_lockVec_0_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(f_l_lockVec_0_held$EMPTY_N));

  // submodule f_l_lockVec_1_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) f_l_lockVec_1_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(f_l_lockVec_1_held$D_IN),
						 .ENQ(f_l_lockVec_1_held$ENQ),
						 .DEQ(f_l_lockVec_1_held$DEQ),
						 .CLR(f_l_lockVec_1_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(f_l_lockVec_1_held$EMPTY_N));

  // submodule f_l_lockVec_2_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) f_l_lockVec_2_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(f_l_lockVec_2_held$D_IN),
						 .ENQ(f_l_lockVec_2_held$ENQ),
						 .DEQ(f_l_lockVec_2_held$DEQ),
						 .CLR(f_l_lockVec_2_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(f_l_lockVec_2_held$EMPTY_N));

  // submodule f_l_lockVec_3_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) f_l_lockVec_3_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(f_l_lockVec_3_held$D_IN),
						 .ENQ(f_l_lockVec_3_held$ENQ),
						 .DEQ(f_l_lockVec_3_held$DEQ),
						 .CLR(f_l_lockVec_3_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(f_l_lockVec_3_held$EMPTY_N));

  // submodule h_l_lockVec_0_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) h_l_lockVec_0_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(h_l_lockVec_0_held$D_IN),
						 .ENQ(h_l_lockVec_0_held$ENQ),
						 .DEQ(h_l_lockVec_0_held$DEQ),
						 .CLR(h_l_lockVec_0_held$CLR),
						 .D_OUT(h_l_lockVec_0_held$D_OUT),
						 .FULL_N(h_l_lockVec_0_held$FULL_N),
						 .EMPTY_N(h_l_lockVec_0_held$EMPTY_N));

  // submodule h_l_lockVec_1_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) h_l_lockVec_1_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(h_l_lockVec_1_held$D_IN),
						 .ENQ(h_l_lockVec_1_held$ENQ),
						 .DEQ(h_l_lockVec_1_held$DEQ),
						 .CLR(h_l_lockVec_1_held$CLR),
						 .D_OUT(h_l_lockVec_1_held$D_OUT),
						 .FULL_N(h_l_lockVec_1_held$FULL_N),
						 .EMPTY_N(h_l_lockVec_1_held$EMPTY_N));

  // submodule h_l_lockVec_2_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) h_l_lockVec_2_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(h_l_lockVec_2_held$D_IN),
						 .ENQ(h_l_lockVec_2_held$ENQ),
						 .DEQ(h_l_lockVec_2_held$DEQ),
						 .CLR(h_l_lockVec_2_held$CLR),
						 .D_OUT(h_l_lockVec_2_held$D_OUT),
						 .FULL_N(h_l_lockVec_2_held$FULL_N),
						 .EMPTY_N(h_l_lockVec_2_held$EMPTY_N));

  // submodule h_l_lockVec_3_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) h_l_lockVec_3_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(h_l_lockVec_3_held$D_IN),
						 .ENQ(h_l_lockVec_3_held$ENQ),
						 .DEQ(h_l_lockVec_3_held$DEQ),
						 .CLR(h_l_lockVec_3_held$CLR),
						 .D_OUT(h_l_lockVec_3_held$D_OUT),
						 .FULL_N(h_l_lockVec_3_held$FULL_N),
						 .EMPTY_N(h_l_lockVec_3_held$EMPTY_N));

  // submodule hg_fifo_Stage__1_TO_Stage__2
  FIFO2 #(.width(32'd52),
	  .guarded(1'd1)) hg_fifo_Stage__1_TO_Stage__2(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(hg_fifo_Stage__1_TO_Stage__2$D_IN),
						       .ENQ(hg_fifo_Stage__1_TO_Stage__2$ENQ),
						       .DEQ(hg_fifo_Stage__1_TO_Stage__2$DEQ),
						       .CLR(hg_fifo_Stage__1_TO_Stage__2$CLR),
						       .D_OUT(hg_fifo_Stage__1_TO_Stage__2$D_OUT),
						       .FULL_N(hg_fifo_Stage__1_TO_Stage__2$FULL_N),
						       .EMPTY_N(hg_fifo_Stage__1_TO_Stage__2$EMPTY_N));

  // submodule hg_fifo_Stage__2_TO_Stage__3
  FIFO2 #(.width(32'd7),
	  .guarded(1'd1)) hg_fifo_Stage__2_TO_Stage__3(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(hg_fifo_Stage__2_TO_Stage__3$D_IN),
						       .ENQ(hg_fifo_Stage__2_TO_Stage__3$ENQ),
						       .DEQ(hg_fifo_Stage__2_TO_Stage__3$DEQ),
						       .CLR(hg_fifo_Stage__2_TO_Stage__3$CLR),
						       .D_OUT(hg_fifo_Stage__2_TO_Stage__3$D_OUT),
						       .FULL_N(hg_fifo_Stage__2_TO_Stage__3$FULL_N),
						       .EMPTY_N(hg_fifo_Stage__2_TO_Stage__3$EMPTY_N));

  // submodule hg_fifo_Stage__3_TO_Stage__5
  FIFO2 #(.width(32'd4),
	  .guarded(1'd1)) hg_fifo_Stage__3_TO_Stage__5(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(hg_fifo_Stage__3_TO_Stage__5$D_IN),
						       .ENQ(hg_fifo_Stage__3_TO_Stage__5$ENQ),
						       .DEQ(hg_fifo_Stage__3_TO_Stage__5$DEQ),
						       .CLR(hg_fifo_Stage__3_TO_Stage__5$CLR),
						       .D_OUT(hg_fifo_Stage__3_TO_Stage__5$D_OUT),
						       .FULL_N(hg_fifo_Stage__3_TO_Stage__5$FULL_N),
						       .EMPTY_N(hg_fifo_Stage__3_TO_Stage__5$EMPTY_N));

  // submodule hg_fifo_Start_TO_Stage__1
  FIFO2 #(.width(32'd10),
	  .guarded(1'd1)) hg_fifo_Start_TO_Stage__1(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(hg_fifo_Start_TO_Stage__1$D_IN),
						    .ENQ(hg_fifo_Start_TO_Stage__1$ENQ),
						    .DEQ(hg_fifo_Start_TO_Stage__1$DEQ),
						    .CLR(hg_fifo_Start_TO_Stage__1$CLR),
						    .D_OUT(hg_fifo_Start_TO_Stage__1$D_OUT),
						    .FULL_N(hg_fifo_Start_TO_Stage__1$FULL_N),
						    .EMPTY_N(hg_fifo_Start_TO_Stage__1$EMPTY_N));

  // submodule hg_fifo_Start_TO_Stage__5
  FIFO2 #(.width(32'd4),
	  .guarded(1'd1)) hg_fifo_Start_TO_Stage__5(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(hg_fifo_Start_TO_Stage__5$D_IN),
						    .ENQ(hg_fifo_Start_TO_Stage__5$ENQ),
						    .DEQ(hg_fifo_Start_TO_Stage__5$DEQ),
						    .CLR(hg_fifo_Start_TO_Stage__5$CLR),
						    .D_OUT(hg_fifo_Start_TO_Stage__5$D_OUT),
						    .FULL_N(hg_fifo_Start_TO_Stage__5$FULL_N),
						    .EMPTY_N(hg_fifo_Start_TO_Stage__5$EMPTY_N));

  // submodule hg_fifo_Start_TO_Stage__5_1
  FIFO2 #(.width(32'd4),
	  .guarded(1'd1)) hg_fifo_Start_TO_Stage__5_1(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(hg_fifo_Start_TO_Stage__5_1$D_IN),
						      .ENQ(hg_fifo_Start_TO_Stage__5_1$ENQ),
						      .DEQ(hg_fifo_Start_TO_Stage__5_1$DEQ),
						      .CLR(hg_fifo_Start_TO_Stage__5_1$CLR),
						      .D_OUT(hg_fifo_Start_TO_Stage__5_1$D_OUT),
						      .FULL_N(hg_fifo_Start_TO_Stage__5_1$FULL_N),
						      .EMPTY_N(hg_fifo_Start_TO_Stage__5_1$EMPTY_N));

  // submodule hg_fifo__input__TO_Start_f
  FIFO2 #(.width(32'd13),
	  .guarded(1'd1)) hg_fifo__input__TO_Start_f(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(hg_fifo__input__TO_Start_f$D_IN),
						     .ENQ(hg_fifo__input__TO_Start_f$ENQ),
						     .DEQ(hg_fifo__input__TO_Start_f$DEQ),
						     .CLR(hg_fifo__input__TO_Start_f$CLR),
						     .D_OUT(hg_fifo__input__TO_Start_f$D_OUT),
						     .FULL_N(hg_fifo__input__TO_Start_f$FULL_N),
						     .EMPTY_N(hg_fifo__input__TO_Start_f$EMPTY_N));

  // submodule hg_outputQueue
  FIFO2 #(.width(32'd4), .guarded(1'd1)) hg_outputQueue(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hg_outputQueue$D_IN),
							.ENQ(hg_outputQueue$ENQ),
							.DEQ(hg_outputQueue$DEQ),
							.CLR(hg_outputQueue$CLR),
							.D_OUT(hg_outputQueue$D_OUT),
							.FULL_N(hg_outputQueue$FULL_N),
							.EMPTY_N(hg_outputQueue$EMPTY_N));

  // submodule tf_p
  BRAM1BE #(.PIPELINED(1'd0),
	    .ADDR_WIDTH(32'd10),
	    .DATA_WIDTH(32'd16),
	    .CHUNKSIZE(32'd8),
	    .WE_WIDTH(32'd2),
	    .MEMSIZE(11'd1024)) tf_p(.CLK(CLK),
				     .ADDR(tf_p$ADDR),
				     .DI(tf_p$DI),
				     .WE(tf_p$WE),
				     .EN(tf_p$EN),
				     .DO(tf_p$DO));

  // submodule th_p
  BRAM1BE #(.PIPELINED(1'd0),
	    .ADDR_WIDTH(32'd10),
	    .DATA_WIDTH(32'd32),
	    .CHUNKSIZE(32'd8),
	    .WE_WIDTH(32'd4),
	    .MEMSIZE(11'd1024)) th_p(.CLK(CLK),
				     .ADDR(th_p$ADDR),
				     .DI(th_p$DI),
				     .WE(th_p$WE),
				     .EN(th_p$EN),
				     .DO(th_p$DO));

  // submodule tw_p
  BRAM1BE #(.PIPELINED(1'd0),
	    .ADDR_WIDTH(32'd10),
	    .DATA_WIDTH(32'd32),
	    .CHUNKSIZE(32'd8),
	    .WE_WIDTH(32'd4),
	    .MEMSIZE(11'd1024)) tw_p(.CLK(CLK),
				     .ADDR(tw_p$ADDR),
				     .DI(tw_p$DI),
				     .WE(tw_p$WE),
				     .EN(tw_p$EN),
				     .DO(tw_p$DO));

  // submodule w_l_lockVec_0_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) w_l_lockVec_0_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(w_l_lockVec_0_held$D_IN),
						 .ENQ(w_l_lockVec_0_held$ENQ),
						 .DEQ(w_l_lockVec_0_held$DEQ),
						 .CLR(w_l_lockVec_0_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(w_l_lockVec_0_held$EMPTY_N));

  // submodule w_l_lockVec_1_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) w_l_lockVec_1_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(w_l_lockVec_1_held$D_IN),
						 .ENQ(w_l_lockVec_1_held$ENQ),
						 .DEQ(w_l_lockVec_1_held$DEQ),
						 .CLR(w_l_lockVec_1_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(w_l_lockVec_1_held$EMPTY_N));

  // submodule w_l_lockVec_2_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) w_l_lockVec_2_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(w_l_lockVec_2_held$D_IN),
						 .ENQ(w_l_lockVec_2_held$ENQ),
						 .DEQ(w_l_lockVec_2_held$DEQ),
						 .CLR(w_l_lockVec_2_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(w_l_lockVec_2_held$EMPTY_N));

  // submodule w_l_lockVec_3_held
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) w_l_lockVec_3_held(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(w_l_lockVec_3_held$D_IN),
						 .ENQ(w_l_lockVec_3_held$ENQ),
						 .DEQ(w_l_lockVec_3_held$DEQ),
						 .CLR(w_l_lockVec_3_held$CLR),
						 .D_OUT(),
						 .FULL_N(),
						 .EMPTY_N(w_l_lockVec_3_held$EMPTY_N));

  // rule RL_hg_s_Stage__3_execute
  assign WILL_FIRE_RL_hg_s_Stage__3_execute =
	     hg_fifo_Stage__2_TO_Stage__3$EMPTY_N &&
	     hg_fifo_Stage__3_TO_Stage__5$FULL_N &&
	     SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d273 ;

  // rule RL_hg_s_Stage__1_execute
  assign CAN_FIRE_RL_hg_s_Stage__1_execute =
	     !SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162 &&
	     hg_fifo_Start_TO_Stage__1$EMPTY_N &&
	     hg_fifo_Stage__1_TO_Stage__2$FULL_N &&
	     IF_h_l_entryVec_3_read__41_BIT_10_42_AND_IF_h__ETC___d340 &&
	     IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d365 &&
	     SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d376 ;
  assign WILL_FIRE_RL_hg_s_Stage__1_execute =
	     CAN_FIRE_RL_hg_s_Stage__1_execute &&
	     !WILL_FIRE_RL_hg_s_Stage__2_execute ;

  // rule RL_h_l_freelock
  assign CAN_FIRE_RL_h_l_freelock =
	     !h_l_lockVec_0_held$EMPTY_N && h_l_entryVec_0[10] &&
	     !h_l_resVec_0$whas ;

  // rule RL_h_l_freelock_1
  assign CAN_FIRE_RL_h_l_freelock_1 =
	     !h_l_lockVec_1_held$EMPTY_N && h_l_entryVec_1[10] &&
	     !h_l_resVec_1$whas ;

  // rule RL_h_l_freelock_2
  assign CAN_FIRE_RL_h_l_freelock_2 =
	     !h_l_lockVec_2_held$EMPTY_N && h_l_entryVec_2[10] &&
	     !h_l_resVec_2$whas ;

  // rule RL_h_l_freelock_3
  assign CAN_FIRE_RL_h_l_freelock_3 =
	     !h_l_lockVec_3_held$EMPTY_N && h_l_entryVec_3[10] &&
	     !h_l_resVec_3$whas ;

  // rule RL_hg_s_Stage__2_execute
  assign WILL_FIRE_RL_hg_s_Stage__2_execute =
	     hg_fifo_Stage__1_TO_Stage__2$EMPTY_N &&
	     !SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162 &&
	     hg_fifo_Stage__2_TO_Stage__3$FULL_N &&
	     NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d208 &&
	     SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d213 ;

  // rule RL_hg_s_Start_execute
  assign WILL_FIRE_RL_hg_s_Start_execute =
	     hg_fifo__input__TO_Start_f$EMPTY_N &&
	     hg_fifo_Start_TO_Stage__5_i_notFull__53_AND_hg_ETC___d476 &&
	     NOT_hg_fifo__input__TO_Start_f_first__54_BITS__ETC___d517 &&
	     NOT_hg_fifo__input__TO_Start_f_first__54_BITS__ETC___d557 ;

  // rule RL_hg_s_Stage__5_execute
  assign WILL_FIRE_RL_hg_s_Stage__5_execute =
	     hg_fifo_Start_TO_Stage__5$EMPTY_N &&
	     IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d591 &&
	     (IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d584 ||
	      hg_busyReg) &&
	     !EN__inthg_req ;

  // inputs to muxes for submodule ports
  assign MUX_f_amem_valid_0$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd0 ;
  assign MUX_f_amem_valid_0$write_1__SEL_2 =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd0 ;
  assign MUX_f_amem_valid_1$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd1 ;
  assign MUX_f_amem_valid_1$write_1__SEL_2 =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd1 ;
  assign MUX_f_amem_valid_2$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd2 ;
  assign MUX_f_amem_valid_2$write_1__SEL_2 =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd2 ;
  assign MUX_f_amem_valid_3$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd3 ;
  assign MUX_f_amem_valid_3$write_1__SEL_2 =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd3 ;
  assign MUX_f_amem_valid_4$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd4 ;
  assign MUX_f_amem_valid_4$write_1__SEL_2 =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd4 ;
  assign MUX_f_amem_valid_5$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd5 ;
  assign MUX_f_amem_valid_5$write_1__SEL_2 =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd5 ;
  assign MUX_f_amem_valid_6$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd6 ;
  assign MUX_f_amem_valid_6$write_1__SEL_2 =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd6 ;
  assign MUX_f_amem_valid_7$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd7 ;
  assign MUX_f_amem_valid_7$write_1__SEL_2 =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd7 ;
  assign MUX_h_amem_valid_0$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd0 ;
  assign MUX_h_amem_valid_0$write_1__SEL_2 =
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd0 ;
  assign MUX_h_amem_valid_0$write_1__SEL_3 =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd0 ;
  assign MUX_h_amem_valid_1$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd1 ;
  assign MUX_h_amem_valid_1$write_1__SEL_2 =
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd1 ;
  assign MUX_h_amem_valid_1$write_1__SEL_3 =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd1 ;
  assign MUX_h_amem_valid_2$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd2 ;
  assign MUX_h_amem_valid_2$write_1__SEL_2 =
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd2 ;
  assign MUX_h_amem_valid_2$write_1__SEL_3 =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd2 ;
  assign MUX_h_amem_valid_3$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd3 ;
  assign MUX_h_amem_valid_3$write_1__SEL_2 =
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd3 ;
  assign MUX_h_amem_valid_3$write_1__SEL_3 =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd3 ;
  assign MUX_h_amem_valid_4$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd4 ;
  assign MUX_h_amem_valid_4$write_1__SEL_2 =
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd4 ;
  assign MUX_h_amem_valid_4$write_1__SEL_3 =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd4 ;
  assign MUX_h_amem_valid_5$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd5 ;
  assign MUX_h_amem_valid_5$write_1__SEL_2 =
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd5 ;
  assign MUX_h_amem_valid_5$write_1__SEL_3 =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd5 ;
  assign MUX_h_amem_valid_6$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd6 ;
  assign MUX_h_amem_valid_6$write_1__SEL_2 =
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd6 ;
  assign MUX_h_amem_valid_6$write_1__SEL_3 =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd6 ;
  assign MUX_h_amem_valid_7$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd7 ;
  assign MUX_h_amem_valid_7$write_1__SEL_2 =
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd7 ;
  assign MUX_h_amem_valid_7$write_1__SEL_3 =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd7 ;
  assign MUX_h_l_entryVec_0$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h18821 == 2'd0 &&
	     NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423 ;
  assign MUX_h_l_entryVec_1$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h18821 == 2'd1 &&
	     NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423 ;
  assign MUX_h_l_entryVec_2$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h18821 == 2'd2 &&
	     NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423 ;
  assign MUX_h_l_entryVec_3$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h18821 == 2'd3 &&
	     NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423 ;
  assign MUX_hg_busyReg$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__5_execute &&
	     IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d596 ;
  assign MUX_hg_fifo__input__TO_Start_enq_data$wset_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Start_execute &&
	     hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456 ;
  assign MUX_w_amem_valid_0$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd0 ;
  assign MUX_w_amem_valid_0$write_1__SEL_2 =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd0 ;
  assign MUX_w_amem_valid_1$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd1 ;
  assign MUX_w_amem_valid_1$write_1__SEL_2 =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd1 ;
  assign MUX_w_amem_valid_2$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd2 ;
  assign MUX_w_amem_valid_2$write_1__SEL_2 =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd2 ;
  assign MUX_w_amem_valid_3$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd3 ;
  assign MUX_w_amem_valid_3$write_1__SEL_2 =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd3 ;
  assign MUX_w_amem_valid_4$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd4 ;
  assign MUX_w_amem_valid_4$write_1__SEL_2 =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd4 ;
  assign MUX_w_amem_valid_5$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd5 ;
  assign MUX_w_amem_valid_5$write_1__SEL_2 =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd5 ;
  assign MUX_w_amem_valid_6$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd6 ;
  assign MUX_w_amem_valid_6$write_1__SEL_2 =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd6 ;
  assign MUX_w_amem_valid_7$write_1__SEL_1 =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd7 ;
  assign MUX_w_amem_valid_7$write_1__SEL_2 =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd7 ;
  assign MUX_h_l_entryVec_0$write_1__VAL_1 =
	     { 1'd1,
	       SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297[9:0] } ;
  assign MUX_hg_fifo__input__TO_Start_enq_data$wset_1__VAL_1 =
	     { hg_fifo__input__TO_Start_f$D_OUT[12:3] + 10'd1,
	       hg_fifo__input__TO_Start_f$D_OUT[2:0] } ;
  assign MUX_hg_fifo__input__TO_Start_enq_data$wset_1__VAL_2 =
	     { _inthg_req_counter, hg } ;
  assign MUX_th_p$put_3__VAL_2 =
	     SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232 +
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[34:3] ;

  // inlined wires
  assign f_amem_nextData_1$wget = { 1'd1, f_amem_head } ;
  assign w_amem_nextData_1$wget = { 1'd1, w_amem_head } ;
  assign h_amem_nextData_1$wget = { 1'd1, h_amem_head } ;
  assign h_amem_nextData_1$whas =
	     WILL_FIRE_RL_hg_s_Stage__1_execute ||
	     WILL_FIRE_RL_hg_s_Stage__2_execute ;
  assign h_l_resVec_0$whas =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d396 ;
  assign h_l_resVec_1$whas =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d398 ;
  assign h_l_resVec_2$whas =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d400 ;
  assign h_l_resVec_3$whas =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d402 ;
  assign hg_fifo__input__TO_Start_enq_data$wget =
	     MUX_hg_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ?
	       MUX_hg_fifo__input__TO_Start_enq_data$wset_1__VAL_1 :
	       MUX_hg_fifo__input__TO_Start_enq_data$wset_1__VAL_2 ;
  assign hg_fifo__input__TO_Start_enq_data$whas =
	     WILL_FIRE_RL_hg_s_Start_execute &&
	     hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456 ||
	     EN__inthg_req ;

  // register f_amem_head
  assign f_amem_head$D_IN = f_amem_head + 3'd1 ;
  assign f_amem_head$EN =
	     MUX_hg_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ;

  // register f_amem_nextData
  assign f_amem_nextData$D_IN =
	     MUX_hg_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ?
	       f_amem_nextData_1$wget :
	       4'd2 ;
  assign f_amem_nextData$EN = 1'd1 ;

  // register f_amem_outData_0
  assign f_amem_outData_0$D_IN = tf_p$DO ;
  assign f_amem_outData_0$EN = MUX_f_amem_valid_0$write_1__SEL_2 ;

  // register f_amem_outData_1
  assign f_amem_outData_1$D_IN = tf_p$DO ;
  assign f_amem_outData_1$EN = MUX_f_amem_valid_1$write_1__SEL_2 ;

  // register f_amem_outData_2
  assign f_amem_outData_2$D_IN = tf_p$DO ;
  assign f_amem_outData_2$EN = MUX_f_amem_valid_2$write_1__SEL_2 ;

  // register f_amem_outData_3
  assign f_amem_outData_3$D_IN = tf_p$DO ;
  assign f_amem_outData_3$EN = MUX_f_amem_valid_3$write_1__SEL_2 ;

  // register f_amem_outData_4
  assign f_amem_outData_4$D_IN = tf_p$DO ;
  assign f_amem_outData_4$EN = MUX_f_amem_valid_4$write_1__SEL_2 ;

  // register f_amem_outData_5
  assign f_amem_outData_5$D_IN = tf_p$DO ;
  assign f_amem_outData_5$EN = MUX_f_amem_valid_5$write_1__SEL_2 ;

  // register f_amem_outData_6
  assign f_amem_outData_6$D_IN = tf_p$DO ;
  assign f_amem_outData_6$EN = MUX_f_amem_valid_6$write_1__SEL_2 ;

  // register f_amem_outData_7
  assign f_amem_outData_7$D_IN = tf_p$DO ;
  assign f_amem_outData_7$EN = MUX_f_amem_valid_7$write_1__SEL_2 ;

  // register f_amem_valid_0
  assign f_amem_valid_0$D_IN = !MUX_f_amem_valid_0$write_1__SEL_1 ;
  assign f_amem_valid_0$EN =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd0 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd0 ;

  // register f_amem_valid_1
  assign f_amem_valid_1$D_IN = !MUX_f_amem_valid_1$write_1__SEL_1 ;
  assign f_amem_valid_1$EN =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd1 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd1 ;

  // register f_amem_valid_2
  assign f_amem_valid_2$D_IN = !MUX_f_amem_valid_2$write_1__SEL_1 ;
  assign f_amem_valid_2$EN =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd2 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd2 ;

  // register f_amem_valid_3
  assign f_amem_valid_3$D_IN = !MUX_f_amem_valid_3$write_1__SEL_1 ;
  assign f_amem_valid_3$EN =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd3 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd3 ;

  // register f_amem_valid_4
  assign f_amem_valid_4$D_IN = !MUX_f_amem_valid_4$write_1__SEL_1 ;
  assign f_amem_valid_4$EN =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd4 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd4 ;

  // register f_amem_valid_5
  assign f_amem_valid_5$D_IN = !MUX_f_amem_valid_5$write_1__SEL_1 ;
  assign f_amem_valid_5$EN =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd5 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd5 ;

  // register f_amem_valid_6
  assign f_amem_valid_6$D_IN = !MUX_f_amem_valid_6$write_1__SEL_1 ;
  assign f_amem_valid_6$EN =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd6 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd6 ;

  // register f_amem_valid_7
  assign f_amem_valid_7$D_IN = !MUX_f_amem_valid_7$write_1__SEL_1 ;
  assign f_amem_valid_7$EN =
	     f_amem_nextData[3] && f_amem_nextData[2:0] == 3'd7 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[9:7] == 3'd7 ;

  // register f_l_entryVec_0
  assign f_l_entryVec_0$D_IN = 11'd682 ;
  assign f_l_entryVec_0$EN =
	     !f_l_lockVec_0_held$EMPTY_N && f_l_entryVec_0[10] ;

  // register f_l_entryVec_1
  assign f_l_entryVec_1$D_IN = 11'd682 ;
  assign f_l_entryVec_1$EN =
	     !f_l_lockVec_1_held$EMPTY_N && f_l_entryVec_1[10] ;

  // register f_l_entryVec_2
  assign f_l_entryVec_2$D_IN = 11'd682 ;
  assign f_l_entryVec_2$EN =
	     !f_l_lockVec_2_held$EMPTY_N && f_l_entryVec_2[10] ;

  // register f_l_entryVec_3
  assign f_l_entryVec_3$D_IN = 11'd682 ;
  assign f_l_entryVec_3$EN =
	     !f_l_lockVec_3_held$EMPTY_N && f_l_entryVec_3[10] ;

  // register f_l_lockVec_0_cnt
  assign f_l_lockVec_0_cnt$D_IN = 2'h0 ;
  assign f_l_lockVec_0_cnt$EN = 1'b0 ;

  // register f_l_lockVec_0_nextId
  assign f_l_lockVec_0_nextId$D_IN = 2'h0 ;
  assign f_l_lockVec_0_nextId$EN = 1'b0 ;

  // register f_l_lockVec_1_cnt
  assign f_l_lockVec_1_cnt$D_IN = 2'h0 ;
  assign f_l_lockVec_1_cnt$EN = 1'b0 ;

  // register f_l_lockVec_1_nextId
  assign f_l_lockVec_1_nextId$D_IN = 2'h0 ;
  assign f_l_lockVec_1_nextId$EN = 1'b0 ;

  // register f_l_lockVec_2_cnt
  assign f_l_lockVec_2_cnt$D_IN = 2'h0 ;
  assign f_l_lockVec_2_cnt$EN = 1'b0 ;

  // register f_l_lockVec_2_nextId
  assign f_l_lockVec_2_nextId$D_IN = 2'h0 ;
  assign f_l_lockVec_2_nextId$EN = 1'b0 ;

  // register f_l_lockVec_3_cnt
  assign f_l_lockVec_3_cnt$D_IN = 2'h0 ;
  assign f_l_lockVec_3_cnt$EN = 1'b0 ;

  // register f_l_lockVec_3_nextId
  assign f_l_lockVec_3_nextId$D_IN = 2'h0 ;
  assign f_l_lockVec_3_nextId$EN = 1'b0 ;

  // register h_amem_head
  assign h_amem_head$D_IN = h_amem_head + 3'd1 ;
  assign h_amem_head$EN = h_amem_nextData_1$whas ;

  // register h_amem_nextData
  assign h_amem_nextData$D_IN =
	     h_amem_nextData_1$whas ? h_amem_nextData_1$wget : 4'd2 ;
  assign h_amem_nextData$EN = 1'd1 ;

  // register h_amem_outData_0
  assign h_amem_outData_0$D_IN = th_p$DO ;
  assign h_amem_outData_0$EN = MUX_h_amem_valid_0$write_1__SEL_3 ;

  // register h_amem_outData_1
  assign h_amem_outData_1$D_IN = th_p$DO ;
  assign h_amem_outData_1$EN = MUX_h_amem_valid_1$write_1__SEL_3 ;

  // register h_amem_outData_2
  assign h_amem_outData_2$D_IN = th_p$DO ;
  assign h_amem_outData_2$EN = MUX_h_amem_valid_2$write_1__SEL_3 ;

  // register h_amem_outData_3
  assign h_amem_outData_3$D_IN = th_p$DO ;
  assign h_amem_outData_3$EN = MUX_h_amem_valid_3$write_1__SEL_3 ;

  // register h_amem_outData_4
  assign h_amem_outData_4$D_IN = th_p$DO ;
  assign h_amem_outData_4$EN = MUX_h_amem_valid_4$write_1__SEL_3 ;

  // register h_amem_outData_5
  assign h_amem_outData_5$D_IN = th_p$DO ;
  assign h_amem_outData_5$EN = MUX_h_amem_valid_5$write_1__SEL_3 ;

  // register h_amem_outData_6
  assign h_amem_outData_6$D_IN = th_p$DO ;
  assign h_amem_outData_6$EN = MUX_h_amem_valid_6$write_1__SEL_3 ;

  // register h_amem_outData_7
  assign h_amem_outData_7$D_IN = th_p$DO ;
  assign h_amem_outData_7$EN = MUX_h_amem_valid_7$write_1__SEL_3 ;

  // register h_amem_valid_0
  assign h_amem_valid_0$D_IN =
	     !MUX_h_amem_valid_0$write_1__SEL_1 &&
	     !MUX_h_amem_valid_0$write_1__SEL_2 ;
  assign h_amem_valid_0$EN =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd0 ||
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd0 ||
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd0 ;

  // register h_amem_valid_1
  assign h_amem_valid_1$D_IN =
	     !MUX_h_amem_valid_1$write_1__SEL_1 &&
	     !MUX_h_amem_valid_1$write_1__SEL_2 ;
  assign h_amem_valid_1$EN =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd1 ||
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd1 ||
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd1 ;

  // register h_amem_valid_2
  assign h_amem_valid_2$D_IN =
	     !MUX_h_amem_valid_2$write_1__SEL_1 &&
	     !MUX_h_amem_valid_2$write_1__SEL_2 ;
  assign h_amem_valid_2$EN =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd2 ||
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd2 ||
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd2 ;

  // register h_amem_valid_3
  assign h_amem_valid_3$D_IN =
	     !MUX_h_amem_valid_3$write_1__SEL_1 &&
	     !MUX_h_amem_valid_3$write_1__SEL_2 ;
  assign h_amem_valid_3$EN =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd3 ||
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd3 ||
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd3 ;

  // register h_amem_valid_4
  assign h_amem_valid_4$D_IN =
	     !MUX_h_amem_valid_4$write_1__SEL_1 &&
	     !MUX_h_amem_valid_4$write_1__SEL_2 ;
  assign h_amem_valid_4$EN =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd4 ||
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd4 ||
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd4 ;

  // register h_amem_valid_5
  assign h_amem_valid_5$D_IN =
	     !MUX_h_amem_valid_5$write_1__SEL_1 &&
	     !MUX_h_amem_valid_5$write_1__SEL_2 ;
  assign h_amem_valid_5$EN =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd5 ||
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd5 ||
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd5 ;

  // register h_amem_valid_6
  assign h_amem_valid_6$D_IN =
	     !MUX_h_amem_valid_6$write_1__SEL_1 &&
	     !MUX_h_amem_valid_6$write_1__SEL_2 ;
  assign h_amem_valid_6$EN =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd6 ||
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd6 ||
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd6 ;

  // register h_amem_valid_7
  assign h_amem_valid_7$D_IN =
	     !MUX_h_amem_valid_7$write_1__SEL_1 &&
	     !MUX_h_amem_valid_7$write_1__SEL_2 ;
  assign h_amem_valid_7$EN =
	     h_amem_nextData[3] && h_amem_nextData[2:0] == 3'd7 ||
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46] == 3'd7 ||
	     WILL_FIRE_RL_hg_s_Stage__3_execute &&
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4] == 3'd7 ;

  // register h_l_entryVec_0
  assign h_l_entryVec_0$D_IN =
	     MUX_h_l_entryVec_0$write_1__SEL_1 ?
	       MUX_h_l_entryVec_0$write_1__VAL_1 :
	       11'd682 ;
  assign h_l_entryVec_0$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h18821 == 2'd0 &&
	     NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423 ||
	     CAN_FIRE_RL_h_l_freelock && !WILL_FIRE_RL_hg_s_Stage__1_execute ;

  // register h_l_entryVec_1
  assign h_l_entryVec_1$D_IN =
	     MUX_h_l_entryVec_1$write_1__SEL_1 ?
	       MUX_h_l_entryVec_0$write_1__VAL_1 :
	       11'd682 ;
  assign h_l_entryVec_1$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h18821 == 2'd1 &&
	     NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423 ||
	     CAN_FIRE_RL_h_l_freelock_1 &&
	     !WILL_FIRE_RL_hg_s_Stage__1_execute ;

  // register h_l_entryVec_2
  assign h_l_entryVec_2$D_IN =
	     MUX_h_l_entryVec_2$write_1__SEL_1 ?
	       MUX_h_l_entryVec_0$write_1__VAL_1 :
	       11'd682 ;
  assign h_l_entryVec_2$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h18821 == 2'd2 &&
	     NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423 ||
	     CAN_FIRE_RL_h_l_freelock_2 &&
	     !WILL_FIRE_RL_hg_s_Stage__1_execute ;

  // register h_l_entryVec_3
  assign h_l_entryVec_3$D_IN =
	     MUX_h_l_entryVec_3$write_1__SEL_1 ?
	       MUX_h_l_entryVec_0$write_1__VAL_1 :
	       11'd682 ;
  assign h_l_entryVec_3$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute && x__h18821 == 2'd3 &&
	     NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423 ||
	     CAN_FIRE_RL_h_l_freelock_3 &&
	     !WILL_FIRE_RL_hg_s_Stage__1_execute ;

  // register h_l_lockVec_0_cnt
  assign h_l_lockVec_0_cnt$D_IN = h_l_lockVec_0_cnt + 2'd1 ;
  assign h_l_lockVec_0_cnt$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d396 ||
	      x__h18821 == 2'd0 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;

  // register h_l_lockVec_0_nextId
  assign h_l_lockVec_0_nextId$D_IN = h_l_lockVec_0_nextId + 2'd1 ;
  assign h_l_lockVec_0_nextId$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d396 ||
	      x__h18821 == 2'd0 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;

  // register h_l_lockVec_1_cnt
  assign h_l_lockVec_1_cnt$D_IN = h_l_lockVec_1_cnt + 2'd1 ;
  assign h_l_lockVec_1_cnt$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d398 ||
	      x__h18821 == 2'd1 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;

  // register h_l_lockVec_1_nextId
  assign h_l_lockVec_1_nextId$D_IN = h_l_lockVec_1_nextId + 2'd1 ;
  assign h_l_lockVec_1_nextId$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d398 ||
	      x__h18821 == 2'd1 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;

  // register h_l_lockVec_2_cnt
  assign h_l_lockVec_2_cnt$D_IN = h_l_lockVec_2_cnt + 2'd1 ;
  assign h_l_lockVec_2_cnt$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d400 ||
	      x__h18821 == 2'd2 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;

  // register h_l_lockVec_2_nextId
  assign h_l_lockVec_2_nextId$D_IN = h_l_lockVec_2_nextId + 2'd1 ;
  assign h_l_lockVec_2_nextId$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d400 ||
	      x__h18821 == 2'd2 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;

  // register h_l_lockVec_3_cnt
  assign h_l_lockVec_3_cnt$D_IN = h_l_lockVec_3_cnt + 2'd1 ;
  assign h_l_lockVec_3_cnt$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d402 ||
	      x__h18821 == 2'd3 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;

  // register h_l_lockVec_3_nextId
  assign h_l_lockVec_3_nextId$D_IN = h_l_lockVec_3_nextId + 2'd1 ;
  assign h_l_lockVec_3_nextId$EN =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d402 ||
	      x__h18821 == 2'd3 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;

  // register hg
  assign hg$D_IN = hg + 3'd1 ;
  assign hg$EN = EN__inthg_req ;

  // register hg_busyReg
  assign hg_busyReg$D_IN = !MUX_hg_busyReg$write_1__SEL_1 ;
  assign hg_busyReg$EN =
	     WILL_FIRE_RL_hg_s_Stage__5_execute &&
	     IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d596 ||
	     EN__inthg_req ;

  // register hg_feature_lock_region
  assign hg_feature_lock_region$D_IN = 1'b0 ;
  assign hg_feature_lock_region$EN = 1'b0 ;

  // register hg_h_lock_region
  assign hg_h_lock_region$D_IN = 1'b0 ;
  assign hg_h_lock_region$EN = 1'b0 ;

  // register hg_weight_lock_region
  assign hg_weight_lock_region$D_IN = 1'b0 ;
  assign hg_weight_lock_region$EN = 1'b0 ;

  // register w_amem_head
  assign w_amem_head$D_IN = w_amem_head + 3'd1 ;
  assign w_amem_head$EN =
	     MUX_hg_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ;

  // register w_amem_nextData
  assign w_amem_nextData$D_IN =
	     MUX_hg_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ?
	       w_amem_nextData_1$wget :
	       4'd2 ;
  assign w_amem_nextData$EN = 1'd1 ;

  // register w_amem_outData_0
  assign w_amem_outData_0$D_IN = tw_p$DO ;
  assign w_amem_outData_0$EN = MUX_w_amem_valid_0$write_1__SEL_2 ;

  // register w_amem_outData_1
  assign w_amem_outData_1$D_IN = tw_p$DO ;
  assign w_amem_outData_1$EN = MUX_w_amem_valid_1$write_1__SEL_2 ;

  // register w_amem_outData_2
  assign w_amem_outData_2$D_IN = tw_p$DO ;
  assign w_amem_outData_2$EN = MUX_w_amem_valid_2$write_1__SEL_2 ;

  // register w_amem_outData_3
  assign w_amem_outData_3$D_IN = tw_p$DO ;
  assign w_amem_outData_3$EN = MUX_w_amem_valid_3$write_1__SEL_2 ;

  // register w_amem_outData_4
  assign w_amem_outData_4$D_IN = tw_p$DO ;
  assign w_amem_outData_4$EN = MUX_w_amem_valid_4$write_1__SEL_2 ;

  // register w_amem_outData_5
  assign w_amem_outData_5$D_IN = tw_p$DO ;
  assign w_amem_outData_5$EN = MUX_w_amem_valid_5$write_1__SEL_2 ;

  // register w_amem_outData_6
  assign w_amem_outData_6$D_IN = tw_p$DO ;
  assign w_amem_outData_6$EN = MUX_w_amem_valid_6$write_1__SEL_2 ;

  // register w_amem_outData_7
  assign w_amem_outData_7$D_IN = tw_p$DO ;
  assign w_amem_outData_7$EN = MUX_w_amem_valid_7$write_1__SEL_2 ;

  // register w_amem_valid_0
  assign w_amem_valid_0$D_IN = !MUX_w_amem_valid_0$write_1__SEL_1 ;
  assign w_amem_valid_0$EN =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd0 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd0 ;

  // register w_amem_valid_1
  assign w_amem_valid_1$D_IN = !MUX_w_amem_valid_1$write_1__SEL_1 ;
  assign w_amem_valid_1$EN =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd1 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd1 ;

  // register w_amem_valid_2
  assign w_amem_valid_2$D_IN = !MUX_w_amem_valid_2$write_1__SEL_1 ;
  assign w_amem_valid_2$EN =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd2 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd2 ;

  // register w_amem_valid_3
  assign w_amem_valid_3$D_IN = !MUX_w_amem_valid_3$write_1__SEL_1 ;
  assign w_amem_valid_3$EN =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd3 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd3 ;

  // register w_amem_valid_4
  assign w_amem_valid_4$D_IN = !MUX_w_amem_valid_4$write_1__SEL_1 ;
  assign w_amem_valid_4$EN =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd4 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd4 ;

  // register w_amem_valid_5
  assign w_amem_valid_5$D_IN = !MUX_w_amem_valid_5$write_1__SEL_1 ;
  assign w_amem_valid_5$EN =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd5 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd5 ;

  // register w_amem_valid_6
  assign w_amem_valid_6$D_IN = !MUX_w_amem_valid_6$write_1__SEL_1 ;
  assign w_amem_valid_6$EN =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd6 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd6 ;

  // register w_amem_valid_7
  assign w_amem_valid_7$D_IN = !MUX_w_amem_valid_7$write_1__SEL_1 ;
  assign w_amem_valid_7$EN =
	     w_amem_nextData[3] && w_amem_nextData[2:0] == 3'd7 ||
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     hg_fifo_Start_TO_Stage__1$D_OUT[5:3] == 3'd7 ;

  // register w_l_entryVec_0
  assign w_l_entryVec_0$D_IN = 11'd682 ;
  assign w_l_entryVec_0$EN =
	     !w_l_lockVec_0_held$EMPTY_N && w_l_entryVec_0[10] ;

  // register w_l_entryVec_1
  assign w_l_entryVec_1$D_IN = 11'd682 ;
  assign w_l_entryVec_1$EN =
	     !w_l_lockVec_1_held$EMPTY_N && w_l_entryVec_1[10] ;

  // register w_l_entryVec_2
  assign w_l_entryVec_2$D_IN = 11'd682 ;
  assign w_l_entryVec_2$EN =
	     !w_l_lockVec_2_held$EMPTY_N && w_l_entryVec_2[10] ;

  // register w_l_entryVec_3
  assign w_l_entryVec_3$D_IN = 11'd682 ;
  assign w_l_entryVec_3$EN =
	     !w_l_lockVec_3_held$EMPTY_N && w_l_entryVec_3[10] ;

  // register w_l_lockVec_0_cnt
  assign w_l_lockVec_0_cnt$D_IN = 2'h0 ;
  assign w_l_lockVec_0_cnt$EN = 1'b0 ;

  // register w_l_lockVec_0_nextId
  assign w_l_lockVec_0_nextId$D_IN = 2'h0 ;
  assign w_l_lockVec_0_nextId$EN = 1'b0 ;

  // register w_l_lockVec_1_cnt
  assign w_l_lockVec_1_cnt$D_IN = 2'h0 ;
  assign w_l_lockVec_1_cnt$EN = 1'b0 ;

  // register w_l_lockVec_1_nextId
  assign w_l_lockVec_1_nextId$D_IN = 2'h0 ;
  assign w_l_lockVec_1_nextId$EN = 1'b0 ;

  // register w_l_lockVec_2_cnt
  assign w_l_lockVec_2_cnt$D_IN = 2'h0 ;
  assign w_l_lockVec_2_cnt$EN = 1'b0 ;

  // register w_l_lockVec_2_nextId
  assign w_l_lockVec_2_nextId$D_IN = 2'h0 ;
  assign w_l_lockVec_2_nextId$EN = 1'b0 ;

  // register w_l_lockVec_3_cnt
  assign w_l_lockVec_3_cnt$D_IN = 2'h0 ;
  assign w_l_lockVec_3_cnt$EN = 1'b0 ;

  // register w_l_lockVec_3_nextId
  assign w_l_lockVec_3_nextId$D_IN = 2'h0 ;
  assign w_l_lockVec_3_nextId$EN = 1'b0 ;

  // submodule f_l_lockVec_0_held
  assign f_l_lockVec_0_held$D_IN = 2'h0 ;
  assign f_l_lockVec_0_held$ENQ = 1'b0 ;
  assign f_l_lockVec_0_held$DEQ = 1'b0 ;
  assign f_l_lockVec_0_held$CLR = 1'b0 ;

  // submodule f_l_lockVec_1_held
  assign f_l_lockVec_1_held$D_IN = 2'h0 ;
  assign f_l_lockVec_1_held$ENQ = 1'b0 ;
  assign f_l_lockVec_1_held$DEQ = 1'b0 ;
  assign f_l_lockVec_1_held$CLR = 1'b0 ;

  // submodule f_l_lockVec_2_held
  assign f_l_lockVec_2_held$D_IN = 2'h0 ;
  assign f_l_lockVec_2_held$ENQ = 1'b0 ;
  assign f_l_lockVec_2_held$DEQ = 1'b0 ;
  assign f_l_lockVec_2_held$CLR = 1'b0 ;

  // submodule f_l_lockVec_3_held
  assign f_l_lockVec_3_held$D_IN = 2'h0 ;
  assign f_l_lockVec_3_held$ENQ = 1'b0 ;
  assign f_l_lockVec_3_held$DEQ = 1'b0 ;
  assign f_l_lockVec_3_held$CLR = 1'b0 ;

  // submodule h_l_lockVec_0_held
  assign h_l_lockVec_0_held$D_IN = h_l_lockVec_0_nextId ;
  assign h_l_lockVec_0_held$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d396 ||
	      x__h18821 == 2'd0 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;
  assign h_l_lockVec_0_held$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     h_l_lockVec_0_held$D_OUT ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[50:49] &&
	     IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d248 ;
  assign h_l_lockVec_0_held$CLR = 1'b0 ;

  // submodule h_l_lockVec_1_held
  assign h_l_lockVec_1_held$D_IN = h_l_lockVec_1_nextId ;
  assign h_l_lockVec_1_held$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d398 ||
	      x__h18821 == 2'd1 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;
  assign h_l_lockVec_1_held$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     h_l_lockVec_1_held$D_OUT ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[50:49] &&
	     IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d253 ;
  assign h_l_lockVec_1_held$CLR = 1'b0 ;

  // submodule h_l_lockVec_2_held
  assign h_l_lockVec_2_held$D_IN = h_l_lockVec_2_nextId ;
  assign h_l_lockVec_2_held$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d400 ||
	      x__h18821 == 2'd2 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;
  assign h_l_lockVec_2_held$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     h_l_lockVec_2_held$D_OUT ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[50:49] &&
	     IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d258 ;
  assign h_l_lockVec_2_held$CLR = 1'b0 ;

  // submodule h_l_lockVec_3_held
  assign h_l_lockVec_3_held$D_IN = h_l_lockVec_3_nextId ;
  assign h_l_lockVec_3_held$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute &&
	     (IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d402 ||
	      x__h18821 == 2'd3 &&
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423) ;
  assign h_l_lockVec_3_held$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute &&
	     h_l_lockVec_3_held$D_OUT ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[50:49] &&
	     IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d263 ;
  assign h_l_lockVec_3_held$CLR = 1'b0 ;

  // submodule hg_fifo_Stage__1_TO_Stage__2
  assign hg_fifo_Stage__1_TO_Stage__2$D_IN =
	     { 1'd1,
	       IF_h_l_entryVec_3_read__41_BIT_10_42_AND_IF_h__ETC___d436,
	       h_amem_head,
	       SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297[9:0],
	       hg_fifo_Start_TO_Stage__1$D_OUT[6],
	       SEL_ARR_w_amem_outData_0_read__38_w_amem_outDa_ETC___d447,
	       hg_fifo_Start_TO_Stage__1$D_OUT[2:0] } ;
  assign hg_fifo_Stage__1_TO_Stage__2$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__1_execute ;
  assign hg_fifo_Stage__1_TO_Stage__2$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute ;
  assign hg_fifo_Stage__1_TO_Stage__2$CLR = 1'b0 ;

  // submodule hg_fifo_Stage__2_TO_Stage__3
  assign hg_fifo_Stage__2_TO_Stage__3$D_IN =
	     { h_amem_head,
	       hg_fifo_Stage__1_TO_Stage__2$D_OUT[35],
	       hg_fifo_Stage__1_TO_Stage__2$D_OUT[2:0] } ;
  assign hg_fifo_Stage__2_TO_Stage__3$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__2_execute ;
  assign hg_fifo_Stage__2_TO_Stage__3$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__3_execute ;
  assign hg_fifo_Stage__2_TO_Stage__3$CLR = 1'b0 ;

  // submodule hg_fifo_Stage__3_TO_Stage__5
  assign hg_fifo_Stage__3_TO_Stage__5$D_IN =
	     hg_fifo_Stage__2_TO_Stage__3$D_OUT[3:0] ;
  assign hg_fifo_Stage__3_TO_Stage__5$ENQ =
	     WILL_FIRE_RL_hg_s_Stage__3_execute ;
  assign hg_fifo_Stage__3_TO_Stage__5$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__5_execute &&
	     !hg_fifo_Start_TO_Stage__5$D_OUT[3] ;
  assign hg_fifo_Stage__3_TO_Stage__5$CLR = 1'b0 ;

  // submodule hg_fifo_Start_TO_Stage__1
  assign hg_fifo_Start_TO_Stage__1$D_IN =
	     { f_amem_head,
	       !hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456,
	       w_amem_head,
	       hg_fifo__input__TO_Start_f$D_OUT[2:0] } ;
  assign hg_fifo_Start_TO_Stage__1$ENQ =
	     MUX_hg_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ;
  assign hg_fifo_Start_TO_Stage__1$DEQ = WILL_FIRE_RL_hg_s_Stage__1_execute ;
  assign hg_fifo_Start_TO_Stage__1$CLR = 1'b0 ;

  // submodule hg_fifo_Start_TO_Stage__5
  assign hg_fifo_Start_TO_Stage__5$D_IN =
	     { !hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456,
	       hg_fifo__input__TO_Start_f$D_OUT[2:0] } ;
  assign hg_fifo_Start_TO_Stage__5$ENQ = WILL_FIRE_RL_hg_s_Start_execute ;
  assign hg_fifo_Start_TO_Stage__5$DEQ = WILL_FIRE_RL_hg_s_Stage__5_execute ;
  assign hg_fifo_Start_TO_Stage__5$CLR = 1'b0 ;

  // submodule hg_fifo_Start_TO_Stage__5_1
  assign hg_fifo_Start_TO_Stage__5_1$D_IN =
	     { !hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456,
	       hg_fifo__input__TO_Start_f$D_OUT[2:0] } ;
  assign hg_fifo_Start_TO_Stage__5_1$ENQ =
	     WILL_FIRE_RL_hg_s_Start_execute &&
	     !hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456 ;
  assign hg_fifo_Start_TO_Stage__5_1$DEQ =
	     WILL_FIRE_RL_hg_s_Stage__5_execute &&
	     hg_fifo_Start_TO_Stage__5$D_OUT[3] ;
  assign hg_fifo_Start_TO_Stage__5_1$CLR = 1'b0 ;

  // submodule hg_fifo__input__TO_Start_f
  assign hg_fifo__input__TO_Start_f$D_IN =
	     hg_fifo__input__TO_Start_enq_data$wget ;
  assign hg_fifo__input__TO_Start_f$ENQ =
	     hg_fifo__input__TO_Start_f$FULL_N &&
	     hg_fifo__input__TO_Start_enq_data$whas ;
  assign hg_fifo__input__TO_Start_f$DEQ = WILL_FIRE_RL_hg_s_Start_execute ;
  assign hg_fifo__input__TO_Start_f$CLR = 1'b0 ;

  // submodule hg_outputQueue
  assign hg_outputQueue$D_IN =
	     { hg_fifo_Start_TO_Stage__5$D_OUT[2:0], 1'd1 } ;
  assign hg_outputQueue$ENQ = MUX_hg_busyReg$write_1__SEL_1 ;
  assign hg_outputQueue$DEQ = EN__inthg_resp ;
  assign hg_outputQueue$CLR = 1'b0 ;

  // submodule tf_p
  assign tf_p$ADDR = hg_fifo__input__TO_Start_f$D_OUT[12:3] ;
  assign tf_p$DI = 16'b1010101010101010 /* unspecified value */  ;
  assign tf_p$WE = 2'd0 ;
  assign tf_p$EN = MUX_hg_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ;

  // submodule th_p
  assign th_p$ADDR =
	     WILL_FIRE_RL_hg_s_Stage__1_execute ?
	       SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297[9:0] :
	       hg_fifo_Stage__1_TO_Stage__2$D_OUT[45:36] ;
  assign th_p$DI =
	     WILL_FIRE_RL_hg_s_Stage__1_execute ?
	       32'hAAAAAAAA /* unspecified value */  :
	       MUX_th_p$put_3__VAL_2 ;
  assign th_p$WE = WILL_FIRE_RL_hg_s_Stage__1_execute ? 4'd0 : 4'd15 ;
  assign th_p$EN = h_amem_nextData_1$whas ;

  // submodule tw_p
  assign tw_p$ADDR = hg_fifo__input__TO_Start_f$D_OUT[12:3] ;
  assign tw_p$DI = 32'hAAAAAAAA /* unspecified value */  ;
  assign tw_p$WE = 4'd0 ;
  assign tw_p$EN = MUX_hg_fifo__input__TO_Start_enq_data$wset_1__SEL_1 ;

  // submodule w_l_lockVec_0_held
  assign w_l_lockVec_0_held$D_IN = 2'h0 ;
  assign w_l_lockVec_0_held$ENQ = 1'b0 ;
  assign w_l_lockVec_0_held$DEQ = 1'b0 ;
  assign w_l_lockVec_0_held$CLR = 1'b0 ;

  // submodule w_l_lockVec_1_held
  assign w_l_lockVec_1_held$D_IN = 2'h0 ;
  assign w_l_lockVec_1_held$ENQ = 1'b0 ;
  assign w_l_lockVec_1_held$DEQ = 1'b0 ;
  assign w_l_lockVec_1_held$CLR = 1'b0 ;

  // submodule w_l_lockVec_2_held
  assign w_l_lockVec_2_held$D_IN = 2'h0 ;
  assign w_l_lockVec_2_held$ENQ = 1'b0 ;
  assign w_l_lockVec_2_held$DEQ = 1'b0 ;
  assign w_l_lockVec_2_held$CLR = 1'b0 ;

  // submodule w_l_lockVec_3_held
  assign w_l_lockVec_3_held$D_IN = 2'h0 ;
  assign w_l_lockVec_3_held$ENQ = 1'b0 ;
  assign w_l_lockVec_3_held$DEQ = 1'b0 ;
  assign w_l_lockVec_3_held$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_f_l_entryVec_0_read__0_BIT_10_1_00_OR_N_ETC___d508 =
	     ((!f_l_entryVec_0[10] ||
	       !f_l_entryVec_0_read__0_BITS_9_TO_0_87_EQ_hg_fi_ETC___d488) &&
	      f_l_entryVec_1[10] &&
	      f_l_entryVec_1_read__9_BITS_9_TO_0_84_EQ_hg_fi_ETC___d485) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_h_l_entryVec_0_read__17_BIT_10_18_85_OR_ETC___d200 =
	     ((!h_l_entryVec_0[10] ||
	       !IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d188) &&
	      h_l_entryVec_1[10] &&
	      IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d182) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_h_l_entryVec_0_read__17_BIT_10_18_85_OR_ETC___d321 =
	     ((!h_l_entryVec_0[10] ||
	       !IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d305) &&
	      h_l_entryVec_1[10] &&
	      IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d303) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d248 =
	     x__h16133 == 2'd0 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d170 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d246) ;
  assign IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d253 =
	     x__h16133 == 2'd1 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d170 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d246) ;
  assign IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d258 =
	     x__h16133 == 2'd2 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d170 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d246) ;
  assign IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d263 =
	     x__h16133 == 2'd3 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d170 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d246) ;
  assign IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d396 =
	     x__h17167 == 2'd0 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d308) ;
  assign IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d398 =
	     x__h17167 == 2'd1 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d308) ;
  assign IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d400 =
	     x__h17167 == 2'd2 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d308) ;
  assign IF_NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_ETC___d402 =
	     x__h17167 == 2'd3 &&
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d308) ;
  assign IF_NOT_w_l_entryVec_0_read__9_BIT_10_0_40_OR_N_ETC___d548 =
	     ((!w_l_entryVec_0[10] ||
	       !w_l_entryVec_0_read__9_BITS_9_TO_0_27_EQ_hg_fi_ETC___d528) &&
	      w_l_entryVec_1[10] &&
	      w_l_entryVec_1_read__7_BITS_9_TO_0_24_EQ_hg_fi_ETC___d525) ?
	       2'd1 :
	       2'd0 ;
  assign IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d188 =
	     h_l_entryVec_0[9:0] ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[45:36] ;
  assign IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d305 =
	     h_l_entryVec_0[9:0] ==
	     SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297[9:0] ;
  assign IF_h_l_entryVec_1_read__25_BIT_10_26_AND_h_l_e_ETC___d336 =
	     (h_l_entryVec_1[10] && h_l_entryVec_0[10] &&
	      !h_l_entryVec_2[10]) ?
	       2'd2 :
	       ((h_l_entryVec_0[10] && !h_l_entryVec_1[10]) ? 2'd1 : 2'd0) ;
  assign IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d182 =
	     h_l_entryVec_1[9:0] ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[45:36] ;
  assign IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d303 =
	     h_l_entryVec_1[9:0] ==
	     SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297[9:0] ;
  assign IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d176 =
	     h_l_entryVec_2[9:0] ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[45:36] ;
  assign IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d301 =
	     h_l_entryVec_2[9:0] ==
	     SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297[9:0] ;
  assign IF_h_l_entryVec_3_read__41_BIT_10_42_AND_IF_h__ETC___d340 =
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d308) ?
	       CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d328 :
	       h_l_entryVec_3[10] && h_l_entryVec_2[10] &&
	       h_l_entryVec_1[10] &&
	       h_l_entryVec_0[10] ||
	       CASE_IF_h_l_entryVec_2_read__33_BIT_10_34_AND__ETC___d338 ;
  assign IF_h_l_entryVec_3_read__41_BIT_10_42_AND_IF_h__ETC___d353 =
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d308) ?
	       SEL_ARR_NOT_h_l_lockVec_0_held_notEmpty__15_16_ETC___d352 :
	       NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d349 ;
  assign IF_h_l_entryVec_3_read__41_BIT_10_42_AND_IF_h__ETC___d436 =
	     (h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299 ||
	      h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d308) ?
	       SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d433 :
	       (NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d349 ?
		  SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d434 :
		  2'd0) ;
  assign IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d170 =
	     h_l_entryVec_3[9:0] ==
	     hg_fifo_Stage__1_TO_Stage__2$D_OUT[45:36] ;
  assign IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299 =
	     h_l_entryVec_3[9:0] ==
	     SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297[9:0] ;
  assign IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d365 =
	     (IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299 ||
	      IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d301 ||
	      IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d303 ||
	      IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d305 ||
	      NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d349) &&
	     IF_h_l_entryVec_3_read__41_BIT_10_42_AND_IF_h__ETC___d353 &&
	     SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d364 ;
  assign IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d584 =
	     hg_fifo_Start_TO_Stage__5$D_OUT[3] ?
	       !hg_fifo_Start_TO_Stage__5_1$D_OUT[3] :
	       !hg_fifo_Stage__3_TO_Stage__5$D_OUT[3] ;
  assign IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d590 =
	     (IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d584 ||
	      hg_outputQueue$FULL_N) &&
	     (hg_fifo_Start_TO_Stage__5$D_OUT[3] ||
	      hg_fifo_Stage__3_TO_Stage__5$EMPTY_N) &&
	     (!hg_fifo_Start_TO_Stage__5$D_OUT[3] ||
	      hg_fifo_Start_TO_Stage__5_1$EMPTY_N) ;
  assign IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d591 =
	     (hg_fifo_Start_TO_Stage__5$D_OUT[3] ?
		hg_fifo_Start_TO_Stage__5_1$EMPTY_N :
		hg_fifo_Start_TO_Stage__5$D_OUT[3] ||
		hg_fifo_Stage__3_TO_Stage__5$EMPTY_N) &&
	     IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d590 ;
  assign IF_hg_fifo_Start_TO_Stage__5_first__72_BIT_3_7_ETC___d596 =
	     hg_fifo_Start_TO_Stage__5$D_OUT[3] ?
	       hg_fifo_Start_TO_Stage__5_1$D_OUT[3] :
	       hg_fifo_Stage__3_TO_Stage__5$D_OUT[3] ;
  assign NOT_f_l_entryVec_1_read__9_BIT_10_0_97_OR_NOT__ETC___d506 =
	     (!f_l_entryVec_1[10] ||
	      !f_l_entryVec_1_read__9_BITS_9_TO_0_84_EQ_hg_fi_ETC___d485) &&
	     (!f_l_entryVec_0[10] ||
	      !f_l_entryVec_0_read__0_BITS_9_TO_0_87_EQ_hg_fi_ETC___d488) &&
	     f_l_entryVec_2[10] &&
	     f_l_entryVec_2_read__7_BITS_9_TO_0_81_EQ_hg_fi_ETC___d482 ;
  assign NOT_f_l_entryVec_2_read__7_BIT_10_8_94_OR_NOT__ETC___d504 =
	     (!f_l_entryVec_2[10] ||
	      !f_l_entryVec_2_read__7_BITS_9_TO_0_81_EQ_hg_fi_ETC___d482) &&
	     (!f_l_entryVec_1[10] ||
	      !f_l_entryVec_1_read__9_BITS_9_TO_0_84_EQ_hg_fi_ETC___d485) &&
	     (!f_l_entryVec_0[10] ||
	      !f_l_entryVec_0_read__0_BITS_9_TO_0_87_EQ_hg_fi_ETC___d488) ;
  assign NOT_h_l_entryVec_1_read__25_BIT_10_26_79_OR_NO_ETC___d197 =
	     (!h_l_entryVec_1[10] ||
	      !IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d182) &&
	     (!h_l_entryVec_0[10] ||
	      !IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d188) &&
	     h_l_entryVec_2[10] &&
	     IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d176 ;
  assign NOT_h_l_entryVec_1_read__25_BIT_10_26_79_OR_NO_ETC___d319 =
	     (!h_l_entryVec_1[10] ||
	      !IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d303) &&
	     (!h_l_entryVec_0[10] ||
	      !IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d305) &&
	     h_l_entryVec_2[10] &&
	     IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d301 ;
  assign NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_NO_ETC___d192 =
	     (!h_l_entryVec_2[10] ||
	      !IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d176) &&
	     (!h_l_entryVec_1[10] ||
	      !IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d182) &&
	     (!h_l_entryVec_0[10] ||
	      !IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d188) ;
  assign NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_NO_ETC___d317 =
	     (!h_l_entryVec_2[10] ||
	      !IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d301) &&
	     (!h_l_entryVec_1[10] ||
	      !IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d303) &&
	     (!h_l_entryVec_0[10] ||
	      !IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d305) ;
  assign NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d208 =
	     (!h_l_entryVec_3[10] ||
	      !IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d170) &&
	     NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_NO_ETC___d192 ||
	     CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d207 ;
  assign NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d349 =
	     !h_l_entryVec_3[10] || !h_l_entryVec_2[10] ||
	     !h_l_entryVec_1[10] ||
	     !h_l_entryVec_0[10] ;
  assign NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d423 =
	     (!h_l_entryVec_3[10] ||
	      !IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299) &&
	     NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_NO_ETC___d317 &&
	     NOT_h_l_entryVec_3_read__41_BIT_10_42_65_OR_NO_ETC___d349 ;
  assign NOT_hg_fifo__input__TO_Start_f_first__54_BITS__ETC___d517 =
	     !hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456 ||
	     ((f_l_entryVec_3[10] &&
	       f_l_entryVec_3[9:0] ==
	       hg_fifo__input__TO_Start_f$D_OUT[12:3] ||
	       f_l_entryVec_2_read__7_BIT_10_8_AND_f_l_entryV_ETC___d491) ?
		SEL_ARR_NOT_f_l_lockVec_0_held_notEmpty__8_9_N_ETC___d511 :
		!f_l_entryVec_3[10] || !f_l_entryVec_2[10] ||
		!f_l_entryVec_1[10] ||
		!f_l_entryVec_0[10]) ;
  assign NOT_hg_fifo__input__TO_Start_f_first__54_BITS__ETC___d557 =
	     !hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456 ||
	     ((w_l_entryVec_3[10] &&
	       w_l_entryVec_3[9:0] ==
	       hg_fifo__input__TO_Start_f$D_OUT[12:3] ||
	       w_l_entryVec_2_read__5_BIT_10_6_AND_w_l_entryV_ETC___d531) ?
		SEL_ARR_NOT_w_l_lockVec_0_held_notEmpty__7_8_N_ETC___d551 :
		!w_l_entryVec_3[10] || !w_l_entryVec_2[10] ||
		!w_l_entryVec_1[10] ||
		!w_l_entryVec_0[10]) ;
  assign NOT_w_l_entryVec_1_read__7_BIT_10_8_37_OR_NOT__ETC___d546 =
	     (!w_l_entryVec_1[10] ||
	      !w_l_entryVec_1_read__7_BITS_9_TO_0_24_EQ_hg_fi_ETC___d525) &&
	     (!w_l_entryVec_0[10] ||
	      !w_l_entryVec_0_read__9_BITS_9_TO_0_27_EQ_hg_fi_ETC___d528) &&
	     w_l_entryVec_2[10] &&
	     w_l_entryVec_2_read__5_BITS_9_TO_0_21_EQ_hg_fi_ETC___d522 ;
  assign NOT_w_l_entryVec_2_read__5_BIT_10_6_34_OR_NOT__ETC___d544 =
	     (!w_l_entryVec_2[10] ||
	      !w_l_entryVec_2_read__5_BITS_9_TO_0_21_EQ_hg_fi_ETC___d522) &&
	     (!w_l_entryVec_1[10] ||
	      !w_l_entryVec_1_read__7_BITS_9_TO_0_24_EQ_hg_fi_ETC___d525) &&
	     (!w_l_entryVec_0[10] ||
	      !w_l_entryVec_0_read__9_BITS_9_TO_0_27_EQ_hg_fi_ETC___d528) ;
  assign f_l_entryVec_0_read__0_BITS_9_TO_0_87_EQ_hg_fi_ETC___d488 =
	     f_l_entryVec_0[9:0] == hg_fifo__input__TO_Start_f$D_OUT[12:3] ;
  assign f_l_entryVec_1_read__9_BITS_9_TO_0_84_EQ_hg_fi_ETC___d485 =
	     f_l_entryVec_1[9:0] == hg_fifo__input__TO_Start_f$D_OUT[12:3] ;
  assign f_l_entryVec_2_read__7_BITS_9_TO_0_81_EQ_hg_fi_ETC___d482 =
	     f_l_entryVec_2[9:0] == hg_fifo__input__TO_Start_f$D_OUT[12:3] ;
  assign f_l_entryVec_2_read__7_BIT_10_8_AND_f_l_entryV_ETC___d491 =
	     f_l_entryVec_2[10] &&
	     f_l_entryVec_2_read__7_BITS_9_TO_0_81_EQ_hg_fi_ETC___d482 ||
	     f_l_entryVec_1[10] &&
	     f_l_entryVec_1_read__9_BITS_9_TO_0_84_EQ_hg_fi_ETC___d485 ||
	     f_l_entryVec_0[10] &&
	     f_l_entryVec_0_read__0_BITS_9_TO_0_87_EQ_hg_fi_ETC___d488 ;
  assign h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d246 =
	     h_l_entryVec_2[10] &&
	     IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d176 ||
	     h_l_entryVec_1[10] &&
	     IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d182 ||
	     h_l_entryVec_0[10] &&
	     IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d188 ;
  assign h_l_entryVec_2_read__33_BIT_10_34_AND_IF_h_l_e_ETC___d308 =
	     h_l_entryVec_2[10] &&
	     IF_h_l_entryVec_2_read__33_BIT_10_34_THEN_h_l__ETC___d301 ||
	     h_l_entryVec_1[10] &&
	     IF_h_l_entryVec_1_read__25_BIT_10_26_THEN_h_l__ETC___d303 ||
	     h_l_entryVec_0[10] &&
	     IF_h_l_entryVec_0_read__17_BIT_10_18_THEN_h_l__ETC___d305 ;
  assign hg_fifo_Start_TO_Stage__5_i_notFull__53_AND_hg_ETC___d476 =
	     hg_fifo_Start_TO_Stage__5$FULL_N &&
	     (hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456 ||
	      hg_fifo_Start_TO_Stage__5_1$FULL_N) &&
	     (!hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456 ||
	      !SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461 &&
	      !SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464 &&
	      hg_fifo__input__TO_Start_f$FULL_N) &&
	     (!hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456 ||
	      hg_fifo_Start_TO_Stage__1$FULL_N &&
	      !SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461 &&
	      !SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464) ;
  assign hg_fifo__input__TO_Start_f_first__54_BITS_12_T_ETC___d456 =
	     hg_fifo__input__TO_Start_f$D_OUT[12:3] < 10'd1000 ;
  assign w_l_entryVec_0_read__9_BITS_9_TO_0_27_EQ_hg_fi_ETC___d528 =
	     w_l_entryVec_0[9:0] == hg_fifo__input__TO_Start_f$D_OUT[12:3] ;
  assign w_l_entryVec_1_read__7_BITS_9_TO_0_24_EQ_hg_fi_ETC___d525 =
	     w_l_entryVec_1[9:0] == hg_fifo__input__TO_Start_f$D_OUT[12:3] ;
  assign w_l_entryVec_2_read__5_BITS_9_TO_0_21_EQ_hg_fi_ETC___d522 =
	     w_l_entryVec_2[9:0] == hg_fifo__input__TO_Start_f$D_OUT[12:3] ;
  assign w_l_entryVec_2_read__5_BIT_10_6_AND_w_l_entryV_ETC___d531 =
	     w_l_entryVec_2[10] &&
	     w_l_entryVec_2_read__5_BITS_9_TO_0_21_EQ_hg_fi_ETC___d522 ||
	     w_l_entryVec_1[10] &&
	     w_l_entryVec_1_read__7_BITS_9_TO_0_24_EQ_hg_fi_ETC___d525 ||
	     w_l_entryVec_0[10] &&
	     w_l_entryVec_0_read__9_BITS_9_TO_0_27_EQ_hg_fi_ETC___d528 ;
  assign x__h16133 =
	     (NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_NO_ETC___d192 &&
	      h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d170) ?
	       2'd3 :
	       (NOT_h_l_entryVec_1_read__25_BIT_10_26_79_OR_NO_ETC___d197 ?
		  2'd2 :
		  IF_NOT_h_l_entryVec_0_read__17_BIT_10_18_85_OR_ETC___d200) ;
  assign x__h17167 =
	     (NOT_h_l_entryVec_2_read__33_BIT_10_34_73_OR_NO_ETC___d317 &&
	      h_l_entryVec_3[10] &&
	      IF_h_l_entryVec_3_read__41_BIT_10_42_THEN_h_l__ETC___d299) ?
	       2'd3 :
	       (NOT_h_l_entryVec_1_read__25_BIT_10_26_79_OR_NO_ETC___d319 ?
		  2'd2 :
		  IF_NOT_h_l_entryVec_0_read__17_BIT_10_18_85_OR_ETC___d321) ;
  assign x__h18821 =
	     (h_l_entryVec_2[10] && h_l_entryVec_1[10] &&
	      h_l_entryVec_0[10] &&
	      !h_l_entryVec_3[10]) ?
	       2'd3 :
	       IF_h_l_entryVec_1_read__25_BIT_10_26_AND_h_l_e_ETC___d336 ;
  assign x__h20266 =
	     (NOT_f_l_entryVec_2_read__7_BIT_10_8_94_OR_NOT__ETC___d504 &&
	      f_l_entryVec_3[10] &&
	      f_l_entryVec_3[9:0] == hg_fifo__input__TO_Start_f$D_OUT[12:3]) ?
	       2'd3 :
	       (NOT_f_l_entryVec_1_read__9_BIT_10_0_97_OR_NOT__ETC___d506 ?
		  2'd2 :
		  IF_NOT_f_l_entryVec_0_read__0_BIT_10_1_00_OR_N_ETC___d508) ;
  assign x__h20788 =
	     (NOT_w_l_entryVec_2_read__5_BIT_10_6_34_OR_NOT__ETC___d544 &&
	      w_l_entryVec_3[10] &&
	      w_l_entryVec_3[9:0] == hg_fifo__input__TO_Start_f$D_OUT[12:3]) ?
	       2'd3 :
	       (NOT_w_l_entryVec_1_read__7_BIT_10_8_37_OR_NOT__ETC___d546 ?
		  2'd2 :
		  IF_NOT_w_l_entryVec_0_read__9_BIT_10_0_40_OR_N_ETC___d548) ;
  always@(h_amem_head or
	  h_amem_valid_0 or
	  h_amem_valid_1 or
	  h_amem_valid_2 or
	  h_amem_valid_3 or
	  h_amem_valid_4 or
	  h_amem_valid_5 or h_amem_valid_6 or h_amem_valid_7)
  begin
    case (h_amem_head)
      3'd0:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162 =
	      h_amem_valid_0;
      3'd1:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162 =
	      h_amem_valid_1;
      3'd2:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162 =
	      h_amem_valid_2;
      3'd3:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162 =
	      h_amem_valid_3;
      3'd4:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162 =
	      h_amem_valid_4;
      3'd5:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162 =
	      h_amem_valid_5;
      3'd6:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162 =
	      h_amem_valid_6;
      3'd7:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d162 =
	      h_amem_valid_7;
    endcase
  end
  always@(x__h16133 or
	  h_l_lockVec_0_held$EMPTY_N or
	  h_l_lockVec_1_held$EMPTY_N or
	  h_l_lockVec_2_held$EMPTY_N or h_l_lockVec_3_held$EMPTY_N)
  begin
    case (x__h16133)
      2'd0:
	  CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d207 =
	      h_l_lockVec_0_held$EMPTY_N;
      2'd1:
	  CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d207 =
	      h_l_lockVec_1_held$EMPTY_N;
      2'd2:
	  CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d207 =
	      h_l_lockVec_2_held$EMPTY_N;
      2'd3:
	  CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d207 =
	      h_l_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(hg_fifo_Start_TO_Stage__1$D_OUT or
	  f_amem_outData_0 or
	  f_amem_outData_1 or
	  f_amem_outData_2 or
	  f_amem_outData_3 or
	  f_amem_outData_4 or
	  f_amem_outData_5 or f_amem_outData_6 or f_amem_outData_7)
  begin
    case (hg_fifo_Start_TO_Stage__1$D_OUT[9:7])
      3'd0:
	  SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297 =
	      f_amem_outData_0;
      3'd1:
	  SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297 =
	      f_amem_outData_1;
      3'd2:
	  SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297 =
	      f_amem_outData_2;
      3'd3:
	  SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297 =
	      f_amem_outData_3;
      3'd4:
	  SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297 =
	      f_amem_outData_4;
      3'd5:
	  SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297 =
	      f_amem_outData_5;
      3'd6:
	  SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297 =
	      f_amem_outData_6;
      3'd7:
	  SEL_ARR_f_amem_outData_0_read__86_f_amem_outDa_ETC___d297 =
	      f_amem_outData_7;
    endcase
  end
  always@(x__h17167 or
	  h_l_lockVec_0_held$FULL_N or
	  h_l_lockVec_1_held$FULL_N or
	  h_l_lockVec_2_held$FULL_N or h_l_lockVec_3_held$FULL_N)
  begin
    case (x__h17167)
      2'd0:
	  CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d328 =
	      h_l_lockVec_0_held$FULL_N;
      2'd1:
	  CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d328 =
	      h_l_lockVec_1_held$FULL_N;
      2'd2:
	  CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d328 =
	      h_l_lockVec_2_held$FULL_N;
      2'd3:
	  CASE_IF_NOT_h_l_entryVec_2_read__33_BIT_10_34__ETC___d328 =
	      h_l_lockVec_3_held$FULL_N;
    endcase
  end
  always@(x__h18821 or
	  h_l_lockVec_0_held$FULL_N or
	  h_l_lockVec_1_held$FULL_N or
	  h_l_lockVec_2_held$FULL_N or h_l_lockVec_3_held$FULL_N)
  begin
    case (x__h18821)
      2'd0:
	  CASE_IF_h_l_entryVec_2_read__33_BIT_10_34_AND__ETC___d338 =
	      h_l_lockVec_0_held$FULL_N;
      2'd1:
	  CASE_IF_h_l_entryVec_2_read__33_BIT_10_34_AND__ETC___d338 =
	      h_l_lockVec_1_held$FULL_N;
      2'd2:
	  CASE_IF_h_l_entryVec_2_read__33_BIT_10_34_AND__ETC___d338 =
	      h_l_lockVec_2_held$FULL_N;
      2'd3:
	  CASE_IF_h_l_entryVec_2_read__33_BIT_10_34_AND__ETC___d338 =
	      h_l_lockVec_3_held$FULL_N;
    endcase
  end
  always@(x__h17167 or
	  h_l_lockVec_0_held$EMPTY_N or
	  h_l_lockVec_1_held$EMPTY_N or
	  h_l_lockVec_2_held$EMPTY_N or h_l_lockVec_3_held$EMPTY_N)
  begin
    case (x__h17167)
      2'd0:
	  SEL_ARR_NOT_h_l_lockVec_0_held_notEmpty__15_16_ETC___d352 =
	      !h_l_lockVec_0_held$EMPTY_N;
      2'd1:
	  SEL_ARR_NOT_h_l_lockVec_0_held_notEmpty__15_16_ETC___d352 =
	      !h_l_lockVec_1_held$EMPTY_N;
      2'd2:
	  SEL_ARR_NOT_h_l_lockVec_0_held_notEmpty__15_16_ETC___d352 =
	      !h_l_lockVec_2_held$EMPTY_N;
      2'd3:
	  SEL_ARR_NOT_h_l_lockVec_0_held_notEmpty__15_16_ETC___d352 =
	      !h_l_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(hg_fifo_Start_TO_Stage__1$D_OUT or
	  f_amem_valid_0 or
	  f_amem_valid_1 or
	  f_amem_valid_2 or
	  f_amem_valid_3 or
	  f_amem_valid_4 or
	  f_amem_valid_5 or f_amem_valid_6 or f_amem_valid_7)
  begin
    case (hg_fifo_Start_TO_Stage__1$D_OUT[9:7])
      3'd0:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d364 =
	      f_amem_valid_0;
      3'd1:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d364 =
	      f_amem_valid_1;
      3'd2:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d364 =
	      f_amem_valid_2;
      3'd3:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d364 =
	      f_amem_valid_3;
      3'd4:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d364 =
	      f_amem_valid_4;
      3'd5:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d364 =
	      f_amem_valid_5;
      3'd6:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d364 =
	      f_amem_valid_6;
      3'd7:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d364 =
	      f_amem_valid_7;
    endcase
  end
  always@(f_amem_head or
	  f_amem_valid_0 or
	  f_amem_valid_1 or
	  f_amem_valid_2 or
	  f_amem_valid_3 or
	  f_amem_valid_4 or
	  f_amem_valid_5 or f_amem_valid_6 or f_amem_valid_7)
  begin
    case (f_amem_head)
      3'd0:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461 =
	      f_amem_valid_0;
      3'd1:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461 =
	      f_amem_valid_1;
      3'd2:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461 =
	      f_amem_valid_2;
      3'd3:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461 =
	      f_amem_valid_3;
      3'd4:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461 =
	      f_amem_valid_4;
      3'd5:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461 =
	      f_amem_valid_5;
      3'd6:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461 =
	      f_amem_valid_6;
      3'd7:
	  SEL_ARR_f_amem_valid_0_read__55_f_amem_valid_1_ETC___d461 =
	      f_amem_valid_7;
    endcase
  end
  always@(w_amem_head or
	  w_amem_valid_0 or
	  w_amem_valid_1 or
	  w_amem_valid_2 or
	  w_amem_valid_3 or
	  w_amem_valid_4 or
	  w_amem_valid_5 or w_amem_valid_6 or w_amem_valid_7)
  begin
    case (w_amem_head)
      3'd0:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464 =
	      w_amem_valid_0;
      3'd1:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464 =
	      w_amem_valid_1;
      3'd2:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464 =
	      w_amem_valid_2;
      3'd3:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464 =
	      w_amem_valid_3;
      3'd4:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464 =
	      w_amem_valid_4;
      3'd5:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464 =
	      w_amem_valid_5;
      3'd6:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464 =
	      w_amem_valid_6;
      3'd7:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d464 =
	      w_amem_valid_7;
    endcase
  end
  always@(x__h20266 or
	  f_l_lockVec_0_held$EMPTY_N or
	  f_l_lockVec_1_held$EMPTY_N or
	  f_l_lockVec_2_held$EMPTY_N or f_l_lockVec_3_held$EMPTY_N)
  begin
    case (x__h20266)
      2'd0:
	  SEL_ARR_NOT_f_l_lockVec_0_held_notEmpty__8_9_N_ETC___d511 =
	      !f_l_lockVec_0_held$EMPTY_N;
      2'd1:
	  SEL_ARR_NOT_f_l_lockVec_0_held_notEmpty__8_9_N_ETC___d511 =
	      !f_l_lockVec_1_held$EMPTY_N;
      2'd2:
	  SEL_ARR_NOT_f_l_lockVec_0_held_notEmpty__8_9_N_ETC___d511 =
	      !f_l_lockVec_2_held$EMPTY_N;
      2'd3:
	  SEL_ARR_NOT_f_l_lockVec_0_held_notEmpty__8_9_N_ETC___d511 =
	      !f_l_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(x__h20788 or
	  w_l_lockVec_0_held$EMPTY_N or
	  w_l_lockVec_1_held$EMPTY_N or
	  w_l_lockVec_2_held$EMPTY_N or w_l_lockVec_3_held$EMPTY_N)
  begin
    case (x__h20788)
      2'd0:
	  SEL_ARR_NOT_w_l_lockVec_0_held_notEmpty__7_8_N_ETC___d551 =
	      !w_l_lockVec_0_held$EMPTY_N;
      2'd1:
	  SEL_ARR_NOT_w_l_lockVec_0_held_notEmpty__7_8_N_ETC___d551 =
	      !w_l_lockVec_1_held$EMPTY_N;
      2'd2:
	  SEL_ARR_NOT_w_l_lockVec_0_held_notEmpty__7_8_N_ETC___d551 =
	      !w_l_lockVec_2_held$EMPTY_N;
      2'd3:
	  SEL_ARR_NOT_w_l_lockVec_0_held_notEmpty__7_8_N_ETC___d551 =
	      !w_l_lockVec_3_held$EMPTY_N;
    endcase
  end
  always@(hg_fifo_Stage__1_TO_Stage__2$D_OUT or
	  h_amem_outData_0 or
	  h_amem_outData_1 or
	  h_amem_outData_2 or
	  h_amem_outData_3 or
	  h_amem_outData_4 or
	  h_amem_outData_5 or h_amem_outData_6 or h_amem_outData_7)
  begin
    case (hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46])
      3'd0:
	  SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232 =
	      h_amem_outData_0;
      3'd1:
	  SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232 =
	      h_amem_outData_1;
      3'd2:
	  SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232 =
	      h_amem_outData_2;
      3'd3:
	  SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232 =
	      h_amem_outData_3;
      3'd4:
	  SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232 =
	      h_amem_outData_4;
      3'd5:
	  SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232 =
	      h_amem_outData_5;
      3'd6:
	  SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232 =
	      h_amem_outData_6;
      3'd7:
	  SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232 =
	      h_amem_outData_7;
    endcase
  end
  always@(hg_fifo_Stage__1_TO_Stage__2$D_OUT or
	  h_amem_valid_0 or
	  h_amem_valid_1 or
	  h_amem_valid_2 or
	  h_amem_valid_3 or
	  h_amem_valid_4 or
	  h_amem_valid_5 or h_amem_valid_6 or h_amem_valid_7)
  begin
    case (hg_fifo_Stage__1_TO_Stage__2$D_OUT[48:46])
      3'd0:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d213 =
	      h_amem_valid_0;
      3'd1:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d213 =
	      h_amem_valid_1;
      3'd2:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d213 =
	      h_amem_valid_2;
      3'd3:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d213 =
	      h_amem_valid_3;
      3'd4:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d213 =
	      h_amem_valid_4;
      3'd5:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d213 =
	      h_amem_valid_5;
      3'd6:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d213 =
	      h_amem_valid_6;
      3'd7:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d213 =
	      h_amem_valid_7;
    endcase
  end
  always@(hg_fifo_Stage__2_TO_Stage__3$D_OUT or
	  h_amem_valid_0 or
	  h_amem_valid_1 or
	  h_amem_valid_2 or
	  h_amem_valid_3 or
	  h_amem_valid_4 or
	  h_amem_valid_5 or h_amem_valid_6 or h_amem_valid_7)
  begin
    case (hg_fifo_Stage__2_TO_Stage__3$D_OUT[6:4])
      3'd0:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d273 =
	      h_amem_valid_0;
      3'd1:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d273 =
	      h_amem_valid_1;
      3'd2:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d273 =
	      h_amem_valid_2;
      3'd3:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d273 =
	      h_amem_valid_3;
      3'd4:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d273 =
	      h_amem_valid_4;
      3'd5:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d273 =
	      h_amem_valid_5;
      3'd6:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d273 =
	      h_amem_valid_6;
      3'd7:
	  SEL_ARR_h_amem_valid_0_read__52_h_amem_valid_1_ETC___d273 =
	      h_amem_valid_7;
    endcase
  end
  always@(hg_fifo_Start_TO_Stage__1$D_OUT or
	  w_amem_valid_0 or
	  w_amem_valid_1 or
	  w_amem_valid_2 or
	  w_amem_valid_3 or
	  w_amem_valid_4 or
	  w_amem_valid_5 or w_amem_valid_6 or w_amem_valid_7)
  begin
    case (hg_fifo_Start_TO_Stage__1$D_OUT[5:3])
      3'd0:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d376 =
	      w_amem_valid_0;
      3'd1:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d376 =
	      w_amem_valid_1;
      3'd2:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d376 =
	      w_amem_valid_2;
      3'd3:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d376 =
	      w_amem_valid_3;
      3'd4:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d376 =
	      w_amem_valid_4;
      3'd5:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d376 =
	      w_amem_valid_5;
      3'd6:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d376 =
	      w_amem_valid_6;
      3'd7:
	  SEL_ARR_w_amem_valid_0_read__66_w_amem_valid_1_ETC___d376 =
	      w_amem_valid_7;
    endcase
  end
  always@(x__h17167 or
	  h_l_lockVec_0_nextId or
	  h_l_lockVec_1_nextId or
	  h_l_lockVec_2_nextId or h_l_lockVec_3_nextId)
  begin
    case (x__h17167)
      2'd0:
	  SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d433 =
	      h_l_lockVec_0_nextId;
      2'd1:
	  SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d433 =
	      h_l_lockVec_1_nextId;
      2'd2:
	  SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d433 =
	      h_l_lockVec_2_nextId;
      2'd3:
	  SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d433 =
	      h_l_lockVec_3_nextId;
    endcase
  end
  always@(hg_fifo_Start_TO_Stage__1$D_OUT or
	  w_amem_outData_0 or
	  w_amem_outData_1 or
	  w_amem_outData_2 or
	  w_amem_outData_3 or
	  w_amem_outData_4 or
	  w_amem_outData_5 or w_amem_outData_6 or w_amem_outData_7)
  begin
    case (hg_fifo_Start_TO_Stage__1$D_OUT[5:3])
      3'd0:
	  SEL_ARR_w_amem_outData_0_read__38_w_amem_outDa_ETC___d447 =
	      w_amem_outData_0;
      3'd1:
	  SEL_ARR_w_amem_outData_0_read__38_w_amem_outDa_ETC___d447 =
	      w_amem_outData_1;
      3'd2:
	  SEL_ARR_w_amem_outData_0_read__38_w_amem_outDa_ETC___d447 =
	      w_amem_outData_2;
      3'd3:
	  SEL_ARR_w_amem_outData_0_read__38_w_amem_outDa_ETC___d447 =
	      w_amem_outData_3;
      3'd4:
	  SEL_ARR_w_amem_outData_0_read__38_w_amem_outDa_ETC___d447 =
	      w_amem_outData_4;
      3'd5:
	  SEL_ARR_w_amem_outData_0_read__38_w_amem_outDa_ETC___d447 =
	      w_amem_outData_5;
      3'd6:
	  SEL_ARR_w_amem_outData_0_read__38_w_amem_outDa_ETC___d447 =
	      w_amem_outData_6;
      3'd7:
	  SEL_ARR_w_amem_outData_0_read__38_w_amem_outDa_ETC___d447 =
	      w_amem_outData_7;
    endcase
  end
  always@(x__h18821 or
	  h_l_lockVec_0_nextId or
	  h_l_lockVec_1_nextId or
	  h_l_lockVec_2_nextId or h_l_lockVec_3_nextId)
  begin
    case (x__h18821)
      2'd0:
	  SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d434 =
	      h_l_lockVec_0_nextId;
      2'd1:
	  SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d434 =
	      h_l_lockVec_1_nextId;
      2'd2:
	  SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d434 =
	      h_l_lockVec_2_nextId;
      2'd3:
	  SEL_ARR_h_l_lockVec_0_nextId_03_h_l_lockVec_1__ETC___d434 =
	      h_l_lockVec_3_nextId;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        f_amem_head <= `BSV_ASSIGNMENT_DELAY 3'd0;
	f_amem_nextData <= `BSV_ASSIGNMENT_DELAY 4'd2;
	f_amem_outData_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	f_amem_outData_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	f_amem_outData_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	f_amem_outData_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	f_amem_outData_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	f_amem_outData_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	f_amem_outData_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	f_amem_outData_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	f_amem_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	f_amem_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	f_amem_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	f_amem_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	f_amem_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	f_amem_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	f_amem_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	f_amem_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	f_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	f_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	f_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	f_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	f_l_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	f_l_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_amem_head <= `BSV_ASSIGNMENT_DELAY 3'd0;
	h_amem_nextData <= `BSV_ASSIGNMENT_DELAY 4'd2;
	h_amem_outData_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h_amem_outData_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h_amem_outData_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h_amem_outData_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h_amem_outData_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h_amem_outData_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h_amem_outData_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h_amem_outData_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	h_amem_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h_amem_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h_amem_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h_amem_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h_amem_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h_amem_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h_amem_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h_amem_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	h_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	h_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	h_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	h_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	h_l_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	h_l_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	hg <= `BSV_ASSIGNMENT_DELAY 3'd0;
	hg_busyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hg_feature_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	hg_h_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	hg_weight_lock_region <= `BSV_ASSIGNMENT_DELAY 1'd1;
	w_amem_head <= `BSV_ASSIGNMENT_DELAY 3'd0;
	w_amem_nextData <= `BSV_ASSIGNMENT_DELAY 4'd2;
	w_amem_outData_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	w_amem_outData_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	w_amem_outData_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	w_amem_outData_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	w_amem_outData_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	w_amem_outData_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	w_amem_outData_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	w_amem_outData_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	w_amem_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	w_amem_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	w_amem_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	w_amem_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	w_amem_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	w_amem_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	w_amem_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	w_amem_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	w_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	w_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	w_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	w_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY 11'd682;
	w_l_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	w_l_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (f_amem_head$EN)
	  f_amem_head <= `BSV_ASSIGNMENT_DELAY f_amem_head$D_IN;
	if (f_amem_nextData$EN)
	  f_amem_nextData <= `BSV_ASSIGNMENT_DELAY f_amem_nextData$D_IN;
	if (f_amem_outData_0$EN)
	  f_amem_outData_0 <= `BSV_ASSIGNMENT_DELAY f_amem_outData_0$D_IN;
	if (f_amem_outData_1$EN)
	  f_amem_outData_1 <= `BSV_ASSIGNMENT_DELAY f_amem_outData_1$D_IN;
	if (f_amem_outData_2$EN)
	  f_amem_outData_2 <= `BSV_ASSIGNMENT_DELAY f_amem_outData_2$D_IN;
	if (f_amem_outData_3$EN)
	  f_amem_outData_3 <= `BSV_ASSIGNMENT_DELAY f_amem_outData_3$D_IN;
	if (f_amem_outData_4$EN)
	  f_amem_outData_4 <= `BSV_ASSIGNMENT_DELAY f_amem_outData_4$D_IN;
	if (f_amem_outData_5$EN)
	  f_amem_outData_5 <= `BSV_ASSIGNMENT_DELAY f_amem_outData_5$D_IN;
	if (f_amem_outData_6$EN)
	  f_amem_outData_6 <= `BSV_ASSIGNMENT_DELAY f_amem_outData_6$D_IN;
	if (f_amem_outData_7$EN)
	  f_amem_outData_7 <= `BSV_ASSIGNMENT_DELAY f_amem_outData_7$D_IN;
	if (f_amem_valid_0$EN)
	  f_amem_valid_0 <= `BSV_ASSIGNMENT_DELAY f_amem_valid_0$D_IN;
	if (f_amem_valid_1$EN)
	  f_amem_valid_1 <= `BSV_ASSIGNMENT_DELAY f_amem_valid_1$D_IN;
	if (f_amem_valid_2$EN)
	  f_amem_valid_2 <= `BSV_ASSIGNMENT_DELAY f_amem_valid_2$D_IN;
	if (f_amem_valid_3$EN)
	  f_amem_valid_3 <= `BSV_ASSIGNMENT_DELAY f_amem_valid_3$D_IN;
	if (f_amem_valid_4$EN)
	  f_amem_valid_4 <= `BSV_ASSIGNMENT_DELAY f_amem_valid_4$D_IN;
	if (f_amem_valid_5$EN)
	  f_amem_valid_5 <= `BSV_ASSIGNMENT_DELAY f_amem_valid_5$D_IN;
	if (f_amem_valid_6$EN)
	  f_amem_valid_6 <= `BSV_ASSIGNMENT_DELAY f_amem_valid_6$D_IN;
	if (f_amem_valid_7$EN)
	  f_amem_valid_7 <= `BSV_ASSIGNMENT_DELAY f_amem_valid_7$D_IN;
	if (f_l_entryVec_0$EN)
	  f_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY f_l_entryVec_0$D_IN;
	if (f_l_entryVec_1$EN)
	  f_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY f_l_entryVec_1$D_IN;
	if (f_l_entryVec_2$EN)
	  f_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY f_l_entryVec_2$D_IN;
	if (f_l_entryVec_3$EN)
	  f_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY f_l_entryVec_3$D_IN;
	if (f_l_lockVec_0_cnt$EN)
	  f_l_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY f_l_lockVec_0_cnt$D_IN;
	if (f_l_lockVec_0_nextId$EN)
	  f_l_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_0_nextId$D_IN;
	if (f_l_lockVec_1_cnt$EN)
	  f_l_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY f_l_lockVec_1_cnt$D_IN;
	if (f_l_lockVec_1_nextId$EN)
	  f_l_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_1_nextId$D_IN;
	if (f_l_lockVec_2_cnt$EN)
	  f_l_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY f_l_lockVec_2_cnt$D_IN;
	if (f_l_lockVec_2_nextId$EN)
	  f_l_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_2_nextId$D_IN;
	if (f_l_lockVec_3_cnt$EN)
	  f_l_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY f_l_lockVec_3_cnt$D_IN;
	if (f_l_lockVec_3_nextId$EN)
	  f_l_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY
	      f_l_lockVec_3_nextId$D_IN;
	if (h_amem_head$EN)
	  h_amem_head <= `BSV_ASSIGNMENT_DELAY h_amem_head$D_IN;
	if (h_amem_nextData$EN)
	  h_amem_nextData <= `BSV_ASSIGNMENT_DELAY h_amem_nextData$D_IN;
	if (h_amem_outData_0$EN)
	  h_amem_outData_0 <= `BSV_ASSIGNMENT_DELAY h_amem_outData_0$D_IN;
	if (h_amem_outData_1$EN)
	  h_amem_outData_1 <= `BSV_ASSIGNMENT_DELAY h_amem_outData_1$D_IN;
	if (h_amem_outData_2$EN)
	  h_amem_outData_2 <= `BSV_ASSIGNMENT_DELAY h_amem_outData_2$D_IN;
	if (h_amem_outData_3$EN)
	  h_amem_outData_3 <= `BSV_ASSIGNMENT_DELAY h_amem_outData_3$D_IN;
	if (h_amem_outData_4$EN)
	  h_amem_outData_4 <= `BSV_ASSIGNMENT_DELAY h_amem_outData_4$D_IN;
	if (h_amem_outData_5$EN)
	  h_amem_outData_5 <= `BSV_ASSIGNMENT_DELAY h_amem_outData_5$D_IN;
	if (h_amem_outData_6$EN)
	  h_amem_outData_6 <= `BSV_ASSIGNMENT_DELAY h_amem_outData_6$D_IN;
	if (h_amem_outData_7$EN)
	  h_amem_outData_7 <= `BSV_ASSIGNMENT_DELAY h_amem_outData_7$D_IN;
	if (h_amem_valid_0$EN)
	  h_amem_valid_0 <= `BSV_ASSIGNMENT_DELAY h_amem_valid_0$D_IN;
	if (h_amem_valid_1$EN)
	  h_amem_valid_1 <= `BSV_ASSIGNMENT_DELAY h_amem_valid_1$D_IN;
	if (h_amem_valid_2$EN)
	  h_amem_valid_2 <= `BSV_ASSIGNMENT_DELAY h_amem_valid_2$D_IN;
	if (h_amem_valid_3$EN)
	  h_amem_valid_3 <= `BSV_ASSIGNMENT_DELAY h_amem_valid_3$D_IN;
	if (h_amem_valid_4$EN)
	  h_amem_valid_4 <= `BSV_ASSIGNMENT_DELAY h_amem_valid_4$D_IN;
	if (h_amem_valid_5$EN)
	  h_amem_valid_5 <= `BSV_ASSIGNMENT_DELAY h_amem_valid_5$D_IN;
	if (h_amem_valid_6$EN)
	  h_amem_valid_6 <= `BSV_ASSIGNMENT_DELAY h_amem_valid_6$D_IN;
	if (h_amem_valid_7$EN)
	  h_amem_valid_7 <= `BSV_ASSIGNMENT_DELAY h_amem_valid_7$D_IN;
	if (h_l_entryVec_0$EN)
	  h_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY h_l_entryVec_0$D_IN;
	if (h_l_entryVec_1$EN)
	  h_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY h_l_entryVec_1$D_IN;
	if (h_l_entryVec_2$EN)
	  h_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY h_l_entryVec_2$D_IN;
	if (h_l_entryVec_3$EN)
	  h_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY h_l_entryVec_3$D_IN;
	if (h_l_lockVec_0_cnt$EN)
	  h_l_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY h_l_lockVec_0_cnt$D_IN;
	if (h_l_lockVec_0_nextId$EN)
	  h_l_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_0_nextId$D_IN;
	if (h_l_lockVec_1_cnt$EN)
	  h_l_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY h_l_lockVec_1_cnt$D_IN;
	if (h_l_lockVec_1_nextId$EN)
	  h_l_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_1_nextId$D_IN;
	if (h_l_lockVec_2_cnt$EN)
	  h_l_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY h_l_lockVec_2_cnt$D_IN;
	if (h_l_lockVec_2_nextId$EN)
	  h_l_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_2_nextId$D_IN;
	if (h_l_lockVec_3_cnt$EN)
	  h_l_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY h_l_lockVec_3_cnt$D_IN;
	if (h_l_lockVec_3_nextId$EN)
	  h_l_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY
	      h_l_lockVec_3_nextId$D_IN;
	if (hg$EN) hg <= `BSV_ASSIGNMENT_DELAY hg$D_IN;
	if (hg_busyReg$EN)
	  hg_busyReg <= `BSV_ASSIGNMENT_DELAY hg_busyReg$D_IN;
	if (hg_feature_lock_region$EN)
	  hg_feature_lock_region <= `BSV_ASSIGNMENT_DELAY
	      hg_feature_lock_region$D_IN;
	if (hg_h_lock_region$EN)
	  hg_h_lock_region <= `BSV_ASSIGNMENT_DELAY hg_h_lock_region$D_IN;
	if (hg_weight_lock_region$EN)
	  hg_weight_lock_region <= `BSV_ASSIGNMENT_DELAY
	      hg_weight_lock_region$D_IN;
	if (w_amem_head$EN)
	  w_amem_head <= `BSV_ASSIGNMENT_DELAY w_amem_head$D_IN;
	if (w_amem_nextData$EN)
	  w_amem_nextData <= `BSV_ASSIGNMENT_DELAY w_amem_nextData$D_IN;
	if (w_amem_outData_0$EN)
	  w_amem_outData_0 <= `BSV_ASSIGNMENT_DELAY w_amem_outData_0$D_IN;
	if (w_amem_outData_1$EN)
	  w_amem_outData_1 <= `BSV_ASSIGNMENT_DELAY w_amem_outData_1$D_IN;
	if (w_amem_outData_2$EN)
	  w_amem_outData_2 <= `BSV_ASSIGNMENT_DELAY w_amem_outData_2$D_IN;
	if (w_amem_outData_3$EN)
	  w_amem_outData_3 <= `BSV_ASSIGNMENT_DELAY w_amem_outData_3$D_IN;
	if (w_amem_outData_4$EN)
	  w_amem_outData_4 <= `BSV_ASSIGNMENT_DELAY w_amem_outData_4$D_IN;
	if (w_amem_outData_5$EN)
	  w_amem_outData_5 <= `BSV_ASSIGNMENT_DELAY w_amem_outData_5$D_IN;
	if (w_amem_outData_6$EN)
	  w_amem_outData_6 <= `BSV_ASSIGNMENT_DELAY w_amem_outData_6$D_IN;
	if (w_amem_outData_7$EN)
	  w_amem_outData_7 <= `BSV_ASSIGNMENT_DELAY w_amem_outData_7$D_IN;
	if (w_amem_valid_0$EN)
	  w_amem_valid_0 <= `BSV_ASSIGNMENT_DELAY w_amem_valid_0$D_IN;
	if (w_amem_valid_1$EN)
	  w_amem_valid_1 <= `BSV_ASSIGNMENT_DELAY w_amem_valid_1$D_IN;
	if (w_amem_valid_2$EN)
	  w_amem_valid_2 <= `BSV_ASSIGNMENT_DELAY w_amem_valid_2$D_IN;
	if (w_amem_valid_3$EN)
	  w_amem_valid_3 <= `BSV_ASSIGNMENT_DELAY w_amem_valid_3$D_IN;
	if (w_amem_valid_4$EN)
	  w_amem_valid_4 <= `BSV_ASSIGNMENT_DELAY w_amem_valid_4$D_IN;
	if (w_amem_valid_5$EN)
	  w_amem_valid_5 <= `BSV_ASSIGNMENT_DELAY w_amem_valid_5$D_IN;
	if (w_amem_valid_6$EN)
	  w_amem_valid_6 <= `BSV_ASSIGNMENT_DELAY w_amem_valid_6$D_IN;
	if (w_amem_valid_7$EN)
	  w_amem_valid_7 <= `BSV_ASSIGNMENT_DELAY w_amem_valid_7$D_IN;
	if (w_l_entryVec_0$EN)
	  w_l_entryVec_0 <= `BSV_ASSIGNMENT_DELAY w_l_entryVec_0$D_IN;
	if (w_l_entryVec_1$EN)
	  w_l_entryVec_1 <= `BSV_ASSIGNMENT_DELAY w_l_entryVec_1$D_IN;
	if (w_l_entryVec_2$EN)
	  w_l_entryVec_2 <= `BSV_ASSIGNMENT_DELAY w_l_entryVec_2$D_IN;
	if (w_l_entryVec_3$EN)
	  w_l_entryVec_3 <= `BSV_ASSIGNMENT_DELAY w_l_entryVec_3$D_IN;
	if (w_l_lockVec_0_cnt$EN)
	  w_l_lockVec_0_cnt <= `BSV_ASSIGNMENT_DELAY w_l_lockVec_0_cnt$D_IN;
	if (w_l_lockVec_0_nextId$EN)
	  w_l_lockVec_0_nextId <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_0_nextId$D_IN;
	if (w_l_lockVec_1_cnt$EN)
	  w_l_lockVec_1_cnt <= `BSV_ASSIGNMENT_DELAY w_l_lockVec_1_cnt$D_IN;
	if (w_l_lockVec_1_nextId$EN)
	  w_l_lockVec_1_nextId <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_1_nextId$D_IN;
	if (w_l_lockVec_2_cnt$EN)
	  w_l_lockVec_2_cnt <= `BSV_ASSIGNMENT_DELAY w_l_lockVec_2_cnt$D_IN;
	if (w_l_lockVec_2_nextId$EN)
	  w_l_lockVec_2_nextId <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_2_nextId$D_IN;
	if (w_l_lockVec_3_cnt$EN)
	  w_l_lockVec_3_cnt <= `BSV_ASSIGNMENT_DELAY w_l_lockVec_3_cnt$D_IN;
	if (w_l_lockVec_3_nextId$EN)
	  w_l_lockVec_3_nextId <= `BSV_ASSIGNMENT_DELAY
	      w_l_lockVec_3_nextId$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    f_amem_head = 3'h2;
    f_amem_nextData = 4'hA;
    f_amem_outData_0 = 16'hAAAA;
    f_amem_outData_1 = 16'hAAAA;
    f_amem_outData_2 = 16'hAAAA;
    f_amem_outData_3 = 16'hAAAA;
    f_amem_outData_4 = 16'hAAAA;
    f_amem_outData_5 = 16'hAAAA;
    f_amem_outData_6 = 16'hAAAA;
    f_amem_outData_7 = 16'hAAAA;
    f_amem_valid_0 = 1'h0;
    f_amem_valid_1 = 1'h0;
    f_amem_valid_2 = 1'h0;
    f_amem_valid_3 = 1'h0;
    f_amem_valid_4 = 1'h0;
    f_amem_valid_5 = 1'h0;
    f_amem_valid_6 = 1'h0;
    f_amem_valid_7 = 1'h0;
    f_l_entryVec_0 = 11'h2AA;
    f_l_entryVec_1 = 11'h2AA;
    f_l_entryVec_2 = 11'h2AA;
    f_l_entryVec_3 = 11'h2AA;
    f_l_lockVec_0_cnt = 2'h2;
    f_l_lockVec_0_nextId = 2'h2;
    f_l_lockVec_1_cnt = 2'h2;
    f_l_lockVec_1_nextId = 2'h2;
    f_l_lockVec_2_cnt = 2'h2;
    f_l_lockVec_2_nextId = 2'h2;
    f_l_lockVec_3_cnt = 2'h2;
    f_l_lockVec_3_nextId = 2'h2;
    h_amem_head = 3'h2;
    h_amem_nextData = 4'hA;
    h_amem_outData_0 = 32'hAAAAAAAA;
    h_amem_outData_1 = 32'hAAAAAAAA;
    h_amem_outData_2 = 32'hAAAAAAAA;
    h_amem_outData_3 = 32'hAAAAAAAA;
    h_amem_outData_4 = 32'hAAAAAAAA;
    h_amem_outData_5 = 32'hAAAAAAAA;
    h_amem_outData_6 = 32'hAAAAAAAA;
    h_amem_outData_7 = 32'hAAAAAAAA;
    h_amem_valid_0 = 1'h0;
    h_amem_valid_1 = 1'h0;
    h_amem_valid_2 = 1'h0;
    h_amem_valid_3 = 1'h0;
    h_amem_valid_4 = 1'h0;
    h_amem_valid_5 = 1'h0;
    h_amem_valid_6 = 1'h0;
    h_amem_valid_7 = 1'h0;
    h_l_entryVec_0 = 11'h2AA;
    h_l_entryVec_1 = 11'h2AA;
    h_l_entryVec_2 = 11'h2AA;
    h_l_entryVec_3 = 11'h2AA;
    h_l_lockVec_0_cnt = 2'h2;
    h_l_lockVec_0_nextId = 2'h2;
    h_l_lockVec_1_cnt = 2'h2;
    h_l_lockVec_1_nextId = 2'h2;
    h_l_lockVec_2_cnt = 2'h2;
    h_l_lockVec_2_nextId = 2'h2;
    h_l_lockVec_3_cnt = 2'h2;
    h_l_lockVec_3_nextId = 2'h2;
    hg = 3'h2;
    hg_busyReg = 1'h0;
    hg_feature_lock_region = 1'h0;
    hg_h_lock_region = 1'h0;
    hg_weight_lock_region = 1'h0;
    w_amem_head = 3'h2;
    w_amem_nextData = 4'hA;
    w_amem_outData_0 = 32'hAAAAAAAA;
    w_amem_outData_1 = 32'hAAAAAAAA;
    w_amem_outData_2 = 32'hAAAAAAAA;
    w_amem_outData_3 = 32'hAAAAAAAA;
    w_amem_outData_4 = 32'hAAAAAAAA;
    w_amem_outData_5 = 32'hAAAAAAAA;
    w_amem_outData_6 = 32'hAAAAAAAA;
    w_amem_outData_7 = 32'hAAAAAAAA;
    w_amem_valid_0 = 1'h0;
    w_amem_valid_1 = 1'h0;
    w_amem_valid_2 = 1'h0;
    w_amem_valid_3 = 1'h0;
    w_amem_valid_4 = 1'h0;
    w_amem_valid_5 = 1'h0;
    w_amem_valid_6 = 1'h0;
    w_amem_valid_7 = 1'h0;
    w_l_entryVec_0 = 11'h2AA;
    w_l_entryVec_1 = 11'h2AA;
    w_l_entryVec_2 = 11'h2AA;
    w_l_entryVec_3 = 11'h2AA;
    w_l_lockVec_0_cnt = 2'h2;
    w_l_lockVec_0_nextId = 2'h2;
    w_l_lockVec_1_cnt = 2'h2;
    w_l_lockVec_1_nextId = 2'h2;
    w_l_lockVec_2_cnt = 2'h2;
    w_l_lockVec_2_nextId = 2'h2;
    w_l_lockVec_3_cnt = 2'h2;
    w_l_lockVec_3_nextId = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hg_s_Stage__2_execute)
	$display($unsigned(SEL_ARR_h_amem_outData_0_read__23_h_amem_outDa_ETC___d232 +
			   hg_fifo_Stage__1_TO_Stage__2$D_OUT[34:3]));
  end
  // synopsys translate_on
endmodule  // mkCircuit

