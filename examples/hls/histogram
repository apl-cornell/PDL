/*
n = 128
void histogram ( int feature [] , float weight [] , float hist [] , int n ) {
    for (int i =0; i < n ; ++ i ) {
        int m = feature [ i ];
        float wt = weight [ i ];
        float x = hist [ m ];
        hist [ m ] = x + wt ;
    }
}
*/

pipe hist(counter: int<7>)[feature: int<32>[7]<c,s>, weight: int<32>[7]<c,s>, h: int<32>[32]<c,s>] {
    if (counter < 127<7>) {
        call hist(counter + 1<7>);
    } //else no next loop iteration, done
    start(feature);
    start(weight);
    acquire(feature[counter]);
    acquire(weight[counter]);
    int<32> m = feature[counter];
    int<32> wt = weight[counter];
    release(feature[counter]);
    release(weight[counter]);
    end(feature);
    end(weight);
    ---
    start(h);
    acquire(h[m]);
    end(h);
   
    int<32> nm = h[m] + wt; //many ways to break this section up for scheduling
    ---
    h[m] <- nm;
    release(h[m]);
}

circuit {
    f = regfile(int<32>, 7);
    w = regfile(int<32>, 7);
    h = regfile(int<32>, 32);
    hg = new hist[f, w, h];
    call hg(0<7>);
}