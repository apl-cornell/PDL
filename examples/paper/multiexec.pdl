pipe multi_stg_mul(a1: int<32>, a2: int<32>)[]: int<32> {
     --- //TODO actually implement
     output(a1 * a2);
}

pipe multi_stg_div(a1: int<32>, a2: int<32>)[]: int<32> {
     --- //TODO actually implement
     ---
     ---
     ---
     output(a1 / a2);
}

pipe cpu(pc: int<32>)[rf: int<32>[5]<c,s>, imem: int<32>[32]<a,a>, m: multi_stg_mul, f: multi_stg_div] {
 start(imem);
 acquire(imem);
 int<32> insn <- imem[pc];
 release(imem);
 end(imem);
 call cpu(pc + 4<32>);
 ---
 int<2> op = insn{1:0};
 int<5> rs1 = insn{6:2};
 int<5> rs2 = insn{11:7};
 int<5> rd = insn{16:12};
 start(rf);
 acquire(rf[rs1]);
 acquire(rf[rs2]);
 int<32> rf1 = rf[rs1];
 int<32> rf2 = rf[rs2];
 release(rf[rs1]);
 release(rf[rs2]);
 reserve(rf[rd]);
 end(rf);
 ---
 if (op == 0<2>) {   
    ---
    int<32> res = rf1 + rf2;
 } else {
 if (op == 1<2>) {
    start(m);
    acquire(m);
    int<32> res <- call m(rf1, rf2);
    release(m);
    end(m);
    ---
 } else {
    start(f);
    acquire(f);
    int<32> res <- call f(rf1, rf2);
    release(f);
    end(f);
    ---
 }}
 block(rf[rd]);
 rf[rd] <- res;
 release(rf[rd]);
 ---
}

circuit {
 i = memory(int<32>, 32);
 r = regfile(int<32>, 5);
 m = new multi_stg_mul[];
 fp = new multi_stg_div[];
 c = new cpu[r, i, m, fp];
 call c(0<32>);
}