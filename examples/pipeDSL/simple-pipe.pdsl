def alu(arg1: typ1, arg2: typ2, op: typ3): rtyp {
    if (op == 1) {
        return arg1 + arg2;
    } else if (op == 2) {
        return arg1 >> arg2;
    } else if (op == 3) {
        return arg1 - arg2;
    } else {
        return arg1 * arg2;
    }
}
pipe cpu(pc: Int)[rf, imem, dmem] {
    insn <- imem[pc];
    ---
    op_type = insn{1:0};
    op = insn{3:2};
    rs1 = insn{8:4};
    rs2 = insn{13:9};
    rd = insn{18:14};
    imm = insn{31:19};
    arg1 <- rf[rs1];
    arg2 <- rf[rs2];
    //hello
    ---
    //op_type == BR;
    offset = (op_type == 0b0 && arg1 == arg2) ? imm : 4;
    npc = pc + offset;
    //op_type == ADD;
    if (op_type == 0b1) {
      add_arg2 = arg2;
    } else {
    //LD/ST
      add_arg2 = imm;
    }
    alu_res = arg1 + add_arg2;
    ---
    if (op_type == 0b10) {
        //LD
        mem_res = dmem[alu_res];
    } else if (op_type == 0b11) {
        //ST
        dmem[alu_res] = arg2;
    }
    ---
    if (op_type == 0b1) {
        rf[rd] = alu_res;
    } else if (op_type == 0b10) {
        rf[rd] = mem_res;
    }
    call cpu(npc);
}

circuit {
    i = memory(1024);
    d = memory(1024);
    r = memory(32);
    c = new cpu(0)[r, i, d];
}