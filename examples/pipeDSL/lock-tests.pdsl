/* Expected Fail since acquired inside branch and not released
pipe test1(input: int<32>)[rf: int<32>[5]] {
    if (input{0:0} == 1) {
        acquire(rf);
    }
    release(rf);
}*/
// Expected Success
pipe test2(input: int<32>)[rf: int<32>[5]] {
    if (input{0:0} == 1) {
        acquire(rf);
        release(rf);
    }
}
/* Expected failure since not released in both branches
pipe test3(input: int<32>)[rf: int<32>[5]] {
    acquire(rf);
    if (input{0:0} == 1) {
        int<32> arg <- rf[input{4:0}];
        release(rf);
    }
} */
/* Expected failure since acquired in both branches
pipe test4(input: int<32>)[rf: int<32>[5]] {

    if (input{0:0} == 1) {
        acquire(rf);
        int<32> arg <- rf[input{4:0}];
        release(rf);
    } else {
        ---
        acquire(rf);
        ---
        release(rf);
    }
} */
//Expected Success
pipe test5(input: int<32>)[rf: int<32>[5]] {
    acquire(rf);
    ---
    if (input{0:0} == 1) {
        release(rf);
    } else {
        int<32> arg <- rf[input{31:27}];
        release(rf);
    }
}
/* Expected Failure, must acquire before mem op
pipe test6(input: int<32>)[rf: int<32>[5]] {
    reserve(rf);
    if (input{0:0} == 1) {
        release(rf);
    } else {
        int<32> arg <- rf[input{31:27}];
        release(rf);
    }
} */
/* Expected fail, must acquire first
pipe test7(input: int<32>)[rf: int<32>[5]] {
    reserve(rf);
    if (input{0:0} == 1) {
        release(rf);
    } else {
        release(rf);
    }
} */
//Expected success since reserve is before branch
pipe test8(input: int<32>)[rf: int<32>[5]] {
    reserve(rf);
    if (input{0:0} == 1) {
        acquire(rf);
        release(rf);
    } else {
        acquire(rf);
        release(rf);
    }
}
//Expected success
pipe test9(input: int<32>)[rf: int<32>[5], dmem: int<32>[32]] {
    reserve(dmem);
    if (input{0:0} == 1) {
        acquire(rf);
        release(rf);
    }
    acquire(dmem);
    release(dmem);
}
//Expected success
pipe test10(input: int<32>)[rf: int<32>[5], dmem: int<32>[32]] {
  speculate(int<1> x = 1, {
    x = 1;
  }, {
    acquire(rf);
  })
  ---
  release(rf);
}
/* Expected failure since speculation may happen before acquire
pipe test11(input: int<32>)[rf: int<32>[5], dmem: int<32>[32]] {
  speculate(int<1> x = 1, {
   acquire(rf);
    x = 1;
  }, {
    int<32> y <- rf[x ++ 0<4>];
  })
  ---
  release(rf);
} */
// Expect success
pipe test12(input: int<32>)[rf: int<32>[5], dmem: int<32>[32]] {
    acquire(rf);
    speculate(int<1> x = 1, {
        x = 1;
    }, {
        int<32> y <- rf[x ++ 0<4>];
    })
    ---
    release(rf);
}
/* Expected failure since speculation may happen after release
pipe test13(input: int<32>)[rf: int<32>[5], dmem: int<32>[32]] {
    acquire(rf);
    speculate(int<1> x = 1, {
        release(rf);
        x = 1;
    }, {
        int<32> y <- rf[x ++ 0<4>];
    })
} */
/* Expected failure since release operations aren't allowed in speculation
pipe test14(input: int<32>)[rf: int<32>[5], dmem: int<32>[32]] {
    acquire(rf);
    speculate(int<1> x = 1, {
        x = 1;
    }, {
        release(rf);
    })
} */
circuit {
    r = memory(int<32>, 5);
    t = new test2(0<32>)[r];
}