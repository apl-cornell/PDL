pipe test1(input: int<32>)[rf: int<32>[5]] {
    start(rf);
    acquire(rf);
    end(rf);
    if (input{0:0} == 1) {
        rf[input{4:0}] <- input;
        ---
        int<32> y = input;
        ---
        int<32> z = input;
    } else {
        int<32> x = input;
    }
    release(rf);
    ---
    call test1(input);
}

pipe test2(input: int<32>)[rf: int<32>[5]] {
    start(rf);
    acquire(rf);
    end(rf);
    if (input{0:0} == 1) {
        int<32> y = 4<32>;
    } else {
        int<32> y <- rf[input{4:0}];
        ---
   }
   release(rf);
   call test2(y);
}

pipe test3(input: int<32>)[] {
    if (input{0:0} == 1) {
        if (input{1:1} == 0) {
            int<2> x = 0<2>;
        } else {
            int<2> x = 1<2>;
        }
    } else {
        if (input{2:2} == 0) {
            int<2> x = 3<2>;
        } else {
            int<2> x = 4<2>;
        }
    }
    call test3(0<30> ++ x);
}

pipe test4(input: int<32>)[] {
    if (cast (input{0:0}, bool)) {
        if (input{1:1} == 0) {
            int<2> x = 0<2>;
        } else {
            ---
            int<2> x = 1<2>;
        }
    } else {
       int<2> x = 3<2>;
    }
    call test4(0<30> ++ x);
}

circuit {
    r = memory(int<32>, 5);
    t = new test1[r];
    call t(0<32>);
}