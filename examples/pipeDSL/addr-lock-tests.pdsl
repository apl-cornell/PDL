pipe good(in: bool)[r1: int<32>[5], r2: int<32>[5]] {
    start(r1);
    start(r2);
    int<5> addr = 1<5>;
    if (in) {
        reserve(r1[addr]);
    } else {
        reserve(r2[addr]);
    }
    end(r1);
    end(r2);
    ---
    if (in) {
        block(r1[addr]);
        r1[addr] <- 32<32>;
        release(r1[addr]);
    }
    ---
    if (!in) {
        block(r2[addr]);
        r2[addr] <- 32<32>;
        release(r2[addr]);
    }
}
/*
pipe bad(in: bool)[r1: int<32>[5], r2: int<32>[5]] {
    start(r1);
    start(r2);
    int<5> addr = 1<5>;
    if (in) {
        reserve(r1[addr]);
    } else {
        reserve(r2[addr]);
    }
    end(r1);
    end(r2);
    ---
    if (in) {
        block(r1[addr]);
        r1[addr] <- 32<32>;
        release(r1[addr]);
    }
    ---
    block(r2[addr]);
    r2[addr] <- 32<32>;
    release(r2[addr]);
} */
/*
pipe bad2(in: bool)[r1: int<32>[5]] {
    start(r1);
    int<5> addr = 1<5>;
    int<5> addr2 = 1<5>;
    reserve(r1[addr]);
    reserve(r1[addr2]);
    end(r1);
    ---
    block(r1[addr2]);
    r1[addr2] <- 32<32>;
    release(r1[addr2]);
    ---
} */

circuit {
    r = memory(int<32>, 5);
}