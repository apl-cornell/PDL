//pipe_1 defines a module which accepts
//an integer input and returns the "last" input
//that it saw, or 0 the first time it receives an input
//It also includes an extra cycle in the middle just
//to add a time delay for example purposes
pipe_1 {

  Reg[int] last = 0;

  input(int v) {
   Req r = new Channel();
   return r; //this returns a channel to the caller so that it can receive data on that channel
   middle(v, r);
  }

  middle(int v, Req r) {
    last <= v;
    output(last, r);
  }

  output(int v, Req r) {
    r.reply(v);
  }

}

//This creates a single pipe, p
//Additionally, it is a 2 stage
//dataflow that passes data through it
//In the second stage, it prints the data
//passed through the pipe, p
main {

  p = new pipe_1();

  stage_1.init(0); //create initial conditions for stage_1 inputs

  stage_1(int v) {
    r = p.send(v);    //calls p's INPUT method
    stage_1(v + 1); //sends v+1 to this stage, the next time it executes
    stage_2(v, r); //sends v to stage_2
  }

  stage_2(int v, Req r) {
    dest = r.recv(); //calls p's OUTPUT method while passing a channel to this stage to receive data
    print("This = " + v);
    print("Last = " + dest);
    print("Clock = " + clock()); //gets the number of cycles that have elapsed since reset
  }
}

//executing main should print:
This = 0
Last = 0
Clock = 2
This = 1
Last = 0
Clock = 3
This = 2
Last = 1
Clock = 4
This = 3
Last = 2
Clock = 5
...
